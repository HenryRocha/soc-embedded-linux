
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000048e4 memsz 0x000048e4 flags r-x
    LOAD off    0x00005904 vaddr 0x00044904 paddr 0x00045330 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006d5c vaddr 0x00045d5c paddr 0x00045d5c align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00040020  00040020  00006330  2**0
                  CONTENTS
  2 .text         00004898  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000448b8  000448b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  00044904  00045330  00005904  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00045d5c  00045d5c  00006d5c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00045da0  00045da0  00006330  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006330  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008c8  00000000  00000000  00006358  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00014a03  00000000  00000000  00006c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000053f8  00000000  00000000  0001b623  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000060dc  00000000  00000000  00020a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001294  00000000  00000000  00026af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f14  00000000  00000000  00027d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00029ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0002e6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d0  00000000  00000000  0002e750  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00030cd6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00030cd9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00030ce5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00030ce6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00030ce7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00030cf2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00030cfd  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00030d08  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  00030d10  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e8b  00000000  00000000  00030d4d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003dbbf  00000000  00000000  00035bd8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040020 l    d  .text	00000000 .text
000448b8 l    d  .rodata	00000000 .rodata
00044904 l    d  .rwdata	00000000 .rwdata
00045d5c l    d  .bss	00000000 .bss
00045da0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00040068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0004027c l     F .text	00000008 __fp_unlock
00040290 l     F .text	0000019c __sinit.part.1
0004042c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00044904 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00042ed8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00042fe4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00043010 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000430fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000431dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000432c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004349c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004532c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00043718 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004384c l     F .text	00000034 alt_dev_reg
000452d8 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00043ccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00043ea0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00043fe0 l     F .text	0000003c alt_get_errno
0004401c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00042cd0 g     F .text	00000054 _isatty_r
000433d8 g     F .text	0000007c alt_main
00040110 g     F .text	000000c0 _puts_r
000429f8 g     F .text	00000060 _lseek_r
00045330 g       *ABS*	00000000 __flash_rwdata_start
00045da0 g       *ABS*	00000000 __alt_heap_start
00041fac g     F .text	0000005c __sseek
000405cc g     F .text	00000010 __sinit
00040434 g     F .text	00000068 __sfmoreglue
00043478 g     F .text	00000024 __malloc_unlock
00041698 g     F .text	0000015c memmove
000405b4 g     F .text	00000018 _cleanup
00044234 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042c74 g     F .text	0000005c _fstat_r
00045d68 g     O .bss	00000004 errno
00041f28 g     F .text	00000008 __seofread
00045d70 g     O .bss	00000004 alt_argv
0004d304 g       *ABS*	00000000 _gp
000436e8 g     F .text	00000030 usleep
00045158 g     O .rwdata	00000180 alt_fd_list
00044258 g     F .text	00000090 alt_find_dev
00041550 g     F .text	00000148 memcpy
00040284 g     F .text	0000000c _cleanup_r
00043f64 g     F .text	0000007c alt_io_redirect
000448b8 g       *ABS*	00000000 __DTOR_END__
000401d0 g     F .text	00000014 puts
000439ac g     F .text	000000ec altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00042e1c g     F .text	00000064 .hidden __udivsi3
00043138 g     F .text	000000a4 isatty
00044494 g     F .text	00000090 alt_icache_flush
00045d64 g     O .bss	00000004 __malloc_top_pad
0004061c g     F .text	000004bc __sfvwrite_r
00041e80 g     F .text	00000054 _sbrk_r
00042c14 g     F .text	00000060 _read_r
00045324 g     O .rwdata	00000004 alt_max_fd
00042218 g     F .text	000000f0 _fclose_r
00042594 g     F .text	00000030 fflush
00045d60 g     O .bss	00000004 __malloc_max_sbrked_mem
00043304 g     F .text	000000d4 lseek
00045304 g     O .rwdata	00000004 _global_impure_ptr
0004191c g     F .text	00000564 _realloc_r
00045da0 g       *ABS*	00000000 __bss_end
000405ec g     F .text	00000018 __fp_lock_all
00045130 g     O .rwdata	00000028 alt_dev_null
00043c84 g     F .text	00000048 alt_dcache_flush_all
00045330 g       *ABS*	00000000 __ram_rwdata_end
0004531c g     O .rwdata	00000008 alt_dev_list
00043754 g     F .text	000000f8 write
00044904 g       *ABS*	00000000 __ram_rodata_end
0004304c g     F .text	000000b0 fstat
00042e80 g     F .text	00000058 .hidden __umodsi3
00045da0 g       *ABS*	00000000 end
000448b8 g       *ABS*	00000000 __CTOR_LIST__
00068000 g       *ABS*	00000000 __alt_stack_pointer
00043a98 g     F .text	00000094 altera_avalon_jtag_uart_write
000405dc g     F .text	00000004 __sfp_lock_acquire
0004146c g     F .text	000000e4 memchr
000426e8 g     F .text	00000310 _free_r
00044704 g     F .text	00000180 __call_exitprocs
0004530c g     O .rwdata	00000004 __malloc_sbrk_base
00040020 g     F .text	0000004c _start
000434d8 g     F .text	000000fc read
000438b8 g     F .text	00000034 alt_sys_init
000445ec g     F .text	00000118 __register_exitproc
00044904 g       *ABS*	00000000 __ram_rwdata_start
000448b8 g       *ABS*	00000000 __ram_rodata_start
00045d78 g     O .bss	00000028 __malloc_current_mallinfo
000438ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000443f0 g     F .text	000000a4 alt_get_fd
00043b2c g     F .text	00000158 alt_busy_sleep
000421c4 g     F .text	00000054 _close_r
00044570 g     F .text	0000007c memcmp
00045da0 g       *ABS*	00000000 __alt_stack_base
00042070 g     F .text	00000154 __swsetup_r
0004049c g     F .text	00000118 __sfp
00044d28 g     O .rwdata	00000408 __malloc_av_
000405e8 g     F .text	00000004 __sinit_lock_release
00041ed4 g     F .text	00000054 __sread
000442e8 g     F .text	00000108 alt_find_file
00043d08 g     F .text	000000a4 alt_dev_llist_insert
00043454 g     F .text	00000024 __malloc_lock
00043638 g     F .text	000000b0 sbrk
00042538 g     F .text	0000005c _fflush_r
00045d5c g       *ABS*	00000000 __bss_start
000417f4 g     F .text	00000128 memset
000400b0 g     F .text	00000060 main
00045d74 g     O .bss	00000004 alt_envp
00045d5c g     O .bss	00000004 __malloc_max_total_mem
0004394c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00042008 g     F .text	00000008 __sclose
00068000 g       *ABS*	00000000 __alt_heap_limit
00042308 g     F .text	00000014 fclose
00040c60 g     F .text	0000080c _malloc_r
00045328 g     O .rwdata	00000004 alt_errno
00040ad8 g     F .text	000000c4 _fwalk
00042d24 g     F .text	00000084 .hidden __divsi3
000425c4 g     F .text	00000124 _malloc_trim_r
000448b8 g       *ABS*	00000000 __CTOR_END__
000448b8 g       *ABS*	00000000 __flash_rodata_start
000448b8 g       *ABS*	00000000 __DTOR_LIST__
0004006c g     F .text	00000044 delay
00043880 g     F .text	00000038 alt_irq_init
000435d4 g     F .text	00000064 alt_release_fd
00044524 g     F .text	00000014 atexit
00042010 g     F .text	00000060 _write_r
00045308 g     O .rwdata	00000004 _impure_ptr
00045d6c g     O .bss	00000004 alt_argc
0004231c g     F .text	0000021c __sflush_r
00043e0c g     F .text	00000060 _do_dtors
00040604 g     F .text	00000018 __fp_unlock_all
00045314 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00045330 g       *ABS*	00000000 _edata
00045da0 g       *ABS*	00000000 _end
00040020 g       *ABS*	00000000 __ram_exceptions_end
00041f30 g     F .text	0000007c __swrite
00045310 g     O .rwdata	00000004 __malloc_trim_threshold
00044538 g     F .text	00000038 exit
00040b9c g     F .text	000000c4 _fwalk_reent
00042da8 g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
000405e0 g     F .text	00000004 __sfp_lock_release
00044884 g     F .text	00000034 _exit
00042a58 g     F .text	000001bc __smakebuf_r
000401e4 g     F .text	00000098 strlen
000440e0 g     F .text	00000154 open
00043e6c g     F .text	00000034 alt_icache_flush_all
00043dac g     F .text	00000060 _do_ctors
00042f14 g     F .text	000000d0 close
00043244 g     F .text	00000084 alt_load
000405e4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08400814 	ori	at,at,32
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>

Disassembly of section .text:

00040020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   4002c:	00bffd16 	blt	zero,r2,40024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40030:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40034:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   40038:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   4003c:	d6b4c114 	ori	gp,gp,54020
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40040:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40044:	10975714 	ori	r2,r2,23900

    movhi r3, %hi(__bss_end)
   40048:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   4004c:	18d76814 	ori	r3,r3,23968

    beq r2, r3, 1f
   40050:	10c00326 	beq	r2,r3,40060 <_start+0x40>

0:
    stw zero, (r2)
   40054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4005c:	10fffd36 	bltu	r2,r3,40054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40060:	00432440 	call	43244 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40064:	00433d80 	call	433d8 <alt_main>

00040068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40068:	003fff06 	br	40068 <alt_after_alt_main>

0004006c <delay>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
   4006c:	defffd04 	addi	sp,sp,-12
   40070:	df000215 	stw	fp,8(sp)
   40074:	df000204 	addi	fp,sp,8
   40078:	e13fff15 	stw	r4,-4(fp)
      unsigned int delay = 0 ;
   4007c:	e03ffe15 	stw	zero,-8(fp)
      while(delay < n){
   40080:	00000306 	br	40090 <delay+0x24>
          delay++;
   40084:	e0bffe17 	ldw	r2,-8(fp)
   40088:	10800044 	addi	r2,r2,1
   4008c:	e0bffe15 	stw	r2,-8(fp)
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n){
      unsigned int delay = 0 ;
      while(delay < n){
   40090:	e0bfff17 	ldw	r2,-4(fp)
   40094:	e0fffe17 	ldw	r3,-8(fp)
   40098:	18bffa36 	bltu	r3,r2,40084 <delay+0x18>
          delay++;
      }
}
   4009c:	0001883a 	nop
   400a0:	e037883a 	mov	sp,fp
   400a4:	df000017 	ldw	fp,0(sp)
   400a8:	dec00104 	addi	sp,sp,4
   400ac:	f800283a 	ret

000400b0 <main>:

int main(void){
   400b0:	defffd04 	addi	sp,sp,-12
   400b4:	dfc00215 	stw	ra,8(sp)
   400b8:	df000115 	stw	fp,4(sp)
   400bc:	df000104 	addi	fp,sp,4
  unsigned int led = 0;
   400c0:	e03fff15 	stw	zero,-4(fp)

  printf("Embarcados++ \n");
   400c4:	01000134 	movhi	r4,4
   400c8:	21122e04 	addi	r4,r4,18616
   400cc:	00401d00 	call	401d0 <puts>

  while(1){
      if (led <= 5){
   400d0:	e0bfff17 	ldw	r2,-4(fp)
   400d4:	108001a8 	cmpgeui	r2,r2,6
   400d8:	10000b1e 	bne	r2,zero,40108 <main+0x58>
          IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led++);
   400dc:	e0bfff17 	ldw	r2,-4(fp)
   400e0:	10c00044 	addi	r3,r2,1
   400e4:	e0ffff15 	stw	r3,-4(fp)
   400e8:	00c00044 	movi	r3,1
   400ec:	1886983a 	sll	r3,r3,r2
   400f0:	00800234 	movhi	r2,8
   400f4:	10840804 	addi	r2,r2,4128
   400f8:	10c00035 	stwio	r3,0(r2)
          usleep(50000);
   400fc:	0130d414 	movui	r4,50000
   40100:	00436e80 	call	436e8 <usleep>
   40104:	003ff206 	br	400d0 <main+0x20>
      }
      else{
          led = 0;
   40108:	e03fff15 	stw	zero,-4(fp)
      }
  };
   4010c:	003ff006 	br	400d0 <main+0x20>

00040110 <_puts_r>:
   40110:	defff604 	addi	sp,sp,-40
   40114:	dc000715 	stw	r16,28(sp)
   40118:	2021883a 	mov	r16,r4
   4011c:	2809883a 	mov	r4,r5
   40120:	dc400815 	stw	r17,32(sp)
   40124:	dfc00915 	stw	ra,36(sp)
   40128:	2823883a 	mov	r17,r5
   4012c:	00401e40 	call	401e4 <strlen>
   40130:	10c00044 	addi	r3,r2,1
   40134:	d8800115 	stw	r2,4(sp)
   40138:	00800134 	movhi	r2,4
   4013c:	10923204 	addi	r2,r2,18632
   40140:	d8800215 	stw	r2,8(sp)
   40144:	00800044 	movi	r2,1
   40148:	d8800315 	stw	r2,12(sp)
   4014c:	00800084 	movi	r2,2
   40150:	dc400015 	stw	r17,0(sp)
   40154:	d8c00615 	stw	r3,24(sp)
   40158:	dec00415 	stw	sp,16(sp)
   4015c:	d8800515 	stw	r2,20(sp)
   40160:	80000226 	beq	r16,zero,4016c <_puts_r+0x5c>
   40164:	80800e17 	ldw	r2,56(r16)
   40168:	10001426 	beq	r2,zero,401bc <_puts_r+0xac>
   4016c:	81400217 	ldw	r5,8(r16)
   40170:	2880030b 	ldhu	r2,12(r5)
   40174:	10c8000c 	andi	r3,r2,8192
   40178:	1800061e 	bne	r3,zero,40194 <_puts_r+0x84>
   4017c:	29001917 	ldw	r4,100(r5)
   40180:	00f7ffc4 	movi	r3,-8193
   40184:	10880014 	ori	r2,r2,8192
   40188:	20c6703a 	and	r3,r4,r3
   4018c:	2880030d 	sth	r2,12(r5)
   40190:	28c01915 	stw	r3,100(r5)
   40194:	d9800404 	addi	r6,sp,16
   40198:	8009883a 	mov	r4,r16
   4019c:	004061c0 	call	4061c <__sfvwrite_r>
   401a0:	1000091e 	bne	r2,zero,401c8 <_puts_r+0xb8>
   401a4:	00800284 	movi	r2,10
   401a8:	dfc00917 	ldw	ra,36(sp)
   401ac:	dc400817 	ldw	r17,32(sp)
   401b0:	dc000717 	ldw	r16,28(sp)
   401b4:	dec00a04 	addi	sp,sp,40
   401b8:	f800283a 	ret
   401bc:	8009883a 	mov	r4,r16
   401c0:	00405cc0 	call	405cc <__sinit>
   401c4:	003fe906 	br	4016c <_puts_r+0x5c>
   401c8:	00bfffc4 	movi	r2,-1
   401cc:	003ff606 	br	401a8 <_puts_r+0x98>

000401d0 <puts>:
   401d0:	00800134 	movhi	r2,4
   401d4:	1094c204 	addi	r2,r2,21256
   401d8:	200b883a 	mov	r5,r4
   401dc:	11000017 	ldw	r4,0(r2)
   401e0:	00401101 	jmpi	40110 <_puts_r>

000401e4 <strlen>:
   401e4:	208000cc 	andi	r2,r4,3
   401e8:	10002026 	beq	r2,zero,4026c <strlen+0x88>
   401ec:	20800007 	ldb	r2,0(r4)
   401f0:	10002026 	beq	r2,zero,40274 <strlen+0x90>
   401f4:	2005883a 	mov	r2,r4
   401f8:	00000206 	br	40204 <strlen+0x20>
   401fc:	10c00007 	ldb	r3,0(r2)
   40200:	18001826 	beq	r3,zero,40264 <strlen+0x80>
   40204:	10800044 	addi	r2,r2,1
   40208:	10c000cc 	andi	r3,r2,3
   4020c:	183ffb1e 	bne	r3,zero,401fc <strlen+0x18>
   40210:	10c00017 	ldw	r3,0(r2)
   40214:	01ffbff4 	movhi	r7,65279
   40218:	39ffbfc4 	addi	r7,r7,-257
   4021c:	00ca303a 	nor	r5,zero,r3
   40220:	01a02074 	movhi	r6,32897
   40224:	19c7883a 	add	r3,r3,r7
   40228:	31a02004 	addi	r6,r6,-32640
   4022c:	1946703a 	and	r3,r3,r5
   40230:	1986703a 	and	r3,r3,r6
   40234:	1800091e 	bne	r3,zero,4025c <strlen+0x78>
   40238:	10800104 	addi	r2,r2,4
   4023c:	10c00017 	ldw	r3,0(r2)
   40240:	19cb883a 	add	r5,r3,r7
   40244:	00c6303a 	nor	r3,zero,r3
   40248:	28c6703a 	and	r3,r5,r3
   4024c:	1986703a 	and	r3,r3,r6
   40250:	183ff926 	beq	r3,zero,40238 <strlen+0x54>
   40254:	00000106 	br	4025c <strlen+0x78>
   40258:	10800044 	addi	r2,r2,1
   4025c:	10c00007 	ldb	r3,0(r2)
   40260:	183ffd1e 	bne	r3,zero,40258 <strlen+0x74>
   40264:	1105c83a 	sub	r2,r2,r4
   40268:	f800283a 	ret
   4026c:	2005883a 	mov	r2,r4
   40270:	003fe706 	br	40210 <strlen+0x2c>
   40274:	0005883a 	mov	r2,zero
   40278:	f800283a 	ret

0004027c <__fp_unlock>:
   4027c:	0005883a 	mov	r2,zero
   40280:	f800283a 	ret

00040284 <_cleanup_r>:
   40284:	01400134 	movhi	r5,4
   40288:	29488604 	addi	r5,r5,8728
   4028c:	0040b9c1 	jmpi	40b9c <_fwalk_reent>

00040290 <__sinit.part.1>:
   40290:	defff704 	addi	sp,sp,-36
   40294:	00c00134 	movhi	r3,4
   40298:	dfc00815 	stw	ra,32(sp)
   4029c:	ddc00715 	stw	r23,28(sp)
   402a0:	dd800615 	stw	r22,24(sp)
   402a4:	dd400515 	stw	r21,20(sp)
   402a8:	dd000415 	stw	r20,16(sp)
   402ac:	dcc00315 	stw	r19,12(sp)
   402b0:	dc800215 	stw	r18,8(sp)
   402b4:	dc400115 	stw	r17,4(sp)
   402b8:	dc000015 	stw	r16,0(sp)
   402bc:	18c0a104 	addi	r3,r3,644
   402c0:	24000117 	ldw	r16,4(r4)
   402c4:	20c00f15 	stw	r3,60(r4)
   402c8:	2080bb04 	addi	r2,r4,748
   402cc:	00c000c4 	movi	r3,3
   402d0:	20c0b915 	stw	r3,740(r4)
   402d4:	2080ba15 	stw	r2,744(r4)
   402d8:	2000b815 	stw	zero,736(r4)
   402dc:	05c00204 	movi	r23,8
   402e0:	00800104 	movi	r2,4
   402e4:	2025883a 	mov	r18,r4
   402e8:	b80d883a 	mov	r6,r23
   402ec:	81001704 	addi	r4,r16,92
   402f0:	000b883a 	mov	r5,zero
   402f4:	80000015 	stw	zero,0(r16)
   402f8:	80000115 	stw	zero,4(r16)
   402fc:	80000215 	stw	zero,8(r16)
   40300:	8080030d 	sth	r2,12(r16)
   40304:	80001915 	stw	zero,100(r16)
   40308:	8000038d 	sth	zero,14(r16)
   4030c:	80000415 	stw	zero,16(r16)
   40310:	80000515 	stw	zero,20(r16)
   40314:	80000615 	stw	zero,24(r16)
   40318:	00417f40 	call	417f4 <memset>
   4031c:	05800134 	movhi	r22,4
   40320:	94400217 	ldw	r17,8(r18)
   40324:	05400134 	movhi	r21,4
   40328:	05000134 	movhi	r20,4
   4032c:	04c00134 	movhi	r19,4
   40330:	b587b504 	addi	r22,r22,7892
   40334:	ad47cc04 	addi	r21,r21,7984
   40338:	a507eb04 	addi	r20,r20,8108
   4033c:	9cc80204 	addi	r19,r19,8200
   40340:	85800815 	stw	r22,32(r16)
   40344:	85400915 	stw	r21,36(r16)
   40348:	85000a15 	stw	r20,40(r16)
   4034c:	84c00b15 	stw	r19,44(r16)
   40350:	84000715 	stw	r16,28(r16)
   40354:	00800284 	movi	r2,10
   40358:	8880030d 	sth	r2,12(r17)
   4035c:	00800044 	movi	r2,1
   40360:	b80d883a 	mov	r6,r23
   40364:	89001704 	addi	r4,r17,92
   40368:	000b883a 	mov	r5,zero
   4036c:	88000015 	stw	zero,0(r17)
   40370:	88000115 	stw	zero,4(r17)
   40374:	88000215 	stw	zero,8(r17)
   40378:	88001915 	stw	zero,100(r17)
   4037c:	8880038d 	sth	r2,14(r17)
   40380:	88000415 	stw	zero,16(r17)
   40384:	88000515 	stw	zero,20(r17)
   40388:	88000615 	stw	zero,24(r17)
   4038c:	00417f40 	call	417f4 <memset>
   40390:	94000317 	ldw	r16,12(r18)
   40394:	00800484 	movi	r2,18
   40398:	8c400715 	stw	r17,28(r17)
   4039c:	8d800815 	stw	r22,32(r17)
   403a0:	8d400915 	stw	r21,36(r17)
   403a4:	8d000a15 	stw	r20,40(r17)
   403a8:	8cc00b15 	stw	r19,44(r17)
   403ac:	8080030d 	sth	r2,12(r16)
   403b0:	00800084 	movi	r2,2
   403b4:	80000015 	stw	zero,0(r16)
   403b8:	80000115 	stw	zero,4(r16)
   403bc:	80000215 	stw	zero,8(r16)
   403c0:	80001915 	stw	zero,100(r16)
   403c4:	8080038d 	sth	r2,14(r16)
   403c8:	80000415 	stw	zero,16(r16)
   403cc:	80000515 	stw	zero,20(r16)
   403d0:	80000615 	stw	zero,24(r16)
   403d4:	b80d883a 	mov	r6,r23
   403d8:	000b883a 	mov	r5,zero
   403dc:	81001704 	addi	r4,r16,92
   403e0:	00417f40 	call	417f4 <memset>
   403e4:	00800044 	movi	r2,1
   403e8:	84000715 	stw	r16,28(r16)
   403ec:	85800815 	stw	r22,32(r16)
   403f0:	85400915 	stw	r21,36(r16)
   403f4:	85000a15 	stw	r20,40(r16)
   403f8:	84c00b15 	stw	r19,44(r16)
   403fc:	90800e15 	stw	r2,56(r18)
   40400:	dfc00817 	ldw	ra,32(sp)
   40404:	ddc00717 	ldw	r23,28(sp)
   40408:	dd800617 	ldw	r22,24(sp)
   4040c:	dd400517 	ldw	r21,20(sp)
   40410:	dd000417 	ldw	r20,16(sp)
   40414:	dcc00317 	ldw	r19,12(sp)
   40418:	dc800217 	ldw	r18,8(sp)
   4041c:	dc400117 	ldw	r17,4(sp)
   40420:	dc000017 	ldw	r16,0(sp)
   40424:	dec00904 	addi	sp,sp,36
   40428:	f800283a 	ret

0004042c <__fp_lock>:
   4042c:	0005883a 	mov	r2,zero
   40430:	f800283a 	ret

00040434 <__sfmoreglue>:
   40434:	defffc04 	addi	sp,sp,-16
   40438:	dc400115 	stw	r17,4(sp)
   4043c:	2c7fffc4 	addi	r17,r5,-1
   40440:	8c401a24 	muli	r17,r17,104
   40444:	dc800215 	stw	r18,8(sp)
   40448:	2825883a 	mov	r18,r5
   4044c:	89401d04 	addi	r5,r17,116
   40450:	dc000015 	stw	r16,0(sp)
   40454:	dfc00315 	stw	ra,12(sp)
   40458:	0040c600 	call	40c60 <_malloc_r>
   4045c:	1021883a 	mov	r16,r2
   40460:	10000726 	beq	r2,zero,40480 <__sfmoreglue+0x4c>
   40464:	11000304 	addi	r4,r2,12
   40468:	10000015 	stw	zero,0(r2)
   4046c:	14800115 	stw	r18,4(r2)
   40470:	11000215 	stw	r4,8(r2)
   40474:	89801a04 	addi	r6,r17,104
   40478:	000b883a 	mov	r5,zero
   4047c:	00417f40 	call	417f4 <memset>
   40480:	8005883a 	mov	r2,r16
   40484:	dfc00317 	ldw	ra,12(sp)
   40488:	dc800217 	ldw	r18,8(sp)
   4048c:	dc400117 	ldw	r17,4(sp)
   40490:	dc000017 	ldw	r16,0(sp)
   40494:	dec00404 	addi	sp,sp,16
   40498:	f800283a 	ret

0004049c <__sfp>:
   4049c:	defffb04 	addi	sp,sp,-20
   404a0:	dc000015 	stw	r16,0(sp)
   404a4:	04000134 	movhi	r16,4
   404a8:	8414c104 	addi	r16,r16,21252
   404ac:	dcc00315 	stw	r19,12(sp)
   404b0:	2027883a 	mov	r19,r4
   404b4:	81000017 	ldw	r4,0(r16)
   404b8:	dfc00415 	stw	ra,16(sp)
   404bc:	dc800215 	stw	r18,8(sp)
   404c0:	20800e17 	ldw	r2,56(r4)
   404c4:	dc400115 	stw	r17,4(sp)
   404c8:	1000021e 	bne	r2,zero,404d4 <__sfp+0x38>
   404cc:	00402900 	call	40290 <__sinit.part.1>
   404d0:	81000017 	ldw	r4,0(r16)
   404d4:	2480b804 	addi	r18,r4,736
   404d8:	047fffc4 	movi	r17,-1
   404dc:	91000117 	ldw	r4,4(r18)
   404e0:	94000217 	ldw	r16,8(r18)
   404e4:	213fffc4 	addi	r4,r4,-1
   404e8:	20000a16 	blt	r4,zero,40514 <__sfp+0x78>
   404ec:	8080030f 	ldh	r2,12(r16)
   404f0:	10000c26 	beq	r2,zero,40524 <__sfp+0x88>
   404f4:	80c01d04 	addi	r3,r16,116
   404f8:	00000206 	br	40504 <__sfp+0x68>
   404fc:	18bfe60f 	ldh	r2,-104(r3)
   40500:	10000826 	beq	r2,zero,40524 <__sfp+0x88>
   40504:	213fffc4 	addi	r4,r4,-1
   40508:	1c3ffd04 	addi	r16,r3,-12
   4050c:	18c01a04 	addi	r3,r3,104
   40510:	247ffa1e 	bne	r4,r17,404fc <__sfp+0x60>
   40514:	90800017 	ldw	r2,0(r18)
   40518:	10001d26 	beq	r2,zero,40590 <__sfp+0xf4>
   4051c:	1025883a 	mov	r18,r2
   40520:	003fee06 	br	404dc <__sfp+0x40>
   40524:	00bfffc4 	movi	r2,-1
   40528:	8080038d 	sth	r2,14(r16)
   4052c:	00800044 	movi	r2,1
   40530:	8080030d 	sth	r2,12(r16)
   40534:	80001915 	stw	zero,100(r16)
   40538:	80000015 	stw	zero,0(r16)
   4053c:	80000215 	stw	zero,8(r16)
   40540:	80000115 	stw	zero,4(r16)
   40544:	80000415 	stw	zero,16(r16)
   40548:	80000515 	stw	zero,20(r16)
   4054c:	80000615 	stw	zero,24(r16)
   40550:	01800204 	movi	r6,8
   40554:	000b883a 	mov	r5,zero
   40558:	81001704 	addi	r4,r16,92
   4055c:	00417f40 	call	417f4 <memset>
   40560:	8005883a 	mov	r2,r16
   40564:	80000c15 	stw	zero,48(r16)
   40568:	80000d15 	stw	zero,52(r16)
   4056c:	80001115 	stw	zero,68(r16)
   40570:	80001215 	stw	zero,72(r16)
   40574:	dfc00417 	ldw	ra,16(sp)
   40578:	dcc00317 	ldw	r19,12(sp)
   4057c:	dc800217 	ldw	r18,8(sp)
   40580:	dc400117 	ldw	r17,4(sp)
   40584:	dc000017 	ldw	r16,0(sp)
   40588:	dec00504 	addi	sp,sp,20
   4058c:	f800283a 	ret
   40590:	01400104 	movi	r5,4
   40594:	9809883a 	mov	r4,r19
   40598:	00404340 	call	40434 <__sfmoreglue>
   4059c:	90800015 	stw	r2,0(r18)
   405a0:	103fde1e 	bne	r2,zero,4051c <__sfp+0x80>
   405a4:	00800304 	movi	r2,12
   405a8:	98800015 	stw	r2,0(r19)
   405ac:	0005883a 	mov	r2,zero
   405b0:	003ff006 	br	40574 <__sfp+0xd8>

000405b4 <_cleanup>:
   405b4:	00800134 	movhi	r2,4
   405b8:	1094c104 	addi	r2,r2,21252
   405bc:	11000017 	ldw	r4,0(r2)
   405c0:	01400134 	movhi	r5,4
   405c4:	29488604 	addi	r5,r5,8728
   405c8:	0040b9c1 	jmpi	40b9c <_fwalk_reent>

000405cc <__sinit>:
   405cc:	20800e17 	ldw	r2,56(r4)
   405d0:	10000126 	beq	r2,zero,405d8 <__sinit+0xc>
   405d4:	f800283a 	ret
   405d8:	00402901 	jmpi	40290 <__sinit.part.1>

000405dc <__sfp_lock_acquire>:
   405dc:	f800283a 	ret

000405e0 <__sfp_lock_release>:
   405e0:	f800283a 	ret

000405e4 <__sinit_lock_acquire>:
   405e4:	f800283a 	ret

000405e8 <__sinit_lock_release>:
   405e8:	f800283a 	ret

000405ec <__fp_lock_all>:
   405ec:	00800134 	movhi	r2,4
   405f0:	1094c204 	addi	r2,r2,21256
   405f4:	11000017 	ldw	r4,0(r2)
   405f8:	01400134 	movhi	r5,4
   405fc:	29410b04 	addi	r5,r5,1068
   40600:	0040ad81 	jmpi	40ad8 <_fwalk>

00040604 <__fp_unlock_all>:
   40604:	00800134 	movhi	r2,4
   40608:	1094c204 	addi	r2,r2,21256
   4060c:	11000017 	ldw	r4,0(r2)
   40610:	01400134 	movhi	r5,4
   40614:	29409f04 	addi	r5,r5,636
   40618:	0040ad81 	jmpi	40ad8 <_fwalk>

0004061c <__sfvwrite_r>:
   4061c:	30800217 	ldw	r2,8(r6)
   40620:	10006726 	beq	r2,zero,407c0 <__sfvwrite_r+0x1a4>
   40624:	28c0030b 	ldhu	r3,12(r5)
   40628:	defff404 	addi	sp,sp,-48
   4062c:	dd400715 	stw	r21,28(sp)
   40630:	dd000615 	stw	r20,24(sp)
   40634:	dc000215 	stw	r16,8(sp)
   40638:	dfc00b15 	stw	ra,44(sp)
   4063c:	df000a15 	stw	fp,40(sp)
   40640:	ddc00915 	stw	r23,36(sp)
   40644:	dd800815 	stw	r22,32(sp)
   40648:	dcc00515 	stw	r19,20(sp)
   4064c:	dc800415 	stw	r18,16(sp)
   40650:	dc400315 	stw	r17,12(sp)
   40654:	1880020c 	andi	r2,r3,8
   40658:	2821883a 	mov	r16,r5
   4065c:	202b883a 	mov	r21,r4
   40660:	3029883a 	mov	r20,r6
   40664:	10002726 	beq	r2,zero,40704 <__sfvwrite_r+0xe8>
   40668:	28800417 	ldw	r2,16(r5)
   4066c:	10002526 	beq	r2,zero,40704 <__sfvwrite_r+0xe8>
   40670:	1880008c 	andi	r2,r3,2
   40674:	a4400017 	ldw	r17,0(r20)
   40678:	10002a26 	beq	r2,zero,40724 <__sfvwrite_r+0x108>
   4067c:	05a00034 	movhi	r22,32768
   40680:	0027883a 	mov	r19,zero
   40684:	0025883a 	mov	r18,zero
   40688:	b5bf0004 	addi	r22,r22,-1024
   4068c:	980d883a 	mov	r6,r19
   40690:	a809883a 	mov	r4,r21
   40694:	90004626 	beq	r18,zero,407b0 <__sfvwrite_r+0x194>
   40698:	900f883a 	mov	r7,r18
   4069c:	b480022e 	bgeu	r22,r18,406a8 <__sfvwrite_r+0x8c>
   406a0:	01e00034 	movhi	r7,32768
   406a4:	39ff0004 	addi	r7,r7,-1024
   406a8:	80800917 	ldw	r2,36(r16)
   406ac:	81400717 	ldw	r5,28(r16)
   406b0:	103ee83a 	callr	r2
   406b4:	0080570e 	bge	zero,r2,40814 <__sfvwrite_r+0x1f8>
   406b8:	a0c00217 	ldw	r3,8(r20)
   406bc:	98a7883a 	add	r19,r19,r2
   406c0:	90a5c83a 	sub	r18,r18,r2
   406c4:	1885c83a 	sub	r2,r3,r2
   406c8:	a0800215 	stw	r2,8(r20)
   406cc:	103fef1e 	bne	r2,zero,4068c <__sfvwrite_r+0x70>
   406d0:	0005883a 	mov	r2,zero
   406d4:	dfc00b17 	ldw	ra,44(sp)
   406d8:	df000a17 	ldw	fp,40(sp)
   406dc:	ddc00917 	ldw	r23,36(sp)
   406e0:	dd800817 	ldw	r22,32(sp)
   406e4:	dd400717 	ldw	r21,28(sp)
   406e8:	dd000617 	ldw	r20,24(sp)
   406ec:	dcc00517 	ldw	r19,20(sp)
   406f0:	dc800417 	ldw	r18,16(sp)
   406f4:	dc400317 	ldw	r17,12(sp)
   406f8:	dc000217 	ldw	r16,8(sp)
   406fc:	dec00c04 	addi	sp,sp,48
   40700:	f800283a 	ret
   40704:	800b883a 	mov	r5,r16
   40708:	a809883a 	mov	r4,r21
   4070c:	00420700 	call	42070 <__swsetup_r>
   40710:	1000eb1e 	bne	r2,zero,40ac0 <__sfvwrite_r+0x4a4>
   40714:	80c0030b 	ldhu	r3,12(r16)
   40718:	a4400017 	ldw	r17,0(r20)
   4071c:	1880008c 	andi	r2,r3,2
   40720:	103fd61e 	bne	r2,zero,4067c <__sfvwrite_r+0x60>
   40724:	1880004c 	andi	r2,r3,1
   40728:	10003f1e 	bne	r2,zero,40828 <__sfvwrite_r+0x20c>
   4072c:	0039883a 	mov	fp,zero
   40730:	0025883a 	mov	r18,zero
   40734:	90001a26 	beq	r18,zero,407a0 <__sfvwrite_r+0x184>
   40738:	1880800c 	andi	r2,r3,512
   4073c:	84c00217 	ldw	r19,8(r16)
   40740:	10002126 	beq	r2,zero,407c8 <__sfvwrite_r+0x1ac>
   40744:	982f883a 	mov	r23,r19
   40748:	94c09336 	bltu	r18,r19,40998 <__sfvwrite_r+0x37c>
   4074c:	1881200c 	andi	r2,r3,1152
   40750:	10009e1e 	bne	r2,zero,409cc <__sfvwrite_r+0x3b0>
   40754:	81000017 	ldw	r4,0(r16)
   40758:	b80d883a 	mov	r6,r23
   4075c:	e00b883a 	mov	r5,fp
   40760:	00416980 	call	41698 <memmove>
   40764:	80c00217 	ldw	r3,8(r16)
   40768:	81000017 	ldw	r4,0(r16)
   4076c:	9005883a 	mov	r2,r18
   40770:	1ce7c83a 	sub	r19,r3,r19
   40774:	25cf883a 	add	r7,r4,r23
   40778:	84c00215 	stw	r19,8(r16)
   4077c:	81c00015 	stw	r7,0(r16)
   40780:	a0c00217 	ldw	r3,8(r20)
   40784:	e0b9883a 	add	fp,fp,r2
   40788:	90a5c83a 	sub	r18,r18,r2
   4078c:	18a7c83a 	sub	r19,r3,r2
   40790:	a4c00215 	stw	r19,8(r20)
   40794:	983fce26 	beq	r19,zero,406d0 <__sfvwrite_r+0xb4>
   40798:	80c0030b 	ldhu	r3,12(r16)
   4079c:	903fe61e 	bne	r18,zero,40738 <__sfvwrite_r+0x11c>
   407a0:	8f000017 	ldw	fp,0(r17)
   407a4:	8c800117 	ldw	r18,4(r17)
   407a8:	8c400204 	addi	r17,r17,8
   407ac:	003fe106 	br	40734 <__sfvwrite_r+0x118>
   407b0:	8cc00017 	ldw	r19,0(r17)
   407b4:	8c800117 	ldw	r18,4(r17)
   407b8:	8c400204 	addi	r17,r17,8
   407bc:	003fb306 	br	4068c <__sfvwrite_r+0x70>
   407c0:	0005883a 	mov	r2,zero
   407c4:	f800283a 	ret
   407c8:	81000017 	ldw	r4,0(r16)
   407cc:	80800417 	ldw	r2,16(r16)
   407d0:	11005736 	bltu	r2,r4,40930 <__sfvwrite_r+0x314>
   407d4:	85c00517 	ldw	r23,20(r16)
   407d8:	95c05536 	bltu	r18,r23,40930 <__sfvwrite_r+0x314>
   407dc:	00a00034 	movhi	r2,32768
   407e0:	10bfffc4 	addi	r2,r2,-1
   407e4:	9009883a 	mov	r4,r18
   407e8:	1480012e 	bgeu	r2,r18,407f0 <__sfvwrite_r+0x1d4>
   407ec:	1009883a 	mov	r4,r2
   407f0:	b80b883a 	mov	r5,r23
   407f4:	0042d240 	call	42d24 <__divsi3>
   407f8:	15cf383a 	mul	r7,r2,r23
   407fc:	81400717 	ldw	r5,28(r16)
   40800:	80800917 	ldw	r2,36(r16)
   40804:	e00d883a 	mov	r6,fp
   40808:	a809883a 	mov	r4,r21
   4080c:	103ee83a 	callr	r2
   40810:	00bfdb16 	blt	zero,r2,40780 <__sfvwrite_r+0x164>
   40814:	8080030b 	ldhu	r2,12(r16)
   40818:	10801014 	ori	r2,r2,64
   4081c:	8080030d 	sth	r2,12(r16)
   40820:	00bfffc4 	movi	r2,-1
   40824:	003fab06 	br	406d4 <__sfvwrite_r+0xb8>
   40828:	0027883a 	mov	r19,zero
   4082c:	0011883a 	mov	r8,zero
   40830:	0039883a 	mov	fp,zero
   40834:	0025883a 	mov	r18,zero
   40838:	90001f26 	beq	r18,zero,408b8 <__sfvwrite_r+0x29c>
   4083c:	40005a26 	beq	r8,zero,409a8 <__sfvwrite_r+0x38c>
   40840:	982d883a 	mov	r22,r19
   40844:	94c0012e 	bgeu	r18,r19,4084c <__sfvwrite_r+0x230>
   40848:	902d883a 	mov	r22,r18
   4084c:	81000017 	ldw	r4,0(r16)
   40850:	80800417 	ldw	r2,16(r16)
   40854:	b02f883a 	mov	r23,r22
   40858:	81c00517 	ldw	r7,20(r16)
   4085c:	1100032e 	bgeu	r2,r4,4086c <__sfvwrite_r+0x250>
   40860:	80c00217 	ldw	r3,8(r16)
   40864:	38c7883a 	add	r3,r7,r3
   40868:	1d801816 	blt	r3,r22,408cc <__sfvwrite_r+0x2b0>
   4086c:	b1c03e16 	blt	r22,r7,40968 <__sfvwrite_r+0x34c>
   40870:	80800917 	ldw	r2,36(r16)
   40874:	81400717 	ldw	r5,28(r16)
   40878:	e00d883a 	mov	r6,fp
   4087c:	da000115 	stw	r8,4(sp)
   40880:	a809883a 	mov	r4,r21
   40884:	103ee83a 	callr	r2
   40888:	102f883a 	mov	r23,r2
   4088c:	da000117 	ldw	r8,4(sp)
   40890:	00bfe00e 	bge	zero,r2,40814 <__sfvwrite_r+0x1f8>
   40894:	9de7c83a 	sub	r19,r19,r23
   40898:	98001f26 	beq	r19,zero,40918 <__sfvwrite_r+0x2fc>
   4089c:	a0800217 	ldw	r2,8(r20)
   408a0:	e5f9883a 	add	fp,fp,r23
   408a4:	95e5c83a 	sub	r18,r18,r23
   408a8:	15efc83a 	sub	r23,r2,r23
   408ac:	a5c00215 	stw	r23,8(r20)
   408b0:	b83f8726 	beq	r23,zero,406d0 <__sfvwrite_r+0xb4>
   408b4:	903fe11e 	bne	r18,zero,4083c <__sfvwrite_r+0x220>
   408b8:	8f000017 	ldw	fp,0(r17)
   408bc:	8c800117 	ldw	r18,4(r17)
   408c0:	0011883a 	mov	r8,zero
   408c4:	8c400204 	addi	r17,r17,8
   408c8:	003fdb06 	br	40838 <__sfvwrite_r+0x21c>
   408cc:	180d883a 	mov	r6,r3
   408d0:	e00b883a 	mov	r5,fp
   408d4:	da000115 	stw	r8,4(sp)
   408d8:	d8c00015 	stw	r3,0(sp)
   408dc:	00416980 	call	41698 <memmove>
   408e0:	d8c00017 	ldw	r3,0(sp)
   408e4:	80800017 	ldw	r2,0(r16)
   408e8:	800b883a 	mov	r5,r16
   408ec:	a809883a 	mov	r4,r21
   408f0:	10c5883a 	add	r2,r2,r3
   408f4:	80800015 	stw	r2,0(r16)
   408f8:	d8c00015 	stw	r3,0(sp)
   408fc:	00425380 	call	42538 <_fflush_r>
   40900:	d8c00017 	ldw	r3,0(sp)
   40904:	da000117 	ldw	r8,4(sp)
   40908:	103fc21e 	bne	r2,zero,40814 <__sfvwrite_r+0x1f8>
   4090c:	182f883a 	mov	r23,r3
   40910:	9de7c83a 	sub	r19,r19,r23
   40914:	983fe11e 	bne	r19,zero,4089c <__sfvwrite_r+0x280>
   40918:	800b883a 	mov	r5,r16
   4091c:	a809883a 	mov	r4,r21
   40920:	00425380 	call	42538 <_fflush_r>
   40924:	103fbb1e 	bne	r2,zero,40814 <__sfvwrite_r+0x1f8>
   40928:	0011883a 	mov	r8,zero
   4092c:	003fdb06 	br	4089c <__sfvwrite_r+0x280>
   40930:	94c0012e 	bgeu	r18,r19,40938 <__sfvwrite_r+0x31c>
   40934:	9027883a 	mov	r19,r18
   40938:	980d883a 	mov	r6,r19
   4093c:	e00b883a 	mov	r5,fp
   40940:	00416980 	call	41698 <memmove>
   40944:	80800217 	ldw	r2,8(r16)
   40948:	80c00017 	ldw	r3,0(r16)
   4094c:	14c5c83a 	sub	r2,r2,r19
   40950:	1cc7883a 	add	r3,r3,r19
   40954:	80800215 	stw	r2,8(r16)
   40958:	80c00015 	stw	r3,0(r16)
   4095c:	10004326 	beq	r2,zero,40a6c <__sfvwrite_r+0x450>
   40960:	9805883a 	mov	r2,r19
   40964:	003f8606 	br	40780 <__sfvwrite_r+0x164>
   40968:	b00d883a 	mov	r6,r22
   4096c:	e00b883a 	mov	r5,fp
   40970:	da000115 	stw	r8,4(sp)
   40974:	00416980 	call	41698 <memmove>
   40978:	80800217 	ldw	r2,8(r16)
   4097c:	80c00017 	ldw	r3,0(r16)
   40980:	da000117 	ldw	r8,4(sp)
   40984:	1585c83a 	sub	r2,r2,r22
   40988:	1dad883a 	add	r22,r3,r22
   4098c:	80800215 	stw	r2,8(r16)
   40990:	85800015 	stw	r22,0(r16)
   40994:	003fbf06 	br	40894 <__sfvwrite_r+0x278>
   40998:	81000017 	ldw	r4,0(r16)
   4099c:	9027883a 	mov	r19,r18
   409a0:	902f883a 	mov	r23,r18
   409a4:	003f6c06 	br	40758 <__sfvwrite_r+0x13c>
   409a8:	900d883a 	mov	r6,r18
   409ac:	01400284 	movi	r5,10
   409b0:	e009883a 	mov	r4,fp
   409b4:	004146c0 	call	4146c <memchr>
   409b8:	10003e26 	beq	r2,zero,40ab4 <__sfvwrite_r+0x498>
   409bc:	10800044 	addi	r2,r2,1
   409c0:	1727c83a 	sub	r19,r2,fp
   409c4:	02000044 	movi	r8,1
   409c8:	003f9d06 	br	40840 <__sfvwrite_r+0x224>
   409cc:	80800517 	ldw	r2,20(r16)
   409d0:	81400417 	ldw	r5,16(r16)
   409d4:	81c00017 	ldw	r7,0(r16)
   409d8:	10a7883a 	add	r19,r2,r2
   409dc:	9885883a 	add	r2,r19,r2
   409e0:	1026d7fa 	srli	r19,r2,31
   409e4:	396dc83a 	sub	r22,r7,r5
   409e8:	b1000044 	addi	r4,r22,1
   409ec:	9885883a 	add	r2,r19,r2
   409f0:	1027d07a 	srai	r19,r2,1
   409f4:	2485883a 	add	r2,r4,r18
   409f8:	980d883a 	mov	r6,r19
   409fc:	9880022e 	bgeu	r19,r2,40a08 <__sfvwrite_r+0x3ec>
   40a00:	1027883a 	mov	r19,r2
   40a04:	100d883a 	mov	r6,r2
   40a08:	18c1000c 	andi	r3,r3,1024
   40a0c:	18001c26 	beq	r3,zero,40a80 <__sfvwrite_r+0x464>
   40a10:	300b883a 	mov	r5,r6
   40a14:	a809883a 	mov	r4,r21
   40a18:	0040c600 	call	40c60 <_malloc_r>
   40a1c:	102f883a 	mov	r23,r2
   40a20:	10002926 	beq	r2,zero,40ac8 <__sfvwrite_r+0x4ac>
   40a24:	81400417 	ldw	r5,16(r16)
   40a28:	b00d883a 	mov	r6,r22
   40a2c:	1009883a 	mov	r4,r2
   40a30:	00415500 	call	41550 <memcpy>
   40a34:	8080030b 	ldhu	r2,12(r16)
   40a38:	00fedfc4 	movi	r3,-1153
   40a3c:	10c4703a 	and	r2,r2,r3
   40a40:	10802014 	ori	r2,r2,128
   40a44:	8080030d 	sth	r2,12(r16)
   40a48:	bd89883a 	add	r4,r23,r22
   40a4c:	9d8fc83a 	sub	r7,r19,r22
   40a50:	85c00415 	stw	r23,16(r16)
   40a54:	84c00515 	stw	r19,20(r16)
   40a58:	81000015 	stw	r4,0(r16)
   40a5c:	9027883a 	mov	r19,r18
   40a60:	81c00215 	stw	r7,8(r16)
   40a64:	902f883a 	mov	r23,r18
   40a68:	003f3b06 	br	40758 <__sfvwrite_r+0x13c>
   40a6c:	800b883a 	mov	r5,r16
   40a70:	a809883a 	mov	r4,r21
   40a74:	00425380 	call	42538 <_fflush_r>
   40a78:	103fb926 	beq	r2,zero,40960 <__sfvwrite_r+0x344>
   40a7c:	003f6506 	br	40814 <__sfvwrite_r+0x1f8>
   40a80:	a809883a 	mov	r4,r21
   40a84:	004191c0 	call	4191c <_realloc_r>
   40a88:	102f883a 	mov	r23,r2
   40a8c:	103fee1e 	bne	r2,zero,40a48 <__sfvwrite_r+0x42c>
   40a90:	81400417 	ldw	r5,16(r16)
   40a94:	a809883a 	mov	r4,r21
   40a98:	00426e80 	call	426e8 <_free_r>
   40a9c:	8080030b 	ldhu	r2,12(r16)
   40aa0:	00ffdfc4 	movi	r3,-129
   40aa4:	1884703a 	and	r2,r3,r2
   40aa8:	00c00304 	movi	r3,12
   40aac:	a8c00015 	stw	r3,0(r21)
   40ab0:	003f5906 	br	40818 <__sfvwrite_r+0x1fc>
   40ab4:	94c00044 	addi	r19,r18,1
   40ab8:	02000044 	movi	r8,1
   40abc:	003f6006 	br	40840 <__sfvwrite_r+0x224>
   40ac0:	00bfffc4 	movi	r2,-1
   40ac4:	003f0306 	br	406d4 <__sfvwrite_r+0xb8>
   40ac8:	00800304 	movi	r2,12
   40acc:	a8800015 	stw	r2,0(r21)
   40ad0:	8080030b 	ldhu	r2,12(r16)
   40ad4:	003f5006 	br	40818 <__sfvwrite_r+0x1fc>

00040ad8 <_fwalk>:
   40ad8:	defff704 	addi	sp,sp,-36
   40adc:	dd000415 	stw	r20,16(sp)
   40ae0:	dfc00815 	stw	ra,32(sp)
   40ae4:	ddc00715 	stw	r23,28(sp)
   40ae8:	dd800615 	stw	r22,24(sp)
   40aec:	dd400515 	stw	r21,20(sp)
   40af0:	dcc00315 	stw	r19,12(sp)
   40af4:	dc800215 	stw	r18,8(sp)
   40af8:	dc400115 	stw	r17,4(sp)
   40afc:	dc000015 	stw	r16,0(sp)
   40b00:	2500b804 	addi	r20,r4,736
   40b04:	a0002326 	beq	r20,zero,40b94 <_fwalk+0xbc>
   40b08:	282b883a 	mov	r21,r5
   40b0c:	002f883a 	mov	r23,zero
   40b10:	05800044 	movi	r22,1
   40b14:	04ffffc4 	movi	r19,-1
   40b18:	a4400117 	ldw	r17,4(r20)
   40b1c:	a4800217 	ldw	r18,8(r20)
   40b20:	8c7fffc4 	addi	r17,r17,-1
   40b24:	88000d16 	blt	r17,zero,40b5c <_fwalk+0x84>
   40b28:	94000304 	addi	r16,r18,12
   40b2c:	94800384 	addi	r18,r18,14
   40b30:	8080000b 	ldhu	r2,0(r16)
   40b34:	8c7fffc4 	addi	r17,r17,-1
   40b38:	813ffd04 	addi	r4,r16,-12
   40b3c:	b080042e 	bgeu	r22,r2,40b50 <_fwalk+0x78>
   40b40:	9080000f 	ldh	r2,0(r18)
   40b44:	14c00226 	beq	r2,r19,40b50 <_fwalk+0x78>
   40b48:	a83ee83a 	callr	r21
   40b4c:	b8aeb03a 	or	r23,r23,r2
   40b50:	84001a04 	addi	r16,r16,104
   40b54:	94801a04 	addi	r18,r18,104
   40b58:	8cfff51e 	bne	r17,r19,40b30 <_fwalk+0x58>
   40b5c:	a5000017 	ldw	r20,0(r20)
   40b60:	a03fed1e 	bne	r20,zero,40b18 <_fwalk+0x40>
   40b64:	b805883a 	mov	r2,r23
   40b68:	dfc00817 	ldw	ra,32(sp)
   40b6c:	ddc00717 	ldw	r23,28(sp)
   40b70:	dd800617 	ldw	r22,24(sp)
   40b74:	dd400517 	ldw	r21,20(sp)
   40b78:	dd000417 	ldw	r20,16(sp)
   40b7c:	dcc00317 	ldw	r19,12(sp)
   40b80:	dc800217 	ldw	r18,8(sp)
   40b84:	dc400117 	ldw	r17,4(sp)
   40b88:	dc000017 	ldw	r16,0(sp)
   40b8c:	dec00904 	addi	sp,sp,36
   40b90:	f800283a 	ret
   40b94:	002f883a 	mov	r23,zero
   40b98:	003ff206 	br	40b64 <_fwalk+0x8c>

00040b9c <_fwalk_reent>:
   40b9c:	defff704 	addi	sp,sp,-36
   40ba0:	dd000415 	stw	r20,16(sp)
   40ba4:	dfc00815 	stw	ra,32(sp)
   40ba8:	ddc00715 	stw	r23,28(sp)
   40bac:	dd800615 	stw	r22,24(sp)
   40bb0:	dd400515 	stw	r21,20(sp)
   40bb4:	dcc00315 	stw	r19,12(sp)
   40bb8:	dc800215 	stw	r18,8(sp)
   40bbc:	dc400115 	stw	r17,4(sp)
   40bc0:	dc000015 	stw	r16,0(sp)
   40bc4:	2500b804 	addi	r20,r4,736
   40bc8:	a0002326 	beq	r20,zero,40c58 <_fwalk_reent+0xbc>
   40bcc:	282b883a 	mov	r21,r5
   40bd0:	2027883a 	mov	r19,r4
   40bd4:	002f883a 	mov	r23,zero
   40bd8:	05800044 	movi	r22,1
   40bdc:	04bfffc4 	movi	r18,-1
   40be0:	a4400117 	ldw	r17,4(r20)
   40be4:	a4000217 	ldw	r16,8(r20)
   40be8:	8c7fffc4 	addi	r17,r17,-1
   40bec:	88000c16 	blt	r17,zero,40c20 <_fwalk_reent+0x84>
   40bf0:	84000304 	addi	r16,r16,12
   40bf4:	8080000b 	ldhu	r2,0(r16)
   40bf8:	8c7fffc4 	addi	r17,r17,-1
   40bfc:	817ffd04 	addi	r5,r16,-12
   40c00:	b080052e 	bgeu	r22,r2,40c18 <_fwalk_reent+0x7c>
   40c04:	8080008f 	ldh	r2,2(r16)
   40c08:	9809883a 	mov	r4,r19
   40c0c:	14800226 	beq	r2,r18,40c18 <_fwalk_reent+0x7c>
   40c10:	a83ee83a 	callr	r21
   40c14:	b8aeb03a 	or	r23,r23,r2
   40c18:	84001a04 	addi	r16,r16,104
   40c1c:	8cbff51e 	bne	r17,r18,40bf4 <_fwalk_reent+0x58>
   40c20:	a5000017 	ldw	r20,0(r20)
   40c24:	a03fee1e 	bne	r20,zero,40be0 <_fwalk_reent+0x44>
   40c28:	b805883a 	mov	r2,r23
   40c2c:	dfc00817 	ldw	ra,32(sp)
   40c30:	ddc00717 	ldw	r23,28(sp)
   40c34:	dd800617 	ldw	r22,24(sp)
   40c38:	dd400517 	ldw	r21,20(sp)
   40c3c:	dd000417 	ldw	r20,16(sp)
   40c40:	dcc00317 	ldw	r19,12(sp)
   40c44:	dc800217 	ldw	r18,8(sp)
   40c48:	dc400117 	ldw	r17,4(sp)
   40c4c:	dc000017 	ldw	r16,0(sp)
   40c50:	dec00904 	addi	sp,sp,36
   40c54:	f800283a 	ret
   40c58:	002f883a 	mov	r23,zero
   40c5c:	003ff206 	br	40c28 <_fwalk_reent+0x8c>

00040c60 <_malloc_r>:
   40c60:	defff504 	addi	sp,sp,-44
   40c64:	dc800315 	stw	r18,12(sp)
   40c68:	dfc00a15 	stw	ra,40(sp)
   40c6c:	df000915 	stw	fp,36(sp)
   40c70:	ddc00815 	stw	r23,32(sp)
   40c74:	dd800715 	stw	r22,28(sp)
   40c78:	dd400615 	stw	r21,24(sp)
   40c7c:	dd000515 	stw	r20,20(sp)
   40c80:	dcc00415 	stw	r19,16(sp)
   40c84:	dc400215 	stw	r17,8(sp)
   40c88:	dc000115 	stw	r16,4(sp)
   40c8c:	288002c4 	addi	r2,r5,11
   40c90:	00c00584 	movi	r3,22
   40c94:	2025883a 	mov	r18,r4
   40c98:	18807f2e 	bgeu	r3,r2,40e98 <_malloc_r+0x238>
   40c9c:	047ffe04 	movi	r17,-8
   40ca0:	1462703a 	and	r17,r2,r17
   40ca4:	8800a316 	blt	r17,zero,40f34 <_malloc_r+0x2d4>
   40ca8:	8940a236 	bltu	r17,r5,40f34 <_malloc_r+0x2d4>
   40cac:	00434540 	call	43454 <__malloc_lock>
   40cb0:	00807dc4 	movi	r2,503
   40cb4:	1441e92e 	bgeu	r2,r17,4145c <_malloc_r+0x7fc>
   40cb8:	8804d27a 	srli	r2,r17,9
   40cbc:	1000a126 	beq	r2,zero,40f44 <_malloc_r+0x2e4>
   40cc0:	00c00104 	movi	r3,4
   40cc4:	18811e36 	bltu	r3,r2,41140 <_malloc_r+0x4e0>
   40cc8:	8804d1ba 	srli	r2,r17,6
   40ccc:	12000e44 	addi	r8,r2,57
   40cd0:	11c00e04 	addi	r7,r2,56
   40cd4:	4209883a 	add	r4,r8,r8
   40cd8:	04c00134 	movhi	r19,4
   40cdc:	2109883a 	add	r4,r4,r4
   40ce0:	9cd34a04 	addi	r19,r19,19752
   40ce4:	2109883a 	add	r4,r4,r4
   40ce8:	9909883a 	add	r4,r19,r4
   40cec:	24000117 	ldw	r16,4(r4)
   40cf0:	213ffe04 	addi	r4,r4,-8
   40cf4:	24009726 	beq	r4,r16,40f54 <_malloc_r+0x2f4>
   40cf8:	80800117 	ldw	r2,4(r16)
   40cfc:	01bfff04 	movi	r6,-4
   40d00:	014003c4 	movi	r5,15
   40d04:	1184703a 	and	r2,r2,r6
   40d08:	1447c83a 	sub	r3,r2,r17
   40d0c:	28c00716 	blt	r5,r3,40d2c <_malloc_r+0xcc>
   40d10:	1800920e 	bge	r3,zero,40f5c <_malloc_r+0x2fc>
   40d14:	84000317 	ldw	r16,12(r16)
   40d18:	24008e26 	beq	r4,r16,40f54 <_malloc_r+0x2f4>
   40d1c:	80800117 	ldw	r2,4(r16)
   40d20:	1184703a 	and	r2,r2,r6
   40d24:	1447c83a 	sub	r3,r2,r17
   40d28:	28fff90e 	bge	r5,r3,40d10 <_malloc_r+0xb0>
   40d2c:	3809883a 	mov	r4,r7
   40d30:	01800134 	movhi	r6,4
   40d34:	9c000417 	ldw	r16,16(r19)
   40d38:	31934a04 	addi	r6,r6,19752
   40d3c:	32000204 	addi	r8,r6,8
   40d40:	82013426 	beq	r16,r8,41214 <_malloc_r+0x5b4>
   40d44:	80c00117 	ldw	r3,4(r16)
   40d48:	00bfff04 	movi	r2,-4
   40d4c:	188e703a 	and	r7,r3,r2
   40d50:	3c45c83a 	sub	r2,r7,r17
   40d54:	00c003c4 	movi	r3,15
   40d58:	18811f16 	blt	r3,r2,411d8 <_malloc_r+0x578>
   40d5c:	32000515 	stw	r8,20(r6)
   40d60:	32000415 	stw	r8,16(r6)
   40d64:	10007f0e 	bge	r2,zero,40f64 <_malloc_r+0x304>
   40d68:	00807fc4 	movi	r2,511
   40d6c:	11c0fd36 	bltu	r2,r7,41164 <_malloc_r+0x504>
   40d70:	3806d0fa 	srli	r3,r7,3
   40d74:	01c00044 	movi	r7,1
   40d78:	30800117 	ldw	r2,4(r6)
   40d7c:	19400044 	addi	r5,r3,1
   40d80:	294b883a 	add	r5,r5,r5
   40d84:	1807d0ba 	srai	r3,r3,2
   40d88:	294b883a 	add	r5,r5,r5
   40d8c:	294b883a 	add	r5,r5,r5
   40d90:	298b883a 	add	r5,r5,r6
   40d94:	38c6983a 	sll	r3,r7,r3
   40d98:	29c00017 	ldw	r7,0(r5)
   40d9c:	2a7ffe04 	addi	r9,r5,-8
   40da0:	1886b03a 	or	r3,r3,r2
   40da4:	82400315 	stw	r9,12(r16)
   40da8:	81c00215 	stw	r7,8(r16)
   40dac:	30c00115 	stw	r3,4(r6)
   40db0:	2c000015 	stw	r16,0(r5)
   40db4:	3c000315 	stw	r16,12(r7)
   40db8:	2005d0ba 	srai	r2,r4,2
   40dbc:	01400044 	movi	r5,1
   40dc0:	288a983a 	sll	r5,r5,r2
   40dc4:	19406f36 	bltu	r3,r5,40f84 <_malloc_r+0x324>
   40dc8:	28c4703a 	and	r2,r5,r3
   40dcc:	10000a1e 	bne	r2,zero,40df8 <_malloc_r+0x198>
   40dd0:	00bfff04 	movi	r2,-4
   40dd4:	294b883a 	add	r5,r5,r5
   40dd8:	2088703a 	and	r4,r4,r2
   40ddc:	28c4703a 	and	r2,r5,r3
   40de0:	21000104 	addi	r4,r4,4
   40de4:	1000041e 	bne	r2,zero,40df8 <_malloc_r+0x198>
   40de8:	294b883a 	add	r5,r5,r5
   40dec:	28c4703a 	and	r2,r5,r3
   40df0:	21000104 	addi	r4,r4,4
   40df4:	103ffc26 	beq	r2,zero,40de8 <_malloc_r+0x188>
   40df8:	02bfff04 	movi	r10,-4
   40dfc:	024003c4 	movi	r9,15
   40e00:	21800044 	addi	r6,r4,1
   40e04:	318d883a 	add	r6,r6,r6
   40e08:	318d883a 	add	r6,r6,r6
   40e0c:	318d883a 	add	r6,r6,r6
   40e10:	998d883a 	add	r6,r19,r6
   40e14:	333ffe04 	addi	r12,r6,-8
   40e18:	2017883a 	mov	r11,r4
   40e1c:	31800104 	addi	r6,r6,4
   40e20:	34000017 	ldw	r16,0(r6)
   40e24:	31fffd04 	addi	r7,r6,-12
   40e28:	81c0041e 	bne	r16,r7,40e3c <_malloc_r+0x1dc>
   40e2c:	0000fb06 	br	4121c <_malloc_r+0x5bc>
   40e30:	1801030e 	bge	r3,zero,41240 <_malloc_r+0x5e0>
   40e34:	84000317 	ldw	r16,12(r16)
   40e38:	81c0f826 	beq	r16,r7,4121c <_malloc_r+0x5bc>
   40e3c:	80800117 	ldw	r2,4(r16)
   40e40:	1284703a 	and	r2,r2,r10
   40e44:	1447c83a 	sub	r3,r2,r17
   40e48:	48fff90e 	bge	r9,r3,40e30 <_malloc_r+0x1d0>
   40e4c:	80800317 	ldw	r2,12(r16)
   40e50:	81000217 	ldw	r4,8(r16)
   40e54:	89400054 	ori	r5,r17,1
   40e58:	81400115 	stw	r5,4(r16)
   40e5c:	20800315 	stw	r2,12(r4)
   40e60:	11000215 	stw	r4,8(r2)
   40e64:	8463883a 	add	r17,r16,r17
   40e68:	9c400515 	stw	r17,20(r19)
   40e6c:	9c400415 	stw	r17,16(r19)
   40e70:	18800054 	ori	r2,r3,1
   40e74:	88800115 	stw	r2,4(r17)
   40e78:	8a000315 	stw	r8,12(r17)
   40e7c:	8a000215 	stw	r8,8(r17)
   40e80:	88e3883a 	add	r17,r17,r3
   40e84:	88c00015 	stw	r3,0(r17)
   40e88:	9009883a 	mov	r4,r18
   40e8c:	00434780 	call	43478 <__malloc_unlock>
   40e90:	80800204 	addi	r2,r16,8
   40e94:	00001b06 	br	40f04 <_malloc_r+0x2a4>
   40e98:	04400404 	movi	r17,16
   40e9c:	89402536 	bltu	r17,r5,40f34 <_malloc_r+0x2d4>
   40ea0:	00434540 	call	43454 <__malloc_lock>
   40ea4:	00800184 	movi	r2,6
   40ea8:	01000084 	movi	r4,2
   40eac:	04c00134 	movhi	r19,4
   40eb0:	1085883a 	add	r2,r2,r2
   40eb4:	9cd34a04 	addi	r19,r19,19752
   40eb8:	1085883a 	add	r2,r2,r2
   40ebc:	9885883a 	add	r2,r19,r2
   40ec0:	14000117 	ldw	r16,4(r2)
   40ec4:	10fffe04 	addi	r3,r2,-8
   40ec8:	80c0d926 	beq	r16,r3,41230 <_malloc_r+0x5d0>
   40ecc:	80c00117 	ldw	r3,4(r16)
   40ed0:	81000317 	ldw	r4,12(r16)
   40ed4:	00bfff04 	movi	r2,-4
   40ed8:	1884703a 	and	r2,r3,r2
   40edc:	81400217 	ldw	r5,8(r16)
   40ee0:	8085883a 	add	r2,r16,r2
   40ee4:	10c00117 	ldw	r3,4(r2)
   40ee8:	29000315 	stw	r4,12(r5)
   40eec:	21400215 	stw	r5,8(r4)
   40ef0:	18c00054 	ori	r3,r3,1
   40ef4:	10c00115 	stw	r3,4(r2)
   40ef8:	9009883a 	mov	r4,r18
   40efc:	00434780 	call	43478 <__malloc_unlock>
   40f00:	80800204 	addi	r2,r16,8
   40f04:	dfc00a17 	ldw	ra,40(sp)
   40f08:	df000917 	ldw	fp,36(sp)
   40f0c:	ddc00817 	ldw	r23,32(sp)
   40f10:	dd800717 	ldw	r22,28(sp)
   40f14:	dd400617 	ldw	r21,24(sp)
   40f18:	dd000517 	ldw	r20,20(sp)
   40f1c:	dcc00417 	ldw	r19,16(sp)
   40f20:	dc800317 	ldw	r18,12(sp)
   40f24:	dc400217 	ldw	r17,8(sp)
   40f28:	dc000117 	ldw	r16,4(sp)
   40f2c:	dec00b04 	addi	sp,sp,44
   40f30:	f800283a 	ret
   40f34:	00800304 	movi	r2,12
   40f38:	90800015 	stw	r2,0(r18)
   40f3c:	0005883a 	mov	r2,zero
   40f40:	003ff006 	br	40f04 <_malloc_r+0x2a4>
   40f44:	01002004 	movi	r4,128
   40f48:	02001004 	movi	r8,64
   40f4c:	01c00fc4 	movi	r7,63
   40f50:	003f6106 	br	40cd8 <_malloc_r+0x78>
   40f54:	4009883a 	mov	r4,r8
   40f58:	003f7506 	br	40d30 <_malloc_r+0xd0>
   40f5c:	81000317 	ldw	r4,12(r16)
   40f60:	003fde06 	br	40edc <_malloc_r+0x27c>
   40f64:	81c5883a 	add	r2,r16,r7
   40f68:	11400117 	ldw	r5,4(r2)
   40f6c:	9009883a 	mov	r4,r18
   40f70:	29400054 	ori	r5,r5,1
   40f74:	11400115 	stw	r5,4(r2)
   40f78:	00434780 	call	43478 <__malloc_unlock>
   40f7c:	80800204 	addi	r2,r16,8
   40f80:	003fe006 	br	40f04 <_malloc_r+0x2a4>
   40f84:	9c000217 	ldw	r16,8(r19)
   40f88:	00bfff04 	movi	r2,-4
   40f8c:	85800117 	ldw	r22,4(r16)
   40f90:	b0ac703a 	and	r22,r22,r2
   40f94:	b4400336 	bltu	r22,r17,40fa4 <_malloc_r+0x344>
   40f98:	b445c83a 	sub	r2,r22,r17
   40f9c:	00c003c4 	movi	r3,15
   40fa0:	18805d16 	blt	r3,r2,41118 <_malloc_r+0x4b8>
   40fa4:	05c00134 	movhi	r23,4
   40fa8:	00800134 	movhi	r2,4
   40fac:	10975904 	addi	r2,r2,23908
   40fb0:	bdd4c304 	addi	r23,r23,21260
   40fb4:	15400017 	ldw	r21,0(r2)
   40fb8:	b8c00017 	ldw	r3,0(r23)
   40fbc:	00bfffc4 	movi	r2,-1
   40fc0:	858d883a 	add	r6,r16,r22
   40fc4:	8d6b883a 	add	r21,r17,r21
   40fc8:	1880ea26 	beq	r3,r2,41374 <_malloc_r+0x714>
   40fcc:	ad4403c4 	addi	r21,r21,4111
   40fd0:	00bc0004 	movi	r2,-4096
   40fd4:	a8aa703a 	and	r21,r21,r2
   40fd8:	a80b883a 	mov	r5,r21
   40fdc:	9009883a 	mov	r4,r18
   40fe0:	d9800015 	stw	r6,0(sp)
   40fe4:	0041e800 	call	41e80 <_sbrk_r>
   40fe8:	1029883a 	mov	r20,r2
   40fec:	00bfffc4 	movi	r2,-1
   40ff0:	d9800017 	ldw	r6,0(sp)
   40ff4:	a080e826 	beq	r20,r2,41398 <_malloc_r+0x738>
   40ff8:	a180a636 	bltu	r20,r6,41294 <_malloc_r+0x634>
   40ffc:	07000134 	movhi	fp,4
   41000:	e7175e04 	addi	fp,fp,23928
   41004:	e0800017 	ldw	r2,0(fp)
   41008:	a887883a 	add	r3,r21,r2
   4100c:	e0c00015 	stw	r3,0(fp)
   41010:	3500e626 	beq	r6,r20,413ac <_malloc_r+0x74c>
   41014:	b9000017 	ldw	r4,0(r23)
   41018:	00bfffc4 	movi	r2,-1
   4101c:	2080ee26 	beq	r4,r2,413d8 <_malloc_r+0x778>
   41020:	a185c83a 	sub	r2,r20,r6
   41024:	10c5883a 	add	r2,r2,r3
   41028:	e0800015 	stw	r2,0(fp)
   4102c:	a0c001cc 	andi	r3,r20,7
   41030:	1800bc26 	beq	r3,zero,41324 <_malloc_r+0x6c4>
   41034:	a0e9c83a 	sub	r20,r20,r3
   41038:	00840204 	movi	r2,4104
   4103c:	a5000204 	addi	r20,r20,8
   41040:	10c7c83a 	sub	r3,r2,r3
   41044:	a545883a 	add	r2,r20,r21
   41048:	1083ffcc 	andi	r2,r2,4095
   4104c:	18abc83a 	sub	r21,r3,r2
   41050:	a80b883a 	mov	r5,r21
   41054:	9009883a 	mov	r4,r18
   41058:	0041e800 	call	41e80 <_sbrk_r>
   4105c:	00ffffc4 	movi	r3,-1
   41060:	10c0e126 	beq	r2,r3,413e8 <_malloc_r+0x788>
   41064:	1505c83a 	sub	r2,r2,r20
   41068:	1545883a 	add	r2,r2,r21
   4106c:	10800054 	ori	r2,r2,1
   41070:	e0c00017 	ldw	r3,0(fp)
   41074:	9d000215 	stw	r20,8(r19)
   41078:	a0800115 	stw	r2,4(r20)
   4107c:	a8c7883a 	add	r3,r21,r3
   41080:	e0c00015 	stw	r3,0(fp)
   41084:	84c00e26 	beq	r16,r19,410c0 <_malloc_r+0x460>
   41088:	018003c4 	movi	r6,15
   4108c:	3580a72e 	bgeu	r6,r22,4132c <_malloc_r+0x6cc>
   41090:	81400117 	ldw	r5,4(r16)
   41094:	013ffe04 	movi	r4,-8
   41098:	b0bffd04 	addi	r2,r22,-12
   4109c:	1104703a 	and	r2,r2,r4
   410a0:	2900004c 	andi	r4,r5,1
   410a4:	2088b03a 	or	r4,r4,r2
   410a8:	81000115 	stw	r4,4(r16)
   410ac:	01400144 	movi	r5,5
   410b0:	8089883a 	add	r4,r16,r2
   410b4:	21400115 	stw	r5,4(r4)
   410b8:	21400215 	stw	r5,8(r4)
   410bc:	3080cd36 	bltu	r6,r2,413f4 <_malloc_r+0x794>
   410c0:	00800134 	movhi	r2,4
   410c4:	10975804 	addi	r2,r2,23904
   410c8:	11000017 	ldw	r4,0(r2)
   410cc:	20c0012e 	bgeu	r4,r3,410d4 <_malloc_r+0x474>
   410d0:	10c00015 	stw	r3,0(r2)
   410d4:	00800134 	movhi	r2,4
   410d8:	10975704 	addi	r2,r2,23900
   410dc:	11000017 	ldw	r4,0(r2)
   410e0:	9c000217 	ldw	r16,8(r19)
   410e4:	20c0012e 	bgeu	r4,r3,410ec <_malloc_r+0x48c>
   410e8:	10c00015 	stw	r3,0(r2)
   410ec:	80c00117 	ldw	r3,4(r16)
   410f0:	00bfff04 	movi	r2,-4
   410f4:	1886703a 	and	r3,r3,r2
   410f8:	1c45c83a 	sub	r2,r3,r17
   410fc:	1c400236 	bltu	r3,r17,41108 <_malloc_r+0x4a8>
   41100:	00c003c4 	movi	r3,15
   41104:	18800416 	blt	r3,r2,41118 <_malloc_r+0x4b8>
   41108:	9009883a 	mov	r4,r18
   4110c:	00434780 	call	43478 <__malloc_unlock>
   41110:	0005883a 	mov	r2,zero
   41114:	003f7b06 	br	40f04 <_malloc_r+0x2a4>
   41118:	88c00054 	ori	r3,r17,1
   4111c:	80c00115 	stw	r3,4(r16)
   41120:	8463883a 	add	r17,r16,r17
   41124:	10800054 	ori	r2,r2,1
   41128:	9c400215 	stw	r17,8(r19)
   4112c:	88800115 	stw	r2,4(r17)
   41130:	9009883a 	mov	r4,r18
   41134:	00434780 	call	43478 <__malloc_unlock>
   41138:	80800204 	addi	r2,r16,8
   4113c:	003f7106 	br	40f04 <_malloc_r+0x2a4>
   41140:	00c00504 	movi	r3,20
   41144:	18804a2e 	bgeu	r3,r2,41270 <_malloc_r+0x610>
   41148:	00c01504 	movi	r3,84
   4114c:	18806e36 	bltu	r3,r2,41308 <_malloc_r+0x6a8>
   41150:	8804d33a 	srli	r2,r17,12
   41154:	12001bc4 	addi	r8,r2,111
   41158:	11c01b84 	addi	r7,r2,110
   4115c:	4209883a 	add	r4,r8,r8
   41160:	003edd06 	br	40cd8 <_malloc_r+0x78>
   41164:	3804d27a 	srli	r2,r7,9
   41168:	00c00104 	movi	r3,4
   4116c:	1880442e 	bgeu	r3,r2,41280 <_malloc_r+0x620>
   41170:	00c00504 	movi	r3,20
   41174:	18808136 	bltu	r3,r2,4137c <_malloc_r+0x71c>
   41178:	11401704 	addi	r5,r2,92
   4117c:	10c016c4 	addi	r3,r2,91
   41180:	294b883a 	add	r5,r5,r5
   41184:	294b883a 	add	r5,r5,r5
   41188:	294b883a 	add	r5,r5,r5
   4118c:	994b883a 	add	r5,r19,r5
   41190:	28800017 	ldw	r2,0(r5)
   41194:	01800134 	movhi	r6,4
   41198:	297ffe04 	addi	r5,r5,-8
   4119c:	31934a04 	addi	r6,r6,19752
   411a0:	28806526 	beq	r5,r2,41338 <_malloc_r+0x6d8>
   411a4:	01bfff04 	movi	r6,-4
   411a8:	10c00117 	ldw	r3,4(r2)
   411ac:	1986703a 	and	r3,r3,r6
   411b0:	38c0022e 	bgeu	r7,r3,411bc <_malloc_r+0x55c>
   411b4:	10800217 	ldw	r2,8(r2)
   411b8:	28bffb1e 	bne	r5,r2,411a8 <_malloc_r+0x548>
   411bc:	11400317 	ldw	r5,12(r2)
   411c0:	98c00117 	ldw	r3,4(r19)
   411c4:	81400315 	stw	r5,12(r16)
   411c8:	80800215 	stw	r2,8(r16)
   411cc:	2c000215 	stw	r16,8(r5)
   411d0:	14000315 	stw	r16,12(r2)
   411d4:	003ef806 	br	40db8 <_malloc_r+0x158>
   411d8:	88c00054 	ori	r3,r17,1
   411dc:	80c00115 	stw	r3,4(r16)
   411e0:	8463883a 	add	r17,r16,r17
   411e4:	34400515 	stw	r17,20(r6)
   411e8:	34400415 	stw	r17,16(r6)
   411ec:	10c00054 	ori	r3,r2,1
   411f0:	8a000315 	stw	r8,12(r17)
   411f4:	8a000215 	stw	r8,8(r17)
   411f8:	88c00115 	stw	r3,4(r17)
   411fc:	88a3883a 	add	r17,r17,r2
   41200:	88800015 	stw	r2,0(r17)
   41204:	9009883a 	mov	r4,r18
   41208:	00434780 	call	43478 <__malloc_unlock>
   4120c:	80800204 	addi	r2,r16,8
   41210:	003f3c06 	br	40f04 <_malloc_r+0x2a4>
   41214:	30c00117 	ldw	r3,4(r6)
   41218:	003ee706 	br	40db8 <_malloc_r+0x158>
   4121c:	5ac00044 	addi	r11,r11,1
   41220:	588000cc 	andi	r2,r11,3
   41224:	31800204 	addi	r6,r6,8
   41228:	103efd1e 	bne	r2,zero,40e20 <_malloc_r+0x1c0>
   4122c:	00002406 	br	412c0 <_malloc_r+0x660>
   41230:	14000317 	ldw	r16,12(r2)
   41234:	143f251e 	bne	r2,r16,40ecc <_malloc_r+0x26c>
   41238:	21000084 	addi	r4,r4,2
   4123c:	003ebc06 	br	40d30 <_malloc_r+0xd0>
   41240:	8085883a 	add	r2,r16,r2
   41244:	10c00117 	ldw	r3,4(r2)
   41248:	81000317 	ldw	r4,12(r16)
   4124c:	81400217 	ldw	r5,8(r16)
   41250:	18c00054 	ori	r3,r3,1
   41254:	10c00115 	stw	r3,4(r2)
   41258:	29000315 	stw	r4,12(r5)
   4125c:	21400215 	stw	r5,8(r4)
   41260:	9009883a 	mov	r4,r18
   41264:	00434780 	call	43478 <__malloc_unlock>
   41268:	80800204 	addi	r2,r16,8
   4126c:	003f2506 	br	40f04 <_malloc_r+0x2a4>
   41270:	12001704 	addi	r8,r2,92
   41274:	11c016c4 	addi	r7,r2,91
   41278:	4209883a 	add	r4,r8,r8
   4127c:	003e9606 	br	40cd8 <_malloc_r+0x78>
   41280:	3804d1ba 	srli	r2,r7,6
   41284:	11400e44 	addi	r5,r2,57
   41288:	10c00e04 	addi	r3,r2,56
   4128c:	294b883a 	add	r5,r5,r5
   41290:	003fbc06 	br	41184 <_malloc_r+0x524>
   41294:	84ff5926 	beq	r16,r19,40ffc <_malloc_r+0x39c>
   41298:	00800134 	movhi	r2,4
   4129c:	10934a04 	addi	r2,r2,19752
   412a0:	14000217 	ldw	r16,8(r2)
   412a4:	00bfff04 	movi	r2,-4
   412a8:	80c00117 	ldw	r3,4(r16)
   412ac:	1886703a 	and	r3,r3,r2
   412b0:	003f9106 	br	410f8 <_malloc_r+0x498>
   412b4:	60800217 	ldw	r2,8(r12)
   412b8:	213fffc4 	addi	r4,r4,-1
   412bc:	1300651e 	bne	r2,r12,41454 <_malloc_r+0x7f4>
   412c0:	208000cc 	andi	r2,r4,3
   412c4:	633ffe04 	addi	r12,r12,-8
   412c8:	103ffa1e 	bne	r2,zero,412b4 <_malloc_r+0x654>
   412cc:	98800117 	ldw	r2,4(r19)
   412d0:	0146303a 	nor	r3,zero,r5
   412d4:	1884703a 	and	r2,r3,r2
   412d8:	98800115 	stw	r2,4(r19)
   412dc:	294b883a 	add	r5,r5,r5
   412e0:	117f2836 	bltu	r2,r5,40f84 <_malloc_r+0x324>
   412e4:	283f2726 	beq	r5,zero,40f84 <_malloc_r+0x324>
   412e8:	2886703a 	and	r3,r5,r2
   412ec:	5809883a 	mov	r4,r11
   412f0:	183ec31e 	bne	r3,zero,40e00 <_malloc_r+0x1a0>
   412f4:	294b883a 	add	r5,r5,r5
   412f8:	2886703a 	and	r3,r5,r2
   412fc:	21000104 	addi	r4,r4,4
   41300:	183ffc26 	beq	r3,zero,412f4 <_malloc_r+0x694>
   41304:	003ebe06 	br	40e00 <_malloc_r+0x1a0>
   41308:	00c05504 	movi	r3,340
   4130c:	18801236 	bltu	r3,r2,41358 <_malloc_r+0x6f8>
   41310:	8804d3fa 	srli	r2,r17,15
   41314:	12001e04 	addi	r8,r2,120
   41318:	11c01dc4 	addi	r7,r2,119
   4131c:	4209883a 	add	r4,r8,r8
   41320:	003e6d06 	br	40cd8 <_malloc_r+0x78>
   41324:	00c40004 	movi	r3,4096
   41328:	003f4606 	br	41044 <_malloc_r+0x3e4>
   4132c:	00800044 	movi	r2,1
   41330:	a0800115 	stw	r2,4(r20)
   41334:	003f7406 	br	41108 <_malloc_r+0x4a8>
   41338:	1805d0ba 	srai	r2,r3,2
   4133c:	01c00044 	movi	r7,1
   41340:	30c00117 	ldw	r3,4(r6)
   41344:	388e983a 	sll	r7,r7,r2
   41348:	2805883a 	mov	r2,r5
   4134c:	38c6b03a 	or	r3,r7,r3
   41350:	30c00115 	stw	r3,4(r6)
   41354:	003f9b06 	br	411c4 <_malloc_r+0x564>
   41358:	00c15504 	movi	r3,1364
   4135c:	18801a36 	bltu	r3,r2,413c8 <_malloc_r+0x768>
   41360:	8804d4ba 	srli	r2,r17,18
   41364:	12001f44 	addi	r8,r2,125
   41368:	11c01f04 	addi	r7,r2,124
   4136c:	4209883a 	add	r4,r8,r8
   41370:	003e5906 	br	40cd8 <_malloc_r+0x78>
   41374:	ad400404 	addi	r21,r21,16
   41378:	003f1706 	br	40fd8 <_malloc_r+0x378>
   4137c:	00c01504 	movi	r3,84
   41380:	18802336 	bltu	r3,r2,41410 <_malloc_r+0x7b0>
   41384:	3804d33a 	srli	r2,r7,12
   41388:	11401bc4 	addi	r5,r2,111
   4138c:	10c01b84 	addi	r3,r2,110
   41390:	294b883a 	add	r5,r5,r5
   41394:	003f7b06 	br	41184 <_malloc_r+0x524>
   41398:	9c000217 	ldw	r16,8(r19)
   4139c:	00bfff04 	movi	r2,-4
   413a0:	80c00117 	ldw	r3,4(r16)
   413a4:	1886703a 	and	r3,r3,r2
   413a8:	003f5306 	br	410f8 <_malloc_r+0x498>
   413ac:	3083ffcc 	andi	r2,r6,4095
   413b0:	103f181e 	bne	r2,zero,41014 <_malloc_r+0x3b4>
   413b4:	99000217 	ldw	r4,8(r19)
   413b8:	b545883a 	add	r2,r22,r21
   413bc:	10800054 	ori	r2,r2,1
   413c0:	20800115 	stw	r2,4(r4)
   413c4:	003f3e06 	br	410c0 <_malloc_r+0x460>
   413c8:	01003f84 	movi	r4,254
   413cc:	02001fc4 	movi	r8,127
   413d0:	01c01f84 	movi	r7,126
   413d4:	003e4006 	br	40cd8 <_malloc_r+0x78>
   413d8:	00800134 	movhi	r2,4
   413dc:	1094c304 	addi	r2,r2,21260
   413e0:	15000015 	stw	r20,0(r2)
   413e4:	003f1106 	br	4102c <_malloc_r+0x3cc>
   413e8:	00800044 	movi	r2,1
   413ec:	002b883a 	mov	r21,zero
   413f0:	003f1f06 	br	41070 <_malloc_r+0x410>
   413f4:	81400204 	addi	r5,r16,8
   413f8:	9009883a 	mov	r4,r18
   413fc:	00426e80 	call	426e8 <_free_r>
   41400:	00800134 	movhi	r2,4
   41404:	10975e04 	addi	r2,r2,23928
   41408:	10c00017 	ldw	r3,0(r2)
   4140c:	003f2c06 	br	410c0 <_malloc_r+0x460>
   41410:	00c05504 	movi	r3,340
   41414:	18800536 	bltu	r3,r2,4142c <_malloc_r+0x7cc>
   41418:	3804d3fa 	srli	r2,r7,15
   4141c:	11401e04 	addi	r5,r2,120
   41420:	10c01dc4 	addi	r3,r2,119
   41424:	294b883a 	add	r5,r5,r5
   41428:	003f5606 	br	41184 <_malloc_r+0x524>
   4142c:	00c15504 	movi	r3,1364
   41430:	18800536 	bltu	r3,r2,41448 <_malloc_r+0x7e8>
   41434:	3804d4ba 	srli	r2,r7,18
   41438:	11401f44 	addi	r5,r2,125
   4143c:	10c01f04 	addi	r3,r2,124
   41440:	294b883a 	add	r5,r5,r5
   41444:	003f4f06 	br	41184 <_malloc_r+0x524>
   41448:	01403f84 	movi	r5,254
   4144c:	00c01f84 	movi	r3,126
   41450:	003f4c06 	br	41184 <_malloc_r+0x524>
   41454:	98800117 	ldw	r2,4(r19)
   41458:	003fa006 	br	412dc <_malloc_r+0x67c>
   4145c:	8808d0fa 	srli	r4,r17,3
   41460:	20800044 	addi	r2,r4,1
   41464:	1085883a 	add	r2,r2,r2
   41468:	003e9006 	br	40eac <_malloc_r+0x24c>

0004146c <memchr>:
   4146c:	208000cc 	andi	r2,r4,3
   41470:	280f883a 	mov	r7,r5
   41474:	10003426 	beq	r2,zero,41548 <memchr+0xdc>
   41478:	30bfffc4 	addi	r2,r6,-1
   4147c:	30001a26 	beq	r6,zero,414e8 <memchr+0x7c>
   41480:	20c00003 	ldbu	r3,0(r4)
   41484:	29803fcc 	andi	r6,r5,255
   41488:	30c0051e 	bne	r6,r3,414a0 <memchr+0x34>
   4148c:	00001806 	br	414f0 <memchr+0x84>
   41490:	10001526 	beq	r2,zero,414e8 <memchr+0x7c>
   41494:	20c00003 	ldbu	r3,0(r4)
   41498:	10bfffc4 	addi	r2,r2,-1
   4149c:	30c01426 	beq	r6,r3,414f0 <memchr+0x84>
   414a0:	21000044 	addi	r4,r4,1
   414a4:	20c000cc 	andi	r3,r4,3
   414a8:	183ff91e 	bne	r3,zero,41490 <memchr+0x24>
   414ac:	020000c4 	movi	r8,3
   414b0:	40801136 	bltu	r8,r2,414f8 <memchr+0x8c>
   414b4:	10000c26 	beq	r2,zero,414e8 <memchr+0x7c>
   414b8:	20c00003 	ldbu	r3,0(r4)
   414bc:	29403fcc 	andi	r5,r5,255
   414c0:	28c00b26 	beq	r5,r3,414f0 <memchr+0x84>
   414c4:	20c00044 	addi	r3,r4,1
   414c8:	39803fcc 	andi	r6,r7,255
   414cc:	2089883a 	add	r4,r4,r2
   414d0:	00000306 	br	414e0 <memchr+0x74>
   414d4:	18c00044 	addi	r3,r3,1
   414d8:	197fffc3 	ldbu	r5,-1(r3)
   414dc:	31400526 	beq	r6,r5,414f4 <memchr+0x88>
   414e0:	1805883a 	mov	r2,r3
   414e4:	20fffb1e 	bne	r4,r3,414d4 <memchr+0x68>
   414e8:	0005883a 	mov	r2,zero
   414ec:	f800283a 	ret
   414f0:	2005883a 	mov	r2,r4
   414f4:	f800283a 	ret
   414f8:	28c03fcc 	andi	r3,r5,255
   414fc:	1812923a 	slli	r9,r3,8
   41500:	02ffbff4 	movhi	r11,65279
   41504:	02a02074 	movhi	r10,32897
   41508:	48d2b03a 	or	r9,r9,r3
   4150c:	4806943a 	slli	r3,r9,16
   41510:	5affbfc4 	addi	r11,r11,-257
   41514:	52a02004 	addi	r10,r10,-32640
   41518:	48d2b03a 	or	r9,r9,r3
   4151c:	20c00017 	ldw	r3,0(r4)
   41520:	48c6f03a 	xor	r3,r9,r3
   41524:	1acd883a 	add	r6,r3,r11
   41528:	00c6303a 	nor	r3,zero,r3
   4152c:	30c6703a 	and	r3,r6,r3
   41530:	1a86703a 	and	r3,r3,r10
   41534:	183fe01e 	bne	r3,zero,414b8 <memchr+0x4c>
   41538:	10bfff04 	addi	r2,r2,-4
   4153c:	21000104 	addi	r4,r4,4
   41540:	40bff636 	bltu	r8,r2,4151c <memchr+0xb0>
   41544:	003fdb06 	br	414b4 <memchr+0x48>
   41548:	3005883a 	mov	r2,r6
   4154c:	003fd706 	br	414ac <memchr+0x40>

00041550 <memcpy>:
   41550:	defffd04 	addi	sp,sp,-12
   41554:	dfc00215 	stw	ra,8(sp)
   41558:	dc400115 	stw	r17,4(sp)
   4155c:	dc000015 	stw	r16,0(sp)
   41560:	00c003c4 	movi	r3,15
   41564:	2005883a 	mov	r2,r4
   41568:	1980452e 	bgeu	r3,r6,41680 <memcpy+0x130>
   4156c:	2906b03a 	or	r3,r5,r4
   41570:	18c000cc 	andi	r3,r3,3
   41574:	1800441e 	bne	r3,zero,41688 <memcpy+0x138>
   41578:	347ffc04 	addi	r17,r6,-16
   4157c:	8822d13a 	srli	r17,r17,4
   41580:	28c00104 	addi	r3,r5,4
   41584:	23400104 	addi	r13,r4,4
   41588:	8820913a 	slli	r16,r17,4
   4158c:	2b000204 	addi	r12,r5,8
   41590:	22c00204 	addi	r11,r4,8
   41594:	84000504 	addi	r16,r16,20
   41598:	2a800304 	addi	r10,r5,12
   4159c:	22400304 	addi	r9,r4,12
   415a0:	2c21883a 	add	r16,r5,r16
   415a4:	2811883a 	mov	r8,r5
   415a8:	200f883a 	mov	r7,r4
   415ac:	41000017 	ldw	r4,0(r8)
   415b0:	1fc00017 	ldw	ra,0(r3)
   415b4:	63c00017 	ldw	r15,0(r12)
   415b8:	39000015 	stw	r4,0(r7)
   415bc:	53800017 	ldw	r14,0(r10)
   415c0:	6fc00015 	stw	ra,0(r13)
   415c4:	5bc00015 	stw	r15,0(r11)
   415c8:	4b800015 	stw	r14,0(r9)
   415cc:	18c00404 	addi	r3,r3,16
   415d0:	39c00404 	addi	r7,r7,16
   415d4:	42000404 	addi	r8,r8,16
   415d8:	6b400404 	addi	r13,r13,16
   415dc:	63000404 	addi	r12,r12,16
   415e0:	5ac00404 	addi	r11,r11,16
   415e4:	52800404 	addi	r10,r10,16
   415e8:	4a400404 	addi	r9,r9,16
   415ec:	1c3fef1e 	bne	r3,r16,415ac <memcpy+0x5c>
   415f0:	89c00044 	addi	r7,r17,1
   415f4:	380e913a 	slli	r7,r7,4
   415f8:	310003cc 	andi	r4,r6,15
   415fc:	02c000c4 	movi	r11,3
   41600:	11c7883a 	add	r3,r2,r7
   41604:	29cb883a 	add	r5,r5,r7
   41608:	5900212e 	bgeu	r11,r4,41690 <memcpy+0x140>
   4160c:	1813883a 	mov	r9,r3
   41610:	2811883a 	mov	r8,r5
   41614:	200f883a 	mov	r7,r4
   41618:	42800017 	ldw	r10,0(r8)
   4161c:	4a400104 	addi	r9,r9,4
   41620:	39ffff04 	addi	r7,r7,-4
   41624:	4abfff15 	stw	r10,-4(r9)
   41628:	42000104 	addi	r8,r8,4
   4162c:	59fffa36 	bltu	r11,r7,41618 <memcpy+0xc8>
   41630:	213fff04 	addi	r4,r4,-4
   41634:	2008d0ba 	srli	r4,r4,2
   41638:	318000cc 	andi	r6,r6,3
   4163c:	21000044 	addi	r4,r4,1
   41640:	2109883a 	add	r4,r4,r4
   41644:	2109883a 	add	r4,r4,r4
   41648:	1907883a 	add	r3,r3,r4
   4164c:	290b883a 	add	r5,r5,r4
   41650:	30000626 	beq	r6,zero,4166c <memcpy+0x11c>
   41654:	198d883a 	add	r6,r3,r6
   41658:	29c00003 	ldbu	r7,0(r5)
   4165c:	18c00044 	addi	r3,r3,1
   41660:	29400044 	addi	r5,r5,1
   41664:	19ffffc5 	stb	r7,-1(r3)
   41668:	19bffb1e 	bne	r3,r6,41658 <memcpy+0x108>
   4166c:	dfc00217 	ldw	ra,8(sp)
   41670:	dc400117 	ldw	r17,4(sp)
   41674:	dc000017 	ldw	r16,0(sp)
   41678:	dec00304 	addi	sp,sp,12
   4167c:	f800283a 	ret
   41680:	2007883a 	mov	r3,r4
   41684:	003ff206 	br	41650 <memcpy+0x100>
   41688:	2007883a 	mov	r3,r4
   4168c:	003ff106 	br	41654 <memcpy+0x104>
   41690:	200d883a 	mov	r6,r4
   41694:	003fee06 	br	41650 <memcpy+0x100>

00041698 <memmove>:
   41698:	2005883a 	mov	r2,r4
   4169c:	29000b2e 	bgeu	r5,r4,416cc <memmove+0x34>
   416a0:	298f883a 	add	r7,r5,r6
   416a4:	21c0092e 	bgeu	r4,r7,416cc <memmove+0x34>
   416a8:	2187883a 	add	r3,r4,r6
   416ac:	198bc83a 	sub	r5,r3,r6
   416b0:	30004826 	beq	r6,zero,417d4 <memmove+0x13c>
   416b4:	39ffffc4 	addi	r7,r7,-1
   416b8:	39000003 	ldbu	r4,0(r7)
   416bc:	18ffffc4 	addi	r3,r3,-1
   416c0:	19000005 	stb	r4,0(r3)
   416c4:	28fffb1e 	bne	r5,r3,416b4 <memmove+0x1c>
   416c8:	f800283a 	ret
   416cc:	00c003c4 	movi	r3,15
   416d0:	1980412e 	bgeu	r3,r6,417d8 <memmove+0x140>
   416d4:	2886b03a 	or	r3,r5,r2
   416d8:	18c000cc 	andi	r3,r3,3
   416dc:	1800401e 	bne	r3,zero,417e0 <memmove+0x148>
   416e0:	33fffc04 	addi	r15,r6,-16
   416e4:	781ed13a 	srli	r15,r15,4
   416e8:	28c00104 	addi	r3,r5,4
   416ec:	13400104 	addi	r13,r2,4
   416f0:	781c913a 	slli	r14,r15,4
   416f4:	2b000204 	addi	r12,r5,8
   416f8:	12c00204 	addi	r11,r2,8
   416fc:	73800504 	addi	r14,r14,20
   41700:	2a800304 	addi	r10,r5,12
   41704:	12400304 	addi	r9,r2,12
   41708:	2b9d883a 	add	r14,r5,r14
   4170c:	2811883a 	mov	r8,r5
   41710:	100f883a 	mov	r7,r2
   41714:	41000017 	ldw	r4,0(r8)
   41718:	39c00404 	addi	r7,r7,16
   4171c:	18c00404 	addi	r3,r3,16
   41720:	393ffc15 	stw	r4,-16(r7)
   41724:	193ffc17 	ldw	r4,-16(r3)
   41728:	6b400404 	addi	r13,r13,16
   4172c:	5ac00404 	addi	r11,r11,16
   41730:	693ffc15 	stw	r4,-16(r13)
   41734:	61000017 	ldw	r4,0(r12)
   41738:	4a400404 	addi	r9,r9,16
   4173c:	42000404 	addi	r8,r8,16
   41740:	593ffc15 	stw	r4,-16(r11)
   41744:	51000017 	ldw	r4,0(r10)
   41748:	63000404 	addi	r12,r12,16
   4174c:	52800404 	addi	r10,r10,16
   41750:	493ffc15 	stw	r4,-16(r9)
   41754:	1bbfef1e 	bne	r3,r14,41714 <memmove+0x7c>
   41758:	79000044 	addi	r4,r15,1
   4175c:	2008913a 	slli	r4,r4,4
   41760:	328003cc 	andi	r10,r6,15
   41764:	02c000c4 	movi	r11,3
   41768:	1107883a 	add	r3,r2,r4
   4176c:	290b883a 	add	r5,r5,r4
   41770:	5a801e2e 	bgeu	r11,r10,417ec <memmove+0x154>
   41774:	1813883a 	mov	r9,r3
   41778:	2811883a 	mov	r8,r5
   4177c:	500f883a 	mov	r7,r10
   41780:	41000017 	ldw	r4,0(r8)
   41784:	4a400104 	addi	r9,r9,4
   41788:	39ffff04 	addi	r7,r7,-4
   4178c:	493fff15 	stw	r4,-4(r9)
   41790:	42000104 	addi	r8,r8,4
   41794:	59fffa36 	bltu	r11,r7,41780 <memmove+0xe8>
   41798:	513fff04 	addi	r4,r10,-4
   4179c:	2008d0ba 	srli	r4,r4,2
   417a0:	318000cc 	andi	r6,r6,3
   417a4:	21000044 	addi	r4,r4,1
   417a8:	2109883a 	add	r4,r4,r4
   417ac:	2109883a 	add	r4,r4,r4
   417b0:	1907883a 	add	r3,r3,r4
   417b4:	290b883a 	add	r5,r5,r4
   417b8:	30000b26 	beq	r6,zero,417e8 <memmove+0x150>
   417bc:	198d883a 	add	r6,r3,r6
   417c0:	29c00003 	ldbu	r7,0(r5)
   417c4:	18c00044 	addi	r3,r3,1
   417c8:	29400044 	addi	r5,r5,1
   417cc:	19ffffc5 	stb	r7,-1(r3)
   417d0:	19bffb1e 	bne	r3,r6,417c0 <memmove+0x128>
   417d4:	f800283a 	ret
   417d8:	1007883a 	mov	r3,r2
   417dc:	003ff606 	br	417b8 <memmove+0x120>
   417e0:	1007883a 	mov	r3,r2
   417e4:	003ff506 	br	417bc <memmove+0x124>
   417e8:	f800283a 	ret
   417ec:	500d883a 	mov	r6,r10
   417f0:	003ff106 	br	417b8 <memmove+0x120>

000417f4 <memset>:
   417f4:	20c000cc 	andi	r3,r4,3
   417f8:	2005883a 	mov	r2,r4
   417fc:	18004426 	beq	r3,zero,41910 <memset+0x11c>
   41800:	31ffffc4 	addi	r7,r6,-1
   41804:	30004026 	beq	r6,zero,41908 <memset+0x114>
   41808:	2813883a 	mov	r9,r5
   4180c:	200d883a 	mov	r6,r4
   41810:	2007883a 	mov	r3,r4
   41814:	00000406 	br	41828 <memset+0x34>
   41818:	3a3fffc4 	addi	r8,r7,-1
   4181c:	31800044 	addi	r6,r6,1
   41820:	38003926 	beq	r7,zero,41908 <memset+0x114>
   41824:	400f883a 	mov	r7,r8
   41828:	18c00044 	addi	r3,r3,1
   4182c:	32400005 	stb	r9,0(r6)
   41830:	1a0000cc 	andi	r8,r3,3
   41834:	403ff81e 	bne	r8,zero,41818 <memset+0x24>
   41838:	010000c4 	movi	r4,3
   4183c:	21c02d2e 	bgeu	r4,r7,418f4 <memset+0x100>
   41840:	29003fcc 	andi	r4,r5,255
   41844:	200c923a 	slli	r6,r4,8
   41848:	3108b03a 	or	r4,r6,r4
   4184c:	200c943a 	slli	r6,r4,16
   41850:	218cb03a 	or	r6,r4,r6
   41854:	010003c4 	movi	r4,15
   41858:	21c0182e 	bgeu	r4,r7,418bc <memset+0xc8>
   4185c:	3b3ffc04 	addi	r12,r7,-16
   41860:	6018d13a 	srli	r12,r12,4
   41864:	1a000104 	addi	r8,r3,4
   41868:	1ac00204 	addi	r11,r3,8
   4186c:	6008913a 	slli	r4,r12,4
   41870:	1a800304 	addi	r10,r3,12
   41874:	1813883a 	mov	r9,r3
   41878:	21000504 	addi	r4,r4,20
   4187c:	1909883a 	add	r4,r3,r4
   41880:	49800015 	stw	r6,0(r9)
   41884:	41800015 	stw	r6,0(r8)
   41888:	59800015 	stw	r6,0(r11)
   4188c:	51800015 	stw	r6,0(r10)
   41890:	42000404 	addi	r8,r8,16
   41894:	4a400404 	addi	r9,r9,16
   41898:	5ac00404 	addi	r11,r11,16
   4189c:	52800404 	addi	r10,r10,16
   418a0:	413ff71e 	bne	r8,r4,41880 <memset+0x8c>
   418a4:	63000044 	addi	r12,r12,1
   418a8:	6018913a 	slli	r12,r12,4
   418ac:	39c003cc 	andi	r7,r7,15
   418b0:	010000c4 	movi	r4,3
   418b4:	1b07883a 	add	r3,r3,r12
   418b8:	21c00e2e 	bgeu	r4,r7,418f4 <memset+0x100>
   418bc:	1813883a 	mov	r9,r3
   418c0:	3811883a 	mov	r8,r7
   418c4:	010000c4 	movi	r4,3
   418c8:	49800015 	stw	r6,0(r9)
   418cc:	423fff04 	addi	r8,r8,-4
   418d0:	4a400104 	addi	r9,r9,4
   418d4:	223ffc36 	bltu	r4,r8,418c8 <memset+0xd4>
   418d8:	393fff04 	addi	r4,r7,-4
   418dc:	2008d0ba 	srli	r4,r4,2
   418e0:	39c000cc 	andi	r7,r7,3
   418e4:	21000044 	addi	r4,r4,1
   418e8:	2109883a 	add	r4,r4,r4
   418ec:	2109883a 	add	r4,r4,r4
   418f0:	1907883a 	add	r3,r3,r4
   418f4:	38000526 	beq	r7,zero,4190c <memset+0x118>
   418f8:	19cf883a 	add	r7,r3,r7
   418fc:	19400005 	stb	r5,0(r3)
   41900:	18c00044 	addi	r3,r3,1
   41904:	38fffd1e 	bne	r7,r3,418fc <memset+0x108>
   41908:	f800283a 	ret
   4190c:	f800283a 	ret
   41910:	2007883a 	mov	r3,r4
   41914:	300f883a 	mov	r7,r6
   41918:	003fc706 	br	41838 <memset+0x44>

0004191c <_realloc_r>:
   4191c:	defff604 	addi	sp,sp,-40
   41920:	dc800215 	stw	r18,8(sp)
   41924:	dfc00915 	stw	ra,36(sp)
   41928:	df000815 	stw	fp,32(sp)
   4192c:	ddc00715 	stw	r23,28(sp)
   41930:	dd800615 	stw	r22,24(sp)
   41934:	dd400515 	stw	r21,20(sp)
   41938:	dd000415 	stw	r20,16(sp)
   4193c:	dcc00315 	stw	r19,12(sp)
   41940:	dc400115 	stw	r17,4(sp)
   41944:	dc000015 	stw	r16,0(sp)
   41948:	3025883a 	mov	r18,r6
   4194c:	2800b726 	beq	r5,zero,41c2c <_realloc_r+0x310>
   41950:	282b883a 	mov	r21,r5
   41954:	2029883a 	mov	r20,r4
   41958:	00434540 	call	43454 <__malloc_lock>
   4195c:	a8bfff17 	ldw	r2,-4(r21)
   41960:	043fff04 	movi	r16,-4
   41964:	90c002c4 	addi	r3,r18,11
   41968:	01000584 	movi	r4,22
   4196c:	acfffe04 	addi	r19,r21,-8
   41970:	1420703a 	and	r16,r2,r16
   41974:	20c0332e 	bgeu	r4,r3,41a44 <_realloc_r+0x128>
   41978:	047ffe04 	movi	r17,-8
   4197c:	1c62703a 	and	r17,r3,r17
   41980:	8807883a 	mov	r3,r17
   41984:	88005816 	blt	r17,zero,41ae8 <_realloc_r+0x1cc>
   41988:	8c805736 	bltu	r17,r18,41ae8 <_realloc_r+0x1cc>
   4198c:	80c0300e 	bge	r16,r3,41a50 <_realloc_r+0x134>
   41990:	07000134 	movhi	fp,4
   41994:	e7134a04 	addi	fp,fp,19752
   41998:	e1c00217 	ldw	r7,8(fp)
   4199c:	9c09883a 	add	r4,r19,r16
   419a0:	22000117 	ldw	r8,4(r4)
   419a4:	21c06326 	beq	r4,r7,41b34 <_realloc_r+0x218>
   419a8:	017fff84 	movi	r5,-2
   419ac:	414a703a 	and	r5,r8,r5
   419b0:	214b883a 	add	r5,r4,r5
   419b4:	29800117 	ldw	r6,4(r5)
   419b8:	3180004c 	andi	r6,r6,1
   419bc:	30003f26 	beq	r6,zero,41abc <_realloc_r+0x1a0>
   419c0:	1080004c 	andi	r2,r2,1
   419c4:	10008326 	beq	r2,zero,41bd4 <_realloc_r+0x2b8>
   419c8:	900b883a 	mov	r5,r18
   419cc:	a009883a 	mov	r4,r20
   419d0:	0040c600 	call	40c60 <_malloc_r>
   419d4:	1025883a 	mov	r18,r2
   419d8:	10011e26 	beq	r2,zero,41e54 <_realloc_r+0x538>
   419dc:	a93fff17 	ldw	r4,-4(r21)
   419e0:	10fffe04 	addi	r3,r2,-8
   419e4:	00bfff84 	movi	r2,-2
   419e8:	2084703a 	and	r2,r4,r2
   419ec:	9885883a 	add	r2,r19,r2
   419f0:	1880ee26 	beq	r3,r2,41dac <_realloc_r+0x490>
   419f4:	81bfff04 	addi	r6,r16,-4
   419f8:	00800904 	movi	r2,36
   419fc:	1180b836 	bltu	r2,r6,41ce0 <_realloc_r+0x3c4>
   41a00:	00c004c4 	movi	r3,19
   41a04:	19809636 	bltu	r3,r6,41c60 <_realloc_r+0x344>
   41a08:	9005883a 	mov	r2,r18
   41a0c:	a807883a 	mov	r3,r21
   41a10:	19000017 	ldw	r4,0(r3)
   41a14:	11000015 	stw	r4,0(r2)
   41a18:	19000117 	ldw	r4,4(r3)
   41a1c:	11000115 	stw	r4,4(r2)
   41a20:	18c00217 	ldw	r3,8(r3)
   41a24:	10c00215 	stw	r3,8(r2)
   41a28:	a80b883a 	mov	r5,r21
   41a2c:	a009883a 	mov	r4,r20
   41a30:	00426e80 	call	426e8 <_free_r>
   41a34:	a009883a 	mov	r4,r20
   41a38:	00434780 	call	43478 <__malloc_unlock>
   41a3c:	9005883a 	mov	r2,r18
   41a40:	00001206 	br	41a8c <_realloc_r+0x170>
   41a44:	00c00404 	movi	r3,16
   41a48:	1823883a 	mov	r17,r3
   41a4c:	003fce06 	br	41988 <_realloc_r+0x6c>
   41a50:	a825883a 	mov	r18,r21
   41a54:	8445c83a 	sub	r2,r16,r17
   41a58:	00c003c4 	movi	r3,15
   41a5c:	18802636 	bltu	r3,r2,41af8 <_realloc_r+0x1dc>
   41a60:	99800117 	ldw	r6,4(r19)
   41a64:	9c07883a 	add	r3,r19,r16
   41a68:	3180004c 	andi	r6,r6,1
   41a6c:	3420b03a 	or	r16,r6,r16
   41a70:	9c000115 	stw	r16,4(r19)
   41a74:	18800117 	ldw	r2,4(r3)
   41a78:	10800054 	ori	r2,r2,1
   41a7c:	18800115 	stw	r2,4(r3)
   41a80:	a009883a 	mov	r4,r20
   41a84:	00434780 	call	43478 <__malloc_unlock>
   41a88:	9005883a 	mov	r2,r18
   41a8c:	dfc00917 	ldw	ra,36(sp)
   41a90:	df000817 	ldw	fp,32(sp)
   41a94:	ddc00717 	ldw	r23,28(sp)
   41a98:	dd800617 	ldw	r22,24(sp)
   41a9c:	dd400517 	ldw	r21,20(sp)
   41aa0:	dd000417 	ldw	r20,16(sp)
   41aa4:	dcc00317 	ldw	r19,12(sp)
   41aa8:	dc800217 	ldw	r18,8(sp)
   41aac:	dc400117 	ldw	r17,4(sp)
   41ab0:	dc000017 	ldw	r16,0(sp)
   41ab4:	dec00a04 	addi	sp,sp,40
   41ab8:	f800283a 	ret
   41abc:	017fff04 	movi	r5,-4
   41ac0:	414a703a 	and	r5,r8,r5
   41ac4:	814d883a 	add	r6,r16,r5
   41ac8:	30c01f16 	blt	r6,r3,41b48 <_realloc_r+0x22c>
   41acc:	20800317 	ldw	r2,12(r4)
   41ad0:	20c00217 	ldw	r3,8(r4)
   41ad4:	a825883a 	mov	r18,r21
   41ad8:	3021883a 	mov	r16,r6
   41adc:	18800315 	stw	r2,12(r3)
   41ae0:	10c00215 	stw	r3,8(r2)
   41ae4:	003fdb06 	br	41a54 <_realloc_r+0x138>
   41ae8:	00800304 	movi	r2,12
   41aec:	a0800015 	stw	r2,0(r20)
   41af0:	0005883a 	mov	r2,zero
   41af4:	003fe506 	br	41a8c <_realloc_r+0x170>
   41af8:	98c00117 	ldw	r3,4(r19)
   41afc:	9c4b883a 	add	r5,r19,r17
   41b00:	11000054 	ori	r4,r2,1
   41b04:	18c0004c 	andi	r3,r3,1
   41b08:	1c62b03a 	or	r17,r3,r17
   41b0c:	9c400115 	stw	r17,4(r19)
   41b10:	29000115 	stw	r4,4(r5)
   41b14:	2885883a 	add	r2,r5,r2
   41b18:	10c00117 	ldw	r3,4(r2)
   41b1c:	29400204 	addi	r5,r5,8
   41b20:	a009883a 	mov	r4,r20
   41b24:	18c00054 	ori	r3,r3,1
   41b28:	10c00115 	stw	r3,4(r2)
   41b2c:	00426e80 	call	426e8 <_free_r>
   41b30:	003fd306 	br	41a80 <_realloc_r+0x164>
   41b34:	017fff04 	movi	r5,-4
   41b38:	414a703a 	and	r5,r8,r5
   41b3c:	89800404 	addi	r6,r17,16
   41b40:	8151883a 	add	r8,r16,r5
   41b44:	4180590e 	bge	r8,r6,41cac <_realloc_r+0x390>
   41b48:	1080004c 	andi	r2,r2,1
   41b4c:	103f9e1e 	bne	r2,zero,419c8 <_realloc_r+0xac>
   41b50:	adbffe17 	ldw	r22,-8(r21)
   41b54:	00bfff04 	movi	r2,-4
   41b58:	9dadc83a 	sub	r22,r19,r22
   41b5c:	b1800117 	ldw	r6,4(r22)
   41b60:	3084703a 	and	r2,r6,r2
   41b64:	20002026 	beq	r4,zero,41be8 <_realloc_r+0x2cc>
   41b68:	80af883a 	add	r23,r16,r2
   41b6c:	b96f883a 	add	r23,r23,r5
   41b70:	21c05f26 	beq	r4,r7,41cf0 <_realloc_r+0x3d4>
   41b74:	b8c01c16 	blt	r23,r3,41be8 <_realloc_r+0x2cc>
   41b78:	20800317 	ldw	r2,12(r4)
   41b7c:	20c00217 	ldw	r3,8(r4)
   41b80:	81bfff04 	addi	r6,r16,-4
   41b84:	01000904 	movi	r4,36
   41b88:	18800315 	stw	r2,12(r3)
   41b8c:	10c00215 	stw	r3,8(r2)
   41b90:	b0c00217 	ldw	r3,8(r22)
   41b94:	b0800317 	ldw	r2,12(r22)
   41b98:	b4800204 	addi	r18,r22,8
   41b9c:	18800315 	stw	r2,12(r3)
   41ba0:	10c00215 	stw	r3,8(r2)
   41ba4:	21801b36 	bltu	r4,r6,41c14 <_realloc_r+0x2f8>
   41ba8:	008004c4 	movi	r2,19
   41bac:	1180352e 	bgeu	r2,r6,41c84 <_realloc_r+0x368>
   41bb0:	a8800017 	ldw	r2,0(r21)
   41bb4:	b0800215 	stw	r2,8(r22)
   41bb8:	a8800117 	ldw	r2,4(r21)
   41bbc:	b0800315 	stw	r2,12(r22)
   41bc0:	008006c4 	movi	r2,27
   41bc4:	11807f36 	bltu	r2,r6,41dc4 <_realloc_r+0x4a8>
   41bc8:	b0800404 	addi	r2,r22,16
   41bcc:	ad400204 	addi	r21,r21,8
   41bd0:	00002d06 	br	41c88 <_realloc_r+0x36c>
   41bd4:	adbffe17 	ldw	r22,-8(r21)
   41bd8:	00bfff04 	movi	r2,-4
   41bdc:	9dadc83a 	sub	r22,r19,r22
   41be0:	b1000117 	ldw	r4,4(r22)
   41be4:	2084703a 	and	r2,r4,r2
   41be8:	b03f7726 	beq	r22,zero,419c8 <_realloc_r+0xac>
   41bec:	80af883a 	add	r23,r16,r2
   41bf0:	b8ff7516 	blt	r23,r3,419c8 <_realloc_r+0xac>
   41bf4:	b0800317 	ldw	r2,12(r22)
   41bf8:	b0c00217 	ldw	r3,8(r22)
   41bfc:	81bfff04 	addi	r6,r16,-4
   41c00:	01000904 	movi	r4,36
   41c04:	18800315 	stw	r2,12(r3)
   41c08:	10c00215 	stw	r3,8(r2)
   41c0c:	b4800204 	addi	r18,r22,8
   41c10:	21bfe52e 	bgeu	r4,r6,41ba8 <_realloc_r+0x28c>
   41c14:	a80b883a 	mov	r5,r21
   41c18:	9009883a 	mov	r4,r18
   41c1c:	00416980 	call	41698 <memmove>
   41c20:	b821883a 	mov	r16,r23
   41c24:	b027883a 	mov	r19,r22
   41c28:	003f8a06 	br	41a54 <_realloc_r+0x138>
   41c2c:	300b883a 	mov	r5,r6
   41c30:	dfc00917 	ldw	ra,36(sp)
   41c34:	df000817 	ldw	fp,32(sp)
   41c38:	ddc00717 	ldw	r23,28(sp)
   41c3c:	dd800617 	ldw	r22,24(sp)
   41c40:	dd400517 	ldw	r21,20(sp)
   41c44:	dd000417 	ldw	r20,16(sp)
   41c48:	dcc00317 	ldw	r19,12(sp)
   41c4c:	dc800217 	ldw	r18,8(sp)
   41c50:	dc400117 	ldw	r17,4(sp)
   41c54:	dc000017 	ldw	r16,0(sp)
   41c58:	dec00a04 	addi	sp,sp,40
   41c5c:	0040c601 	jmpi	40c60 <_malloc_r>
   41c60:	a8c00017 	ldw	r3,0(r21)
   41c64:	90c00015 	stw	r3,0(r18)
   41c68:	a8c00117 	ldw	r3,4(r21)
   41c6c:	90c00115 	stw	r3,4(r18)
   41c70:	00c006c4 	movi	r3,27
   41c74:	19804536 	bltu	r3,r6,41d8c <_realloc_r+0x470>
   41c78:	90800204 	addi	r2,r18,8
   41c7c:	a8c00204 	addi	r3,r21,8
   41c80:	003f6306 	br	41a10 <_realloc_r+0xf4>
   41c84:	9005883a 	mov	r2,r18
   41c88:	a8c00017 	ldw	r3,0(r21)
   41c8c:	b821883a 	mov	r16,r23
   41c90:	b027883a 	mov	r19,r22
   41c94:	10c00015 	stw	r3,0(r2)
   41c98:	a8c00117 	ldw	r3,4(r21)
   41c9c:	10c00115 	stw	r3,4(r2)
   41ca0:	a8c00217 	ldw	r3,8(r21)
   41ca4:	10c00215 	stw	r3,8(r2)
   41ca8:	003f6a06 	br	41a54 <_realloc_r+0x138>
   41cac:	9c67883a 	add	r19,r19,r17
   41cb0:	4445c83a 	sub	r2,r8,r17
   41cb4:	e4c00215 	stw	r19,8(fp)
   41cb8:	10800054 	ori	r2,r2,1
   41cbc:	98800115 	stw	r2,4(r19)
   41cc0:	a8bfff17 	ldw	r2,-4(r21)
   41cc4:	a009883a 	mov	r4,r20
   41cc8:	1080004c 	andi	r2,r2,1
   41ccc:	1462b03a 	or	r17,r2,r17
   41cd0:	ac7fff15 	stw	r17,-4(r21)
   41cd4:	00434780 	call	43478 <__malloc_unlock>
   41cd8:	a805883a 	mov	r2,r21
   41cdc:	003f6b06 	br	41a8c <_realloc_r+0x170>
   41ce0:	a80b883a 	mov	r5,r21
   41ce4:	9009883a 	mov	r4,r18
   41ce8:	00416980 	call	41698 <memmove>
   41cec:	003f4e06 	br	41a28 <_realloc_r+0x10c>
   41cf0:	89000404 	addi	r4,r17,16
   41cf4:	b93fbc16 	blt	r23,r4,41be8 <_realloc_r+0x2cc>
   41cf8:	b0800317 	ldw	r2,12(r22)
   41cfc:	b0c00217 	ldw	r3,8(r22)
   41d00:	81bfff04 	addi	r6,r16,-4
   41d04:	01000904 	movi	r4,36
   41d08:	18800315 	stw	r2,12(r3)
   41d0c:	10c00215 	stw	r3,8(r2)
   41d10:	b4800204 	addi	r18,r22,8
   41d14:	21804336 	bltu	r4,r6,41e24 <_realloc_r+0x508>
   41d18:	008004c4 	movi	r2,19
   41d1c:	11803f2e 	bgeu	r2,r6,41e1c <_realloc_r+0x500>
   41d20:	a8800017 	ldw	r2,0(r21)
   41d24:	b0800215 	stw	r2,8(r22)
   41d28:	a8800117 	ldw	r2,4(r21)
   41d2c:	b0800315 	stw	r2,12(r22)
   41d30:	008006c4 	movi	r2,27
   41d34:	11803f36 	bltu	r2,r6,41e34 <_realloc_r+0x518>
   41d38:	b0800404 	addi	r2,r22,16
   41d3c:	ad400204 	addi	r21,r21,8
   41d40:	a8c00017 	ldw	r3,0(r21)
   41d44:	10c00015 	stw	r3,0(r2)
   41d48:	a8c00117 	ldw	r3,4(r21)
   41d4c:	10c00115 	stw	r3,4(r2)
   41d50:	a8c00217 	ldw	r3,8(r21)
   41d54:	10c00215 	stw	r3,8(r2)
   41d58:	b447883a 	add	r3,r22,r17
   41d5c:	bc45c83a 	sub	r2,r23,r17
   41d60:	e0c00215 	stw	r3,8(fp)
   41d64:	10800054 	ori	r2,r2,1
   41d68:	18800115 	stw	r2,4(r3)
   41d6c:	b0800117 	ldw	r2,4(r22)
   41d70:	a009883a 	mov	r4,r20
   41d74:	1080004c 	andi	r2,r2,1
   41d78:	1462b03a 	or	r17,r2,r17
   41d7c:	b4400115 	stw	r17,4(r22)
   41d80:	00434780 	call	43478 <__malloc_unlock>
   41d84:	9005883a 	mov	r2,r18
   41d88:	003f4006 	br	41a8c <_realloc_r+0x170>
   41d8c:	a8c00217 	ldw	r3,8(r21)
   41d90:	90c00215 	stw	r3,8(r18)
   41d94:	a8c00317 	ldw	r3,12(r21)
   41d98:	90c00315 	stw	r3,12(r18)
   41d9c:	30801126 	beq	r6,r2,41de4 <_realloc_r+0x4c8>
   41da0:	90800404 	addi	r2,r18,16
   41da4:	a8c00404 	addi	r3,r21,16
   41da8:	003f1906 	br	41a10 <_realloc_r+0xf4>
   41dac:	90ffff17 	ldw	r3,-4(r18)
   41db0:	00bfff04 	movi	r2,-4
   41db4:	a825883a 	mov	r18,r21
   41db8:	1884703a 	and	r2,r3,r2
   41dbc:	80a1883a 	add	r16,r16,r2
   41dc0:	003f2406 	br	41a54 <_realloc_r+0x138>
   41dc4:	a8800217 	ldw	r2,8(r21)
   41dc8:	b0800415 	stw	r2,16(r22)
   41dcc:	a8800317 	ldw	r2,12(r21)
   41dd0:	b0800515 	stw	r2,20(r22)
   41dd4:	31000a26 	beq	r6,r4,41e00 <_realloc_r+0x4e4>
   41dd8:	b0800604 	addi	r2,r22,24
   41ddc:	ad400404 	addi	r21,r21,16
   41de0:	003fa906 	br	41c88 <_realloc_r+0x36c>
   41de4:	a9000417 	ldw	r4,16(r21)
   41de8:	90800604 	addi	r2,r18,24
   41dec:	a8c00604 	addi	r3,r21,24
   41df0:	91000415 	stw	r4,16(r18)
   41df4:	a9000517 	ldw	r4,20(r21)
   41df8:	91000515 	stw	r4,20(r18)
   41dfc:	003f0406 	br	41a10 <_realloc_r+0xf4>
   41e00:	a8c00417 	ldw	r3,16(r21)
   41e04:	ad400604 	addi	r21,r21,24
   41e08:	b0800804 	addi	r2,r22,32
   41e0c:	b0c00615 	stw	r3,24(r22)
   41e10:	a8ffff17 	ldw	r3,-4(r21)
   41e14:	b0c00715 	stw	r3,28(r22)
   41e18:	003f9b06 	br	41c88 <_realloc_r+0x36c>
   41e1c:	9005883a 	mov	r2,r18
   41e20:	003fc706 	br	41d40 <_realloc_r+0x424>
   41e24:	a80b883a 	mov	r5,r21
   41e28:	9009883a 	mov	r4,r18
   41e2c:	00416980 	call	41698 <memmove>
   41e30:	003fc906 	br	41d58 <_realloc_r+0x43c>
   41e34:	a8800217 	ldw	r2,8(r21)
   41e38:	b0800415 	stw	r2,16(r22)
   41e3c:	a8800317 	ldw	r2,12(r21)
   41e40:	b0800515 	stw	r2,20(r22)
   41e44:	31000726 	beq	r6,r4,41e64 <_realloc_r+0x548>
   41e48:	b0800604 	addi	r2,r22,24
   41e4c:	ad400404 	addi	r21,r21,16
   41e50:	003fbb06 	br	41d40 <_realloc_r+0x424>
   41e54:	a009883a 	mov	r4,r20
   41e58:	00434780 	call	43478 <__malloc_unlock>
   41e5c:	0005883a 	mov	r2,zero
   41e60:	003f0a06 	br	41a8c <_realloc_r+0x170>
   41e64:	a8c00417 	ldw	r3,16(r21)
   41e68:	ad400604 	addi	r21,r21,24
   41e6c:	b0800804 	addi	r2,r22,32
   41e70:	b0c00615 	stw	r3,24(r22)
   41e74:	a8ffff17 	ldw	r3,-4(r21)
   41e78:	b0c00715 	stw	r3,28(r22)
   41e7c:	003fb006 	br	41d40 <_realloc_r+0x424>

00041e80 <_sbrk_r>:
   41e80:	defffd04 	addi	sp,sp,-12
   41e84:	dc000015 	stw	r16,0(sp)
   41e88:	04000134 	movhi	r16,4
   41e8c:	dc400115 	stw	r17,4(sp)
   41e90:	84175a04 	addi	r16,r16,23912
   41e94:	2023883a 	mov	r17,r4
   41e98:	2809883a 	mov	r4,r5
   41e9c:	dfc00215 	stw	ra,8(sp)
   41ea0:	80000015 	stw	zero,0(r16)
   41ea4:	00436380 	call	43638 <sbrk>
   41ea8:	00ffffc4 	movi	r3,-1
   41eac:	10c00526 	beq	r2,r3,41ec4 <_sbrk_r+0x44>
   41eb0:	dfc00217 	ldw	ra,8(sp)
   41eb4:	dc400117 	ldw	r17,4(sp)
   41eb8:	dc000017 	ldw	r16,0(sp)
   41ebc:	dec00304 	addi	sp,sp,12
   41ec0:	f800283a 	ret
   41ec4:	80c00017 	ldw	r3,0(r16)
   41ec8:	183ff926 	beq	r3,zero,41eb0 <_sbrk_r+0x30>
   41ecc:	88c00015 	stw	r3,0(r17)
   41ed0:	003ff706 	br	41eb0 <_sbrk_r+0x30>

00041ed4 <__sread>:
   41ed4:	defffe04 	addi	sp,sp,-8
   41ed8:	dc000015 	stw	r16,0(sp)
   41edc:	2821883a 	mov	r16,r5
   41ee0:	2940038f 	ldh	r5,14(r5)
   41ee4:	dfc00115 	stw	ra,4(sp)
   41ee8:	0042c140 	call	42c14 <_read_r>
   41eec:	10000716 	blt	r2,zero,41f0c <__sread+0x38>
   41ef0:	80c01417 	ldw	r3,80(r16)
   41ef4:	1887883a 	add	r3,r3,r2
   41ef8:	80c01415 	stw	r3,80(r16)
   41efc:	dfc00117 	ldw	ra,4(sp)
   41f00:	dc000017 	ldw	r16,0(sp)
   41f04:	dec00204 	addi	sp,sp,8
   41f08:	f800283a 	ret
   41f0c:	80c0030b 	ldhu	r3,12(r16)
   41f10:	18fbffcc 	andi	r3,r3,61439
   41f14:	80c0030d 	sth	r3,12(r16)
   41f18:	dfc00117 	ldw	ra,4(sp)
   41f1c:	dc000017 	ldw	r16,0(sp)
   41f20:	dec00204 	addi	sp,sp,8
   41f24:	f800283a 	ret

00041f28 <__seofread>:
   41f28:	0005883a 	mov	r2,zero
   41f2c:	f800283a 	ret

00041f30 <__swrite>:
   41f30:	2880030b 	ldhu	r2,12(r5)
   41f34:	defffb04 	addi	sp,sp,-20
   41f38:	dcc00315 	stw	r19,12(sp)
   41f3c:	dc800215 	stw	r18,8(sp)
   41f40:	dc400115 	stw	r17,4(sp)
   41f44:	dc000015 	stw	r16,0(sp)
   41f48:	dfc00415 	stw	ra,16(sp)
   41f4c:	10c0400c 	andi	r3,r2,256
   41f50:	2821883a 	mov	r16,r5
   41f54:	2023883a 	mov	r17,r4
   41f58:	3025883a 	mov	r18,r6
   41f5c:	3827883a 	mov	r19,r7
   41f60:	18000526 	beq	r3,zero,41f78 <__swrite+0x48>
   41f64:	2940038f 	ldh	r5,14(r5)
   41f68:	01c00084 	movi	r7,2
   41f6c:	000d883a 	mov	r6,zero
   41f70:	00429f80 	call	429f8 <_lseek_r>
   41f74:	8080030b 	ldhu	r2,12(r16)
   41f78:	8140038f 	ldh	r5,14(r16)
   41f7c:	10bbffcc 	andi	r2,r2,61439
   41f80:	980f883a 	mov	r7,r19
   41f84:	900d883a 	mov	r6,r18
   41f88:	8809883a 	mov	r4,r17
   41f8c:	8080030d 	sth	r2,12(r16)
   41f90:	dfc00417 	ldw	ra,16(sp)
   41f94:	dcc00317 	ldw	r19,12(sp)
   41f98:	dc800217 	ldw	r18,8(sp)
   41f9c:	dc400117 	ldw	r17,4(sp)
   41fa0:	dc000017 	ldw	r16,0(sp)
   41fa4:	dec00504 	addi	sp,sp,20
   41fa8:	00420101 	jmpi	42010 <_write_r>

00041fac <__sseek>:
   41fac:	defffe04 	addi	sp,sp,-8
   41fb0:	dc000015 	stw	r16,0(sp)
   41fb4:	2821883a 	mov	r16,r5
   41fb8:	2940038f 	ldh	r5,14(r5)
   41fbc:	dfc00115 	stw	ra,4(sp)
   41fc0:	00429f80 	call	429f8 <_lseek_r>
   41fc4:	00ffffc4 	movi	r3,-1
   41fc8:	10c00826 	beq	r2,r3,41fec <__sseek+0x40>
   41fcc:	80c0030b 	ldhu	r3,12(r16)
   41fd0:	80801415 	stw	r2,80(r16)
   41fd4:	18c40014 	ori	r3,r3,4096
   41fd8:	80c0030d 	sth	r3,12(r16)
   41fdc:	dfc00117 	ldw	ra,4(sp)
   41fe0:	dc000017 	ldw	r16,0(sp)
   41fe4:	dec00204 	addi	sp,sp,8
   41fe8:	f800283a 	ret
   41fec:	80c0030b 	ldhu	r3,12(r16)
   41ff0:	18fbffcc 	andi	r3,r3,61439
   41ff4:	80c0030d 	sth	r3,12(r16)
   41ff8:	dfc00117 	ldw	ra,4(sp)
   41ffc:	dc000017 	ldw	r16,0(sp)
   42000:	dec00204 	addi	sp,sp,8
   42004:	f800283a 	ret

00042008 <__sclose>:
   42008:	2940038f 	ldh	r5,14(r5)
   4200c:	00421c41 	jmpi	421c4 <_close_r>

00042010 <_write_r>:
   42010:	defffd04 	addi	sp,sp,-12
   42014:	2805883a 	mov	r2,r5
   42018:	dc000015 	stw	r16,0(sp)
   4201c:	04000134 	movhi	r16,4
   42020:	dc400115 	stw	r17,4(sp)
   42024:	300b883a 	mov	r5,r6
   42028:	84175a04 	addi	r16,r16,23912
   4202c:	2023883a 	mov	r17,r4
   42030:	380d883a 	mov	r6,r7
   42034:	1009883a 	mov	r4,r2
   42038:	dfc00215 	stw	ra,8(sp)
   4203c:	80000015 	stw	zero,0(r16)
   42040:	00437540 	call	43754 <write>
   42044:	00ffffc4 	movi	r3,-1
   42048:	10c00526 	beq	r2,r3,42060 <_write_r+0x50>
   4204c:	dfc00217 	ldw	ra,8(sp)
   42050:	dc400117 	ldw	r17,4(sp)
   42054:	dc000017 	ldw	r16,0(sp)
   42058:	dec00304 	addi	sp,sp,12
   4205c:	f800283a 	ret
   42060:	80c00017 	ldw	r3,0(r16)
   42064:	183ff926 	beq	r3,zero,4204c <_write_r+0x3c>
   42068:	88c00015 	stw	r3,0(r17)
   4206c:	003ff706 	br	4204c <_write_r+0x3c>

00042070 <__swsetup_r>:
   42070:	00800134 	movhi	r2,4
   42074:	defffd04 	addi	sp,sp,-12
   42078:	1094c204 	addi	r2,r2,21256
   4207c:	dc400115 	stw	r17,4(sp)
   42080:	2023883a 	mov	r17,r4
   42084:	11000017 	ldw	r4,0(r2)
   42088:	dc000015 	stw	r16,0(sp)
   4208c:	dfc00215 	stw	ra,8(sp)
   42090:	2821883a 	mov	r16,r5
   42094:	20000226 	beq	r4,zero,420a0 <__swsetup_r+0x30>
   42098:	20800e17 	ldw	r2,56(r4)
   4209c:	10003126 	beq	r2,zero,42164 <__swsetup_r+0xf4>
   420a0:	8080030b 	ldhu	r2,12(r16)
   420a4:	10c0020c 	andi	r3,r2,8
   420a8:	1009883a 	mov	r4,r2
   420ac:	18000f26 	beq	r3,zero,420ec <__swsetup_r+0x7c>
   420b0:	80c00417 	ldw	r3,16(r16)
   420b4:	18001526 	beq	r3,zero,4210c <__swsetup_r+0x9c>
   420b8:	1100004c 	andi	r4,r2,1
   420bc:	20001c1e 	bne	r4,zero,42130 <__swsetup_r+0xc0>
   420c0:	1080008c 	andi	r2,r2,2
   420c4:	1000291e 	bne	r2,zero,4216c <__swsetup_r+0xfc>
   420c8:	80800517 	ldw	r2,20(r16)
   420cc:	80800215 	stw	r2,8(r16)
   420d0:	18001c26 	beq	r3,zero,42144 <__swsetup_r+0xd4>
   420d4:	0005883a 	mov	r2,zero
   420d8:	dfc00217 	ldw	ra,8(sp)
   420dc:	dc400117 	ldw	r17,4(sp)
   420e0:	dc000017 	ldw	r16,0(sp)
   420e4:	dec00304 	addi	sp,sp,12
   420e8:	f800283a 	ret
   420ec:	2080040c 	andi	r2,r4,16
   420f0:	10002e26 	beq	r2,zero,421ac <__swsetup_r+0x13c>
   420f4:	2080010c 	andi	r2,r4,4
   420f8:	10001e1e 	bne	r2,zero,42174 <__swsetup_r+0x104>
   420fc:	80c00417 	ldw	r3,16(r16)
   42100:	20800214 	ori	r2,r4,8
   42104:	8080030d 	sth	r2,12(r16)
   42108:	183feb1e 	bne	r3,zero,420b8 <__swsetup_r+0x48>
   4210c:	1100a00c 	andi	r4,r2,640
   42110:	01408004 	movi	r5,512
   42114:	217fe826 	beq	r4,r5,420b8 <__swsetup_r+0x48>
   42118:	800b883a 	mov	r5,r16
   4211c:	8809883a 	mov	r4,r17
   42120:	0042a580 	call	42a58 <__smakebuf_r>
   42124:	8080030b 	ldhu	r2,12(r16)
   42128:	80c00417 	ldw	r3,16(r16)
   4212c:	003fe206 	br	420b8 <__swsetup_r+0x48>
   42130:	80800517 	ldw	r2,20(r16)
   42134:	80000215 	stw	zero,8(r16)
   42138:	0085c83a 	sub	r2,zero,r2
   4213c:	80800615 	stw	r2,24(r16)
   42140:	183fe41e 	bne	r3,zero,420d4 <__swsetup_r+0x64>
   42144:	80c0030b 	ldhu	r3,12(r16)
   42148:	0005883a 	mov	r2,zero
   4214c:	1900200c 	andi	r4,r3,128
   42150:	203fe126 	beq	r4,zero,420d8 <__swsetup_r+0x68>
   42154:	18c01014 	ori	r3,r3,64
   42158:	80c0030d 	sth	r3,12(r16)
   4215c:	00bfffc4 	movi	r2,-1
   42160:	003fdd06 	br	420d8 <__swsetup_r+0x68>
   42164:	00405cc0 	call	405cc <__sinit>
   42168:	003fcd06 	br	420a0 <__swsetup_r+0x30>
   4216c:	0005883a 	mov	r2,zero
   42170:	003fd606 	br	420cc <__swsetup_r+0x5c>
   42174:	81400c17 	ldw	r5,48(r16)
   42178:	28000626 	beq	r5,zero,42194 <__swsetup_r+0x124>
   4217c:	80801004 	addi	r2,r16,64
   42180:	28800326 	beq	r5,r2,42190 <__swsetup_r+0x120>
   42184:	8809883a 	mov	r4,r17
   42188:	00426e80 	call	426e8 <_free_r>
   4218c:	8100030b 	ldhu	r4,12(r16)
   42190:	80000c15 	stw	zero,48(r16)
   42194:	80c00417 	ldw	r3,16(r16)
   42198:	00bff6c4 	movi	r2,-37
   4219c:	1108703a 	and	r4,r2,r4
   421a0:	80000115 	stw	zero,4(r16)
   421a4:	80c00015 	stw	r3,0(r16)
   421a8:	003fd506 	br	42100 <__swsetup_r+0x90>
   421ac:	00800244 	movi	r2,9
   421b0:	88800015 	stw	r2,0(r17)
   421b4:	20801014 	ori	r2,r4,64
   421b8:	8080030d 	sth	r2,12(r16)
   421bc:	00bfffc4 	movi	r2,-1
   421c0:	003fc506 	br	420d8 <__swsetup_r+0x68>

000421c4 <_close_r>:
   421c4:	defffd04 	addi	sp,sp,-12
   421c8:	dc000015 	stw	r16,0(sp)
   421cc:	04000134 	movhi	r16,4
   421d0:	dc400115 	stw	r17,4(sp)
   421d4:	84175a04 	addi	r16,r16,23912
   421d8:	2023883a 	mov	r17,r4
   421dc:	2809883a 	mov	r4,r5
   421e0:	dfc00215 	stw	ra,8(sp)
   421e4:	80000015 	stw	zero,0(r16)
   421e8:	0042f140 	call	42f14 <close>
   421ec:	00ffffc4 	movi	r3,-1
   421f0:	10c00526 	beq	r2,r3,42208 <_close_r+0x44>
   421f4:	dfc00217 	ldw	ra,8(sp)
   421f8:	dc400117 	ldw	r17,4(sp)
   421fc:	dc000017 	ldw	r16,0(sp)
   42200:	dec00304 	addi	sp,sp,12
   42204:	f800283a 	ret
   42208:	80c00017 	ldw	r3,0(r16)
   4220c:	183ff926 	beq	r3,zero,421f4 <_close_r+0x30>
   42210:	88c00015 	stw	r3,0(r17)
   42214:	003ff706 	br	421f4 <_close_r+0x30>

00042218 <_fclose_r>:
   42218:	28003926 	beq	r5,zero,42300 <_fclose_r+0xe8>
   4221c:	defffc04 	addi	sp,sp,-16
   42220:	dc400115 	stw	r17,4(sp)
   42224:	dc000015 	stw	r16,0(sp)
   42228:	dfc00315 	stw	ra,12(sp)
   4222c:	dc800215 	stw	r18,8(sp)
   42230:	2023883a 	mov	r17,r4
   42234:	2821883a 	mov	r16,r5
   42238:	20000226 	beq	r4,zero,42244 <_fclose_r+0x2c>
   4223c:	20800e17 	ldw	r2,56(r4)
   42240:	10002726 	beq	r2,zero,422e0 <_fclose_r+0xc8>
   42244:	8080030f 	ldh	r2,12(r16)
   42248:	1000071e 	bne	r2,zero,42268 <_fclose_r+0x50>
   4224c:	0005883a 	mov	r2,zero
   42250:	dfc00317 	ldw	ra,12(sp)
   42254:	dc800217 	ldw	r18,8(sp)
   42258:	dc400117 	ldw	r17,4(sp)
   4225c:	dc000017 	ldw	r16,0(sp)
   42260:	dec00404 	addi	sp,sp,16
   42264:	f800283a 	ret
   42268:	800b883a 	mov	r5,r16
   4226c:	8809883a 	mov	r4,r17
   42270:	004231c0 	call	4231c <__sflush_r>
   42274:	1025883a 	mov	r18,r2
   42278:	80800b17 	ldw	r2,44(r16)
   4227c:	10000426 	beq	r2,zero,42290 <_fclose_r+0x78>
   42280:	81400717 	ldw	r5,28(r16)
   42284:	8809883a 	mov	r4,r17
   42288:	103ee83a 	callr	r2
   4228c:	10001616 	blt	r2,zero,422e8 <_fclose_r+0xd0>
   42290:	8080030b 	ldhu	r2,12(r16)
   42294:	1080200c 	andi	r2,r2,128
   42298:	1000151e 	bne	r2,zero,422f0 <_fclose_r+0xd8>
   4229c:	81400c17 	ldw	r5,48(r16)
   422a0:	28000526 	beq	r5,zero,422b8 <_fclose_r+0xa0>
   422a4:	80801004 	addi	r2,r16,64
   422a8:	28800226 	beq	r5,r2,422b4 <_fclose_r+0x9c>
   422ac:	8809883a 	mov	r4,r17
   422b0:	00426e80 	call	426e8 <_free_r>
   422b4:	80000c15 	stw	zero,48(r16)
   422b8:	81401117 	ldw	r5,68(r16)
   422bc:	28000326 	beq	r5,zero,422cc <_fclose_r+0xb4>
   422c0:	8809883a 	mov	r4,r17
   422c4:	00426e80 	call	426e8 <_free_r>
   422c8:	80001115 	stw	zero,68(r16)
   422cc:	00405dc0 	call	405dc <__sfp_lock_acquire>
   422d0:	8000030d 	sth	zero,12(r16)
   422d4:	00405e00 	call	405e0 <__sfp_lock_release>
   422d8:	9005883a 	mov	r2,r18
   422dc:	003fdc06 	br	42250 <_fclose_r+0x38>
   422e0:	00405cc0 	call	405cc <__sinit>
   422e4:	003fd706 	br	42244 <_fclose_r+0x2c>
   422e8:	04bfffc4 	movi	r18,-1
   422ec:	003fe806 	br	42290 <_fclose_r+0x78>
   422f0:	81400417 	ldw	r5,16(r16)
   422f4:	8809883a 	mov	r4,r17
   422f8:	00426e80 	call	426e8 <_free_r>
   422fc:	003fe706 	br	4229c <_fclose_r+0x84>
   42300:	0005883a 	mov	r2,zero
   42304:	f800283a 	ret

00042308 <fclose>:
   42308:	00800134 	movhi	r2,4
   4230c:	1094c204 	addi	r2,r2,21256
   42310:	200b883a 	mov	r5,r4
   42314:	11000017 	ldw	r4,0(r2)
   42318:	00422181 	jmpi	42218 <_fclose_r>

0004231c <__sflush_r>:
   4231c:	2880030b 	ldhu	r2,12(r5)
   42320:	defffb04 	addi	sp,sp,-20
   42324:	dcc00315 	stw	r19,12(sp)
   42328:	dc400115 	stw	r17,4(sp)
   4232c:	dfc00415 	stw	ra,16(sp)
   42330:	dc800215 	stw	r18,8(sp)
   42334:	dc000015 	stw	r16,0(sp)
   42338:	10c0020c 	andi	r3,r2,8
   4233c:	2823883a 	mov	r17,r5
   42340:	2027883a 	mov	r19,r4
   42344:	1800311e 	bne	r3,zero,4240c <__sflush_r+0xf0>
   42348:	28c00117 	ldw	r3,4(r5)
   4234c:	10820014 	ori	r2,r2,2048
   42350:	2880030d 	sth	r2,12(r5)
   42354:	00c04b0e 	bge	zero,r3,42484 <__sflush_r+0x168>
   42358:	8a000a17 	ldw	r8,40(r17)
   4235c:	40002326 	beq	r8,zero,423ec <__sflush_r+0xd0>
   42360:	9c000017 	ldw	r16,0(r19)
   42364:	10c4000c 	andi	r3,r2,4096
   42368:	98000015 	stw	zero,0(r19)
   4236c:	18004826 	beq	r3,zero,42490 <__sflush_r+0x174>
   42370:	89801417 	ldw	r6,80(r17)
   42374:	10c0010c 	andi	r3,r2,4
   42378:	18000626 	beq	r3,zero,42394 <__sflush_r+0x78>
   4237c:	88c00117 	ldw	r3,4(r17)
   42380:	88800c17 	ldw	r2,48(r17)
   42384:	30cdc83a 	sub	r6,r6,r3
   42388:	10000226 	beq	r2,zero,42394 <__sflush_r+0x78>
   4238c:	88800f17 	ldw	r2,60(r17)
   42390:	308dc83a 	sub	r6,r6,r2
   42394:	89400717 	ldw	r5,28(r17)
   42398:	000f883a 	mov	r7,zero
   4239c:	9809883a 	mov	r4,r19
   423a0:	403ee83a 	callr	r8
   423a4:	00ffffc4 	movi	r3,-1
   423a8:	10c04426 	beq	r2,r3,424bc <__sflush_r+0x1a0>
   423ac:	88c0030b 	ldhu	r3,12(r17)
   423b0:	89000417 	ldw	r4,16(r17)
   423b4:	88000115 	stw	zero,4(r17)
   423b8:	197dffcc 	andi	r5,r3,63487
   423bc:	8940030d 	sth	r5,12(r17)
   423c0:	89000015 	stw	r4,0(r17)
   423c4:	18c4000c 	andi	r3,r3,4096
   423c8:	18002c1e 	bne	r3,zero,4247c <__sflush_r+0x160>
   423cc:	89400c17 	ldw	r5,48(r17)
   423d0:	9c000015 	stw	r16,0(r19)
   423d4:	28000526 	beq	r5,zero,423ec <__sflush_r+0xd0>
   423d8:	88801004 	addi	r2,r17,64
   423dc:	28800226 	beq	r5,r2,423e8 <__sflush_r+0xcc>
   423e0:	9809883a 	mov	r4,r19
   423e4:	00426e80 	call	426e8 <_free_r>
   423e8:	88000c15 	stw	zero,48(r17)
   423ec:	0005883a 	mov	r2,zero
   423f0:	dfc00417 	ldw	ra,16(sp)
   423f4:	dcc00317 	ldw	r19,12(sp)
   423f8:	dc800217 	ldw	r18,8(sp)
   423fc:	dc400117 	ldw	r17,4(sp)
   42400:	dc000017 	ldw	r16,0(sp)
   42404:	dec00504 	addi	sp,sp,20
   42408:	f800283a 	ret
   4240c:	2c800417 	ldw	r18,16(r5)
   42410:	903ff626 	beq	r18,zero,423ec <__sflush_r+0xd0>
   42414:	2c000017 	ldw	r16,0(r5)
   42418:	108000cc 	andi	r2,r2,3
   4241c:	2c800015 	stw	r18,0(r5)
   42420:	84a1c83a 	sub	r16,r16,r18
   42424:	1000131e 	bne	r2,zero,42474 <__sflush_r+0x158>
   42428:	28800517 	ldw	r2,20(r5)
   4242c:	88800215 	stw	r2,8(r17)
   42430:	04000316 	blt	zero,r16,42440 <__sflush_r+0x124>
   42434:	003fed06 	br	423ec <__sflush_r+0xd0>
   42438:	90a5883a 	add	r18,r18,r2
   4243c:	043feb0e 	bge	zero,r16,423ec <__sflush_r+0xd0>
   42440:	88800917 	ldw	r2,36(r17)
   42444:	89400717 	ldw	r5,28(r17)
   42448:	800f883a 	mov	r7,r16
   4244c:	900d883a 	mov	r6,r18
   42450:	9809883a 	mov	r4,r19
   42454:	103ee83a 	callr	r2
   42458:	80a1c83a 	sub	r16,r16,r2
   4245c:	00bff616 	blt	zero,r2,42438 <__sflush_r+0x11c>
   42460:	88c0030b 	ldhu	r3,12(r17)
   42464:	00bfffc4 	movi	r2,-1
   42468:	18c01014 	ori	r3,r3,64
   4246c:	88c0030d 	sth	r3,12(r17)
   42470:	003fdf06 	br	423f0 <__sflush_r+0xd4>
   42474:	0005883a 	mov	r2,zero
   42478:	003fec06 	br	4242c <__sflush_r+0x110>
   4247c:	88801415 	stw	r2,80(r17)
   42480:	003fd206 	br	423cc <__sflush_r+0xb0>
   42484:	28c00f17 	ldw	r3,60(r5)
   42488:	00ffb316 	blt	zero,r3,42358 <__sflush_r+0x3c>
   4248c:	003fd706 	br	423ec <__sflush_r+0xd0>
   42490:	89400717 	ldw	r5,28(r17)
   42494:	000d883a 	mov	r6,zero
   42498:	01c00044 	movi	r7,1
   4249c:	9809883a 	mov	r4,r19
   424a0:	403ee83a 	callr	r8
   424a4:	100d883a 	mov	r6,r2
   424a8:	00bfffc4 	movi	r2,-1
   424ac:	30801426 	beq	r6,r2,42500 <__sflush_r+0x1e4>
   424b0:	8880030b 	ldhu	r2,12(r17)
   424b4:	8a000a17 	ldw	r8,40(r17)
   424b8:	003fae06 	br	42374 <__sflush_r+0x58>
   424bc:	98c00017 	ldw	r3,0(r19)
   424c0:	183fba26 	beq	r3,zero,423ac <__sflush_r+0x90>
   424c4:	01000744 	movi	r4,29
   424c8:	19000626 	beq	r3,r4,424e4 <__sflush_r+0x1c8>
   424cc:	01000584 	movi	r4,22
   424d0:	19000426 	beq	r3,r4,424e4 <__sflush_r+0x1c8>
   424d4:	88c0030b 	ldhu	r3,12(r17)
   424d8:	18c01014 	ori	r3,r3,64
   424dc:	88c0030d 	sth	r3,12(r17)
   424e0:	003fc306 	br	423f0 <__sflush_r+0xd4>
   424e4:	8880030b 	ldhu	r2,12(r17)
   424e8:	88c00417 	ldw	r3,16(r17)
   424ec:	88000115 	stw	zero,4(r17)
   424f0:	10bdffcc 	andi	r2,r2,63487
   424f4:	8880030d 	sth	r2,12(r17)
   424f8:	88c00015 	stw	r3,0(r17)
   424fc:	003fb306 	br	423cc <__sflush_r+0xb0>
   42500:	98800017 	ldw	r2,0(r19)
   42504:	103fea26 	beq	r2,zero,424b0 <__sflush_r+0x194>
   42508:	00c00744 	movi	r3,29
   4250c:	10c00226 	beq	r2,r3,42518 <__sflush_r+0x1fc>
   42510:	00c00584 	movi	r3,22
   42514:	10c0031e 	bne	r2,r3,42524 <__sflush_r+0x208>
   42518:	9c000015 	stw	r16,0(r19)
   4251c:	0005883a 	mov	r2,zero
   42520:	003fb306 	br	423f0 <__sflush_r+0xd4>
   42524:	88c0030b 	ldhu	r3,12(r17)
   42528:	3005883a 	mov	r2,r6
   4252c:	18c01014 	ori	r3,r3,64
   42530:	88c0030d 	sth	r3,12(r17)
   42534:	003fae06 	br	423f0 <__sflush_r+0xd4>

00042538 <_fflush_r>:
   42538:	defffd04 	addi	sp,sp,-12
   4253c:	dc000115 	stw	r16,4(sp)
   42540:	dfc00215 	stw	ra,8(sp)
   42544:	2021883a 	mov	r16,r4
   42548:	20000226 	beq	r4,zero,42554 <_fflush_r+0x1c>
   4254c:	20800e17 	ldw	r2,56(r4)
   42550:	10000c26 	beq	r2,zero,42584 <_fflush_r+0x4c>
   42554:	2880030f 	ldh	r2,12(r5)
   42558:	1000051e 	bne	r2,zero,42570 <_fflush_r+0x38>
   4255c:	0005883a 	mov	r2,zero
   42560:	dfc00217 	ldw	ra,8(sp)
   42564:	dc000117 	ldw	r16,4(sp)
   42568:	dec00304 	addi	sp,sp,12
   4256c:	f800283a 	ret
   42570:	8009883a 	mov	r4,r16
   42574:	dfc00217 	ldw	ra,8(sp)
   42578:	dc000117 	ldw	r16,4(sp)
   4257c:	dec00304 	addi	sp,sp,12
   42580:	004231c1 	jmpi	4231c <__sflush_r>
   42584:	d9400015 	stw	r5,0(sp)
   42588:	00405cc0 	call	405cc <__sinit>
   4258c:	d9400017 	ldw	r5,0(sp)
   42590:	003ff006 	br	42554 <_fflush_r+0x1c>

00042594 <fflush>:
   42594:	20000526 	beq	r4,zero,425ac <fflush+0x18>
   42598:	00800134 	movhi	r2,4
   4259c:	1094c204 	addi	r2,r2,21256
   425a0:	200b883a 	mov	r5,r4
   425a4:	11000017 	ldw	r4,0(r2)
   425a8:	00425381 	jmpi	42538 <_fflush_r>
   425ac:	00800134 	movhi	r2,4
   425b0:	1094c104 	addi	r2,r2,21252
   425b4:	11000017 	ldw	r4,0(r2)
   425b8:	01400134 	movhi	r5,4
   425bc:	29494e04 	addi	r5,r5,9528
   425c0:	0040b9c1 	jmpi	40b9c <_fwalk_reent>

000425c4 <_malloc_trim_r>:
   425c4:	defffb04 	addi	sp,sp,-20
   425c8:	dcc00315 	stw	r19,12(sp)
   425cc:	04c00134 	movhi	r19,4
   425d0:	dc800215 	stw	r18,8(sp)
   425d4:	dc400115 	stw	r17,4(sp)
   425d8:	dc000015 	stw	r16,0(sp)
   425dc:	dfc00415 	stw	ra,16(sp)
   425e0:	2821883a 	mov	r16,r5
   425e4:	9cd34a04 	addi	r19,r19,19752
   425e8:	2025883a 	mov	r18,r4
   425ec:	00434540 	call	43454 <__malloc_lock>
   425f0:	98800217 	ldw	r2,8(r19)
   425f4:	14400117 	ldw	r17,4(r2)
   425f8:	00bfff04 	movi	r2,-4
   425fc:	88a2703a 	and	r17,r17,r2
   42600:	8c21c83a 	sub	r16,r17,r16
   42604:	8403fbc4 	addi	r16,r16,4079
   42608:	8020d33a 	srli	r16,r16,12
   4260c:	0083ffc4 	movi	r2,4095
   42610:	843fffc4 	addi	r16,r16,-1
   42614:	8020933a 	slli	r16,r16,12
   42618:	1400060e 	bge	r2,r16,42634 <_malloc_trim_r+0x70>
   4261c:	000b883a 	mov	r5,zero
   42620:	9009883a 	mov	r4,r18
   42624:	0041e800 	call	41e80 <_sbrk_r>
   42628:	98c00217 	ldw	r3,8(r19)
   4262c:	1c47883a 	add	r3,r3,r17
   42630:	10c00a26 	beq	r2,r3,4265c <_malloc_trim_r+0x98>
   42634:	9009883a 	mov	r4,r18
   42638:	00434780 	call	43478 <__malloc_unlock>
   4263c:	0005883a 	mov	r2,zero
   42640:	dfc00417 	ldw	ra,16(sp)
   42644:	dcc00317 	ldw	r19,12(sp)
   42648:	dc800217 	ldw	r18,8(sp)
   4264c:	dc400117 	ldw	r17,4(sp)
   42650:	dc000017 	ldw	r16,0(sp)
   42654:	dec00504 	addi	sp,sp,20
   42658:	f800283a 	ret
   4265c:	040bc83a 	sub	r5,zero,r16
   42660:	9009883a 	mov	r4,r18
   42664:	0041e800 	call	41e80 <_sbrk_r>
   42668:	00ffffc4 	movi	r3,-1
   4266c:	10c00d26 	beq	r2,r3,426a4 <_malloc_trim_r+0xe0>
   42670:	00c00134 	movhi	r3,4
   42674:	18d75e04 	addi	r3,r3,23928
   42678:	18800017 	ldw	r2,0(r3)
   4267c:	99000217 	ldw	r4,8(r19)
   42680:	8c23c83a 	sub	r17,r17,r16
   42684:	8c400054 	ori	r17,r17,1
   42688:	1421c83a 	sub	r16,r2,r16
   4268c:	24400115 	stw	r17,4(r4)
   42690:	9009883a 	mov	r4,r18
   42694:	1c000015 	stw	r16,0(r3)
   42698:	00434780 	call	43478 <__malloc_unlock>
   4269c:	00800044 	movi	r2,1
   426a0:	003fe706 	br	42640 <_malloc_trim_r+0x7c>
   426a4:	000b883a 	mov	r5,zero
   426a8:	9009883a 	mov	r4,r18
   426ac:	0041e800 	call	41e80 <_sbrk_r>
   426b0:	99000217 	ldw	r4,8(r19)
   426b4:	014003c4 	movi	r5,15
   426b8:	1107c83a 	sub	r3,r2,r4
   426bc:	28ffdd0e 	bge	r5,r3,42634 <_malloc_trim_r+0x70>
   426c0:	01400134 	movhi	r5,4
   426c4:	2954c304 	addi	r5,r5,21260
   426c8:	29400017 	ldw	r5,0(r5)
   426cc:	18c00054 	ori	r3,r3,1
   426d0:	20c00115 	stw	r3,4(r4)
   426d4:	00c00134 	movhi	r3,4
   426d8:	1145c83a 	sub	r2,r2,r5
   426dc:	18d75e04 	addi	r3,r3,23928
   426e0:	18800015 	stw	r2,0(r3)
   426e4:	003fd306 	br	42634 <_malloc_trim_r+0x70>

000426e8 <_free_r>:
   426e8:	28004126 	beq	r5,zero,427f0 <_free_r+0x108>
   426ec:	defffd04 	addi	sp,sp,-12
   426f0:	dc400115 	stw	r17,4(sp)
   426f4:	dc000015 	stw	r16,0(sp)
   426f8:	2023883a 	mov	r17,r4
   426fc:	2821883a 	mov	r16,r5
   42700:	dfc00215 	stw	ra,8(sp)
   42704:	00434540 	call	43454 <__malloc_lock>
   42708:	81ffff17 	ldw	r7,-4(r16)
   4270c:	00bfff84 	movi	r2,-2
   42710:	01000134 	movhi	r4,4
   42714:	81bffe04 	addi	r6,r16,-8
   42718:	3884703a 	and	r2,r7,r2
   4271c:	21134a04 	addi	r4,r4,19752
   42720:	308b883a 	add	r5,r6,r2
   42724:	2a400117 	ldw	r9,4(r5)
   42728:	22000217 	ldw	r8,8(r4)
   4272c:	00ffff04 	movi	r3,-4
   42730:	48c6703a 	and	r3,r9,r3
   42734:	2a005726 	beq	r5,r8,42894 <_free_r+0x1ac>
   42738:	28c00115 	stw	r3,4(r5)
   4273c:	39c0004c 	andi	r7,r7,1
   42740:	3800091e 	bne	r7,zero,42768 <_free_r+0x80>
   42744:	823ffe17 	ldw	r8,-8(r16)
   42748:	22400204 	addi	r9,r4,8
   4274c:	320dc83a 	sub	r6,r6,r8
   42750:	31c00217 	ldw	r7,8(r6)
   42754:	1205883a 	add	r2,r2,r8
   42758:	3a406526 	beq	r7,r9,428f0 <_free_r+0x208>
   4275c:	32000317 	ldw	r8,12(r6)
   42760:	3a000315 	stw	r8,12(r7)
   42764:	41c00215 	stw	r7,8(r8)
   42768:	28cf883a 	add	r7,r5,r3
   4276c:	39c00117 	ldw	r7,4(r7)
   42770:	39c0004c 	andi	r7,r7,1
   42774:	38003a26 	beq	r7,zero,42860 <_free_r+0x178>
   42778:	10c00054 	ori	r3,r2,1
   4277c:	30c00115 	stw	r3,4(r6)
   42780:	3087883a 	add	r3,r6,r2
   42784:	18800015 	stw	r2,0(r3)
   42788:	00c07fc4 	movi	r3,511
   4278c:	18801936 	bltu	r3,r2,427f4 <_free_r+0x10c>
   42790:	1004d0fa 	srli	r2,r2,3
   42794:	01c00044 	movi	r7,1
   42798:	21400117 	ldw	r5,4(r4)
   4279c:	10c00044 	addi	r3,r2,1
   427a0:	18c7883a 	add	r3,r3,r3
   427a4:	1005d0ba 	srai	r2,r2,2
   427a8:	18c7883a 	add	r3,r3,r3
   427ac:	18c7883a 	add	r3,r3,r3
   427b0:	1907883a 	add	r3,r3,r4
   427b4:	3884983a 	sll	r2,r7,r2
   427b8:	19c00017 	ldw	r7,0(r3)
   427bc:	1a3ffe04 	addi	r8,r3,-8
   427c0:	1144b03a 	or	r2,r2,r5
   427c4:	32000315 	stw	r8,12(r6)
   427c8:	31c00215 	stw	r7,8(r6)
   427cc:	20800115 	stw	r2,4(r4)
   427d0:	19800015 	stw	r6,0(r3)
   427d4:	39800315 	stw	r6,12(r7)
   427d8:	8809883a 	mov	r4,r17
   427dc:	dfc00217 	ldw	ra,8(sp)
   427e0:	dc400117 	ldw	r17,4(sp)
   427e4:	dc000017 	ldw	r16,0(sp)
   427e8:	dec00304 	addi	sp,sp,12
   427ec:	00434781 	jmpi	43478 <__malloc_unlock>
   427f0:	f800283a 	ret
   427f4:	100ad27a 	srli	r5,r2,9
   427f8:	00c00104 	movi	r3,4
   427fc:	19404a36 	bltu	r3,r5,42928 <_free_r+0x240>
   42800:	100ad1ba 	srli	r5,r2,6
   42804:	28c00e44 	addi	r3,r5,57
   42808:	18c7883a 	add	r3,r3,r3
   4280c:	29400e04 	addi	r5,r5,56
   42810:	18c7883a 	add	r3,r3,r3
   42814:	18c7883a 	add	r3,r3,r3
   42818:	1909883a 	add	r4,r3,r4
   4281c:	20c00017 	ldw	r3,0(r4)
   42820:	01c00134 	movhi	r7,4
   42824:	213ffe04 	addi	r4,r4,-8
   42828:	39d34a04 	addi	r7,r7,19752
   4282c:	20c04426 	beq	r4,r3,42940 <_free_r+0x258>
   42830:	01ffff04 	movi	r7,-4
   42834:	19400117 	ldw	r5,4(r3)
   42838:	29ca703a 	and	r5,r5,r7
   4283c:	1140022e 	bgeu	r2,r5,42848 <_free_r+0x160>
   42840:	18c00217 	ldw	r3,8(r3)
   42844:	20fffb1e 	bne	r4,r3,42834 <_free_r+0x14c>
   42848:	19000317 	ldw	r4,12(r3)
   4284c:	31000315 	stw	r4,12(r6)
   42850:	30c00215 	stw	r3,8(r6)
   42854:	21800215 	stw	r6,8(r4)
   42858:	19800315 	stw	r6,12(r3)
   4285c:	003fde06 	br	427d8 <_free_r+0xf0>
   42860:	29c00217 	ldw	r7,8(r5)
   42864:	10c5883a 	add	r2,r2,r3
   42868:	00c00134 	movhi	r3,4
   4286c:	18d34c04 	addi	r3,r3,19760
   42870:	38c03b26 	beq	r7,r3,42960 <_free_r+0x278>
   42874:	2a000317 	ldw	r8,12(r5)
   42878:	11400054 	ori	r5,r2,1
   4287c:	3087883a 	add	r3,r6,r2
   42880:	3a000315 	stw	r8,12(r7)
   42884:	41c00215 	stw	r7,8(r8)
   42888:	31400115 	stw	r5,4(r6)
   4288c:	18800015 	stw	r2,0(r3)
   42890:	003fbd06 	br	42788 <_free_r+0xa0>
   42894:	39c0004c 	andi	r7,r7,1
   42898:	10c5883a 	add	r2,r2,r3
   4289c:	3800071e 	bne	r7,zero,428bc <_free_r+0x1d4>
   428a0:	81fffe17 	ldw	r7,-8(r16)
   428a4:	31cdc83a 	sub	r6,r6,r7
   428a8:	30c00317 	ldw	r3,12(r6)
   428ac:	31400217 	ldw	r5,8(r6)
   428b0:	11c5883a 	add	r2,r2,r7
   428b4:	28c00315 	stw	r3,12(r5)
   428b8:	19400215 	stw	r5,8(r3)
   428bc:	10c00054 	ori	r3,r2,1
   428c0:	30c00115 	stw	r3,4(r6)
   428c4:	00c00134 	movhi	r3,4
   428c8:	18d4c404 	addi	r3,r3,21264
   428cc:	18c00017 	ldw	r3,0(r3)
   428d0:	21800215 	stw	r6,8(r4)
   428d4:	10ffc036 	bltu	r2,r3,427d8 <_free_r+0xf0>
   428d8:	00800134 	movhi	r2,4
   428dc:	10975904 	addi	r2,r2,23908
   428e0:	11400017 	ldw	r5,0(r2)
   428e4:	8809883a 	mov	r4,r17
   428e8:	00425c40 	call	425c4 <_malloc_trim_r>
   428ec:	003fba06 	br	427d8 <_free_r+0xf0>
   428f0:	28c9883a 	add	r4,r5,r3
   428f4:	21000117 	ldw	r4,4(r4)
   428f8:	2100004c 	andi	r4,r4,1
   428fc:	2000391e 	bne	r4,zero,429e4 <_free_r+0x2fc>
   42900:	29c00217 	ldw	r7,8(r5)
   42904:	29000317 	ldw	r4,12(r5)
   42908:	1885883a 	add	r2,r3,r2
   4290c:	10c00054 	ori	r3,r2,1
   42910:	39000315 	stw	r4,12(r7)
   42914:	21c00215 	stw	r7,8(r4)
   42918:	30c00115 	stw	r3,4(r6)
   4291c:	308d883a 	add	r6,r6,r2
   42920:	30800015 	stw	r2,0(r6)
   42924:	003fac06 	br	427d8 <_free_r+0xf0>
   42928:	00c00504 	movi	r3,20
   4292c:	19401536 	bltu	r3,r5,42984 <_free_r+0x29c>
   42930:	28c01704 	addi	r3,r5,92
   42934:	18c7883a 	add	r3,r3,r3
   42938:	294016c4 	addi	r5,r5,91
   4293c:	003fb406 	br	42810 <_free_r+0x128>
   42940:	280bd0ba 	srai	r5,r5,2
   42944:	00c00044 	movi	r3,1
   42948:	38800117 	ldw	r2,4(r7)
   4294c:	194a983a 	sll	r5,r3,r5
   42950:	2007883a 	mov	r3,r4
   42954:	2884b03a 	or	r2,r5,r2
   42958:	38800115 	stw	r2,4(r7)
   4295c:	003fbb06 	br	4284c <_free_r+0x164>
   42960:	21800515 	stw	r6,20(r4)
   42964:	21800415 	stw	r6,16(r4)
   42968:	10c00054 	ori	r3,r2,1
   4296c:	31c00315 	stw	r7,12(r6)
   42970:	31c00215 	stw	r7,8(r6)
   42974:	30c00115 	stw	r3,4(r6)
   42978:	308d883a 	add	r6,r6,r2
   4297c:	30800015 	stw	r2,0(r6)
   42980:	003f9506 	br	427d8 <_free_r+0xf0>
   42984:	00c01504 	movi	r3,84
   42988:	19400536 	bltu	r3,r5,429a0 <_free_r+0x2b8>
   4298c:	100ad33a 	srli	r5,r2,12
   42990:	28c01bc4 	addi	r3,r5,111
   42994:	18c7883a 	add	r3,r3,r3
   42998:	29401b84 	addi	r5,r5,110
   4299c:	003f9c06 	br	42810 <_free_r+0x128>
   429a0:	00c05504 	movi	r3,340
   429a4:	19400536 	bltu	r3,r5,429bc <_free_r+0x2d4>
   429a8:	100ad3fa 	srli	r5,r2,15
   429ac:	28c01e04 	addi	r3,r5,120
   429b0:	18c7883a 	add	r3,r3,r3
   429b4:	29401dc4 	addi	r5,r5,119
   429b8:	003f9506 	br	42810 <_free_r+0x128>
   429bc:	00c15504 	movi	r3,1364
   429c0:	19400536 	bltu	r3,r5,429d8 <_free_r+0x2f0>
   429c4:	100ad4ba 	srli	r5,r2,18
   429c8:	28c01f44 	addi	r3,r5,125
   429cc:	18c7883a 	add	r3,r3,r3
   429d0:	29401f04 	addi	r5,r5,124
   429d4:	003f8e06 	br	42810 <_free_r+0x128>
   429d8:	00c03f84 	movi	r3,254
   429dc:	01401f84 	movi	r5,126
   429e0:	003f8b06 	br	42810 <_free_r+0x128>
   429e4:	10c00054 	ori	r3,r2,1
   429e8:	30c00115 	stw	r3,4(r6)
   429ec:	308d883a 	add	r6,r6,r2
   429f0:	30800015 	stw	r2,0(r6)
   429f4:	003f7806 	br	427d8 <_free_r+0xf0>

000429f8 <_lseek_r>:
   429f8:	defffd04 	addi	sp,sp,-12
   429fc:	2805883a 	mov	r2,r5
   42a00:	dc000015 	stw	r16,0(sp)
   42a04:	04000134 	movhi	r16,4
   42a08:	dc400115 	stw	r17,4(sp)
   42a0c:	300b883a 	mov	r5,r6
   42a10:	84175a04 	addi	r16,r16,23912
   42a14:	2023883a 	mov	r17,r4
   42a18:	380d883a 	mov	r6,r7
   42a1c:	1009883a 	mov	r4,r2
   42a20:	dfc00215 	stw	ra,8(sp)
   42a24:	80000015 	stw	zero,0(r16)
   42a28:	00433040 	call	43304 <lseek>
   42a2c:	00ffffc4 	movi	r3,-1
   42a30:	10c00526 	beq	r2,r3,42a48 <_lseek_r+0x50>
   42a34:	dfc00217 	ldw	ra,8(sp)
   42a38:	dc400117 	ldw	r17,4(sp)
   42a3c:	dc000017 	ldw	r16,0(sp)
   42a40:	dec00304 	addi	sp,sp,12
   42a44:	f800283a 	ret
   42a48:	80c00017 	ldw	r3,0(r16)
   42a4c:	183ff926 	beq	r3,zero,42a34 <_lseek_r+0x3c>
   42a50:	88c00015 	stw	r3,0(r17)
   42a54:	003ff706 	br	42a34 <_lseek_r+0x3c>

00042a58 <__smakebuf_r>:
   42a58:	2880030b 	ldhu	r2,12(r5)
   42a5c:	10c0008c 	andi	r3,r2,2
   42a60:	1800411e 	bne	r3,zero,42b68 <__smakebuf_r+0x110>
   42a64:	deffec04 	addi	sp,sp,-80
   42a68:	dc000f15 	stw	r16,60(sp)
   42a6c:	2821883a 	mov	r16,r5
   42a70:	2940038f 	ldh	r5,14(r5)
   42a74:	dc401015 	stw	r17,64(sp)
   42a78:	dfc01315 	stw	ra,76(sp)
   42a7c:	dcc01215 	stw	r19,72(sp)
   42a80:	dc801115 	stw	r18,68(sp)
   42a84:	2023883a 	mov	r17,r4
   42a88:	28001c16 	blt	r5,zero,42afc <__smakebuf_r+0xa4>
   42a8c:	d80d883a 	mov	r6,sp
   42a90:	0042c740 	call	42c74 <_fstat_r>
   42a94:	10001816 	blt	r2,zero,42af8 <__smakebuf_r+0xa0>
   42a98:	d8800117 	ldw	r2,4(sp)
   42a9c:	00e00014 	movui	r3,32768
   42aa0:	10bc000c 	andi	r2,r2,61440
   42aa4:	14c80020 	cmpeqi	r19,r2,8192
   42aa8:	10c03726 	beq	r2,r3,42b88 <__smakebuf_r+0x130>
   42aac:	80c0030b 	ldhu	r3,12(r16)
   42ab0:	18c20014 	ori	r3,r3,2048
   42ab4:	80c0030d 	sth	r3,12(r16)
   42ab8:	00c80004 	movi	r3,8192
   42abc:	10c0521e 	bne	r2,r3,42c08 <__smakebuf_r+0x1b0>
   42ac0:	8140038f 	ldh	r5,14(r16)
   42ac4:	8809883a 	mov	r4,r17
   42ac8:	0042cd00 	call	42cd0 <_isatty_r>
   42acc:	10004c26 	beq	r2,zero,42c00 <__smakebuf_r+0x1a8>
   42ad0:	8080030b 	ldhu	r2,12(r16)
   42ad4:	80c010c4 	addi	r3,r16,67
   42ad8:	80c00015 	stw	r3,0(r16)
   42adc:	10800054 	ori	r2,r2,1
   42ae0:	8080030d 	sth	r2,12(r16)
   42ae4:	00800044 	movi	r2,1
   42ae8:	80c00415 	stw	r3,16(r16)
   42aec:	80800515 	stw	r2,20(r16)
   42af0:	04810004 	movi	r18,1024
   42af4:	00000706 	br	42b14 <__smakebuf_r+0xbc>
   42af8:	8080030b 	ldhu	r2,12(r16)
   42afc:	10c0200c 	andi	r3,r2,128
   42b00:	18001f1e 	bne	r3,zero,42b80 <__smakebuf_r+0x128>
   42b04:	04810004 	movi	r18,1024
   42b08:	10820014 	ori	r2,r2,2048
   42b0c:	8080030d 	sth	r2,12(r16)
   42b10:	0027883a 	mov	r19,zero
   42b14:	900b883a 	mov	r5,r18
   42b18:	8809883a 	mov	r4,r17
   42b1c:	0040c600 	call	40c60 <_malloc_r>
   42b20:	10002c26 	beq	r2,zero,42bd4 <__smakebuf_r+0x17c>
   42b24:	80c0030b 	ldhu	r3,12(r16)
   42b28:	01000134 	movhi	r4,4
   42b2c:	2100a104 	addi	r4,r4,644
   42b30:	89000f15 	stw	r4,60(r17)
   42b34:	18c02014 	ori	r3,r3,128
   42b38:	80c0030d 	sth	r3,12(r16)
   42b3c:	80800015 	stw	r2,0(r16)
   42b40:	80800415 	stw	r2,16(r16)
   42b44:	84800515 	stw	r18,20(r16)
   42b48:	98001a1e 	bne	r19,zero,42bb4 <__smakebuf_r+0x15c>
   42b4c:	dfc01317 	ldw	ra,76(sp)
   42b50:	dcc01217 	ldw	r19,72(sp)
   42b54:	dc801117 	ldw	r18,68(sp)
   42b58:	dc401017 	ldw	r17,64(sp)
   42b5c:	dc000f17 	ldw	r16,60(sp)
   42b60:	dec01404 	addi	sp,sp,80
   42b64:	f800283a 	ret
   42b68:	288010c4 	addi	r2,r5,67
   42b6c:	28800015 	stw	r2,0(r5)
   42b70:	28800415 	stw	r2,16(r5)
   42b74:	00800044 	movi	r2,1
   42b78:	28800515 	stw	r2,20(r5)
   42b7c:	f800283a 	ret
   42b80:	04801004 	movi	r18,64
   42b84:	003fe006 	br	42b08 <__smakebuf_r+0xb0>
   42b88:	81000a17 	ldw	r4,40(r16)
   42b8c:	00c00134 	movhi	r3,4
   42b90:	18c7eb04 	addi	r3,r3,8108
   42b94:	20ffc51e 	bne	r4,r3,42aac <__smakebuf_r+0x54>
   42b98:	8080030b 	ldhu	r2,12(r16)
   42b9c:	04810004 	movi	r18,1024
   42ba0:	84801315 	stw	r18,76(r16)
   42ba4:	1484b03a 	or	r2,r2,r18
   42ba8:	8080030d 	sth	r2,12(r16)
   42bac:	0027883a 	mov	r19,zero
   42bb0:	003fd806 	br	42b14 <__smakebuf_r+0xbc>
   42bb4:	8140038f 	ldh	r5,14(r16)
   42bb8:	8809883a 	mov	r4,r17
   42bbc:	0042cd00 	call	42cd0 <_isatty_r>
   42bc0:	103fe226 	beq	r2,zero,42b4c <__smakebuf_r+0xf4>
   42bc4:	8080030b 	ldhu	r2,12(r16)
   42bc8:	10800054 	ori	r2,r2,1
   42bcc:	8080030d 	sth	r2,12(r16)
   42bd0:	003fde06 	br	42b4c <__smakebuf_r+0xf4>
   42bd4:	8080030b 	ldhu	r2,12(r16)
   42bd8:	10c0800c 	andi	r3,r2,512
   42bdc:	183fdb1e 	bne	r3,zero,42b4c <__smakebuf_r+0xf4>
   42be0:	10800094 	ori	r2,r2,2
   42be4:	80c010c4 	addi	r3,r16,67
   42be8:	8080030d 	sth	r2,12(r16)
   42bec:	00800044 	movi	r2,1
   42bf0:	80c00015 	stw	r3,0(r16)
   42bf4:	80c00415 	stw	r3,16(r16)
   42bf8:	80800515 	stw	r2,20(r16)
   42bfc:	003fd306 	br	42b4c <__smakebuf_r+0xf4>
   42c00:	04810004 	movi	r18,1024
   42c04:	003fc306 	br	42b14 <__smakebuf_r+0xbc>
   42c08:	0027883a 	mov	r19,zero
   42c0c:	04810004 	movi	r18,1024
   42c10:	003fc006 	br	42b14 <__smakebuf_r+0xbc>

00042c14 <_read_r>:
   42c14:	defffd04 	addi	sp,sp,-12
   42c18:	2805883a 	mov	r2,r5
   42c1c:	dc000015 	stw	r16,0(sp)
   42c20:	04000134 	movhi	r16,4
   42c24:	dc400115 	stw	r17,4(sp)
   42c28:	300b883a 	mov	r5,r6
   42c2c:	84175a04 	addi	r16,r16,23912
   42c30:	2023883a 	mov	r17,r4
   42c34:	380d883a 	mov	r6,r7
   42c38:	1009883a 	mov	r4,r2
   42c3c:	dfc00215 	stw	ra,8(sp)
   42c40:	80000015 	stw	zero,0(r16)
   42c44:	00434d80 	call	434d8 <read>
   42c48:	00ffffc4 	movi	r3,-1
   42c4c:	10c00526 	beq	r2,r3,42c64 <_read_r+0x50>
   42c50:	dfc00217 	ldw	ra,8(sp)
   42c54:	dc400117 	ldw	r17,4(sp)
   42c58:	dc000017 	ldw	r16,0(sp)
   42c5c:	dec00304 	addi	sp,sp,12
   42c60:	f800283a 	ret
   42c64:	80c00017 	ldw	r3,0(r16)
   42c68:	183ff926 	beq	r3,zero,42c50 <_read_r+0x3c>
   42c6c:	88c00015 	stw	r3,0(r17)
   42c70:	003ff706 	br	42c50 <_read_r+0x3c>

00042c74 <_fstat_r>:
   42c74:	defffd04 	addi	sp,sp,-12
   42c78:	2805883a 	mov	r2,r5
   42c7c:	dc000015 	stw	r16,0(sp)
   42c80:	04000134 	movhi	r16,4
   42c84:	dc400115 	stw	r17,4(sp)
   42c88:	84175a04 	addi	r16,r16,23912
   42c8c:	2023883a 	mov	r17,r4
   42c90:	300b883a 	mov	r5,r6
   42c94:	1009883a 	mov	r4,r2
   42c98:	dfc00215 	stw	ra,8(sp)
   42c9c:	80000015 	stw	zero,0(r16)
   42ca0:	004304c0 	call	4304c <fstat>
   42ca4:	00ffffc4 	movi	r3,-1
   42ca8:	10c00526 	beq	r2,r3,42cc0 <_fstat_r+0x4c>
   42cac:	dfc00217 	ldw	ra,8(sp)
   42cb0:	dc400117 	ldw	r17,4(sp)
   42cb4:	dc000017 	ldw	r16,0(sp)
   42cb8:	dec00304 	addi	sp,sp,12
   42cbc:	f800283a 	ret
   42cc0:	80c00017 	ldw	r3,0(r16)
   42cc4:	183ff926 	beq	r3,zero,42cac <_fstat_r+0x38>
   42cc8:	88c00015 	stw	r3,0(r17)
   42ccc:	003ff706 	br	42cac <_fstat_r+0x38>

00042cd0 <_isatty_r>:
   42cd0:	defffd04 	addi	sp,sp,-12
   42cd4:	dc000015 	stw	r16,0(sp)
   42cd8:	04000134 	movhi	r16,4
   42cdc:	dc400115 	stw	r17,4(sp)
   42ce0:	84175a04 	addi	r16,r16,23912
   42ce4:	2023883a 	mov	r17,r4
   42ce8:	2809883a 	mov	r4,r5
   42cec:	dfc00215 	stw	ra,8(sp)
   42cf0:	80000015 	stw	zero,0(r16)
   42cf4:	00431380 	call	43138 <isatty>
   42cf8:	00ffffc4 	movi	r3,-1
   42cfc:	10c00526 	beq	r2,r3,42d14 <_isatty_r+0x44>
   42d00:	dfc00217 	ldw	ra,8(sp)
   42d04:	dc400117 	ldw	r17,4(sp)
   42d08:	dc000017 	ldw	r16,0(sp)
   42d0c:	dec00304 	addi	sp,sp,12
   42d10:	f800283a 	ret
   42d14:	80c00017 	ldw	r3,0(r16)
   42d18:	183ff926 	beq	r3,zero,42d00 <_isatty_r+0x30>
   42d1c:	88c00015 	stw	r3,0(r17)
   42d20:	003ff706 	br	42d00 <_isatty_r+0x30>

00042d24 <__divsi3>:
   42d24:	20001b16 	blt	r4,zero,42d94 <__divsi3+0x70>
   42d28:	000f883a 	mov	r7,zero
   42d2c:	28001616 	blt	r5,zero,42d88 <__divsi3+0x64>
   42d30:	200d883a 	mov	r6,r4
   42d34:	29001a2e 	bgeu	r5,r4,42da0 <__divsi3+0x7c>
   42d38:	00800804 	movi	r2,32
   42d3c:	00c00044 	movi	r3,1
   42d40:	00000106 	br	42d48 <__divsi3+0x24>
   42d44:	10000d26 	beq	r2,zero,42d7c <__divsi3+0x58>
   42d48:	294b883a 	add	r5,r5,r5
   42d4c:	10bfffc4 	addi	r2,r2,-1
   42d50:	18c7883a 	add	r3,r3,r3
   42d54:	293ffb36 	bltu	r5,r4,42d44 <__divsi3+0x20>
   42d58:	0005883a 	mov	r2,zero
   42d5c:	18000726 	beq	r3,zero,42d7c <__divsi3+0x58>
   42d60:	0005883a 	mov	r2,zero
   42d64:	31400236 	bltu	r6,r5,42d70 <__divsi3+0x4c>
   42d68:	314dc83a 	sub	r6,r6,r5
   42d6c:	10c4b03a 	or	r2,r2,r3
   42d70:	1806d07a 	srli	r3,r3,1
   42d74:	280ad07a 	srli	r5,r5,1
   42d78:	183ffa1e 	bne	r3,zero,42d64 <__divsi3+0x40>
   42d7c:	38000126 	beq	r7,zero,42d84 <__divsi3+0x60>
   42d80:	0085c83a 	sub	r2,zero,r2
   42d84:	f800283a 	ret
   42d88:	014bc83a 	sub	r5,zero,r5
   42d8c:	39c0005c 	xori	r7,r7,1
   42d90:	003fe706 	br	42d30 <__divsi3+0xc>
   42d94:	0109c83a 	sub	r4,zero,r4
   42d98:	01c00044 	movi	r7,1
   42d9c:	003fe306 	br	42d2c <__divsi3+0x8>
   42da0:	00c00044 	movi	r3,1
   42da4:	003fee06 	br	42d60 <__divsi3+0x3c>

00042da8 <__modsi3>:
   42da8:	20001716 	blt	r4,zero,42e08 <__modsi3+0x60>
   42dac:	000f883a 	mov	r7,zero
   42db0:	2005883a 	mov	r2,r4
   42db4:	28001216 	blt	r5,zero,42e00 <__modsi3+0x58>
   42db8:	2900162e 	bgeu	r5,r4,42e14 <__modsi3+0x6c>
   42dbc:	01800804 	movi	r6,32
   42dc0:	00c00044 	movi	r3,1
   42dc4:	00000106 	br	42dcc <__modsi3+0x24>
   42dc8:	30000a26 	beq	r6,zero,42df4 <__modsi3+0x4c>
   42dcc:	294b883a 	add	r5,r5,r5
   42dd0:	31bfffc4 	addi	r6,r6,-1
   42dd4:	18c7883a 	add	r3,r3,r3
   42dd8:	293ffb36 	bltu	r5,r4,42dc8 <__modsi3+0x20>
   42ddc:	18000526 	beq	r3,zero,42df4 <__modsi3+0x4c>
   42de0:	1806d07a 	srli	r3,r3,1
   42de4:	11400136 	bltu	r2,r5,42dec <__modsi3+0x44>
   42de8:	1145c83a 	sub	r2,r2,r5
   42dec:	280ad07a 	srli	r5,r5,1
   42df0:	183ffb1e 	bne	r3,zero,42de0 <__modsi3+0x38>
   42df4:	38000126 	beq	r7,zero,42dfc <__modsi3+0x54>
   42df8:	0085c83a 	sub	r2,zero,r2
   42dfc:	f800283a 	ret
   42e00:	014bc83a 	sub	r5,zero,r5
   42e04:	003fec06 	br	42db8 <__modsi3+0x10>
   42e08:	0109c83a 	sub	r4,zero,r4
   42e0c:	01c00044 	movi	r7,1
   42e10:	003fe706 	br	42db0 <__modsi3+0x8>
   42e14:	00c00044 	movi	r3,1
   42e18:	003ff106 	br	42de0 <__modsi3+0x38>

00042e1c <__udivsi3>:
   42e1c:	200d883a 	mov	r6,r4
   42e20:	2900152e 	bgeu	r5,r4,42e78 <__udivsi3+0x5c>
   42e24:	28001416 	blt	r5,zero,42e78 <__udivsi3+0x5c>
   42e28:	00800804 	movi	r2,32
   42e2c:	00c00044 	movi	r3,1
   42e30:	00000206 	br	42e3c <__udivsi3+0x20>
   42e34:	10000e26 	beq	r2,zero,42e70 <__udivsi3+0x54>
   42e38:	28000516 	blt	r5,zero,42e50 <__udivsi3+0x34>
   42e3c:	294b883a 	add	r5,r5,r5
   42e40:	10bfffc4 	addi	r2,r2,-1
   42e44:	18c7883a 	add	r3,r3,r3
   42e48:	293ffa36 	bltu	r5,r4,42e34 <__udivsi3+0x18>
   42e4c:	18000826 	beq	r3,zero,42e70 <__udivsi3+0x54>
   42e50:	0005883a 	mov	r2,zero
   42e54:	31400236 	bltu	r6,r5,42e60 <__udivsi3+0x44>
   42e58:	314dc83a 	sub	r6,r6,r5
   42e5c:	10c4b03a 	or	r2,r2,r3
   42e60:	1806d07a 	srli	r3,r3,1
   42e64:	280ad07a 	srli	r5,r5,1
   42e68:	183ffa1e 	bne	r3,zero,42e54 <__udivsi3+0x38>
   42e6c:	f800283a 	ret
   42e70:	0005883a 	mov	r2,zero
   42e74:	f800283a 	ret
   42e78:	00c00044 	movi	r3,1
   42e7c:	003ff406 	br	42e50 <__udivsi3+0x34>

00042e80 <__umodsi3>:
   42e80:	2005883a 	mov	r2,r4
   42e84:	2900122e 	bgeu	r5,r4,42ed0 <__umodsi3+0x50>
   42e88:	28001116 	blt	r5,zero,42ed0 <__umodsi3+0x50>
   42e8c:	01800804 	movi	r6,32
   42e90:	00c00044 	movi	r3,1
   42e94:	00000206 	br	42ea0 <__umodsi3+0x20>
   42e98:	30000c26 	beq	r6,zero,42ecc <__umodsi3+0x4c>
   42e9c:	28000516 	blt	r5,zero,42eb4 <__umodsi3+0x34>
   42ea0:	294b883a 	add	r5,r5,r5
   42ea4:	31bfffc4 	addi	r6,r6,-1
   42ea8:	18c7883a 	add	r3,r3,r3
   42eac:	293ffa36 	bltu	r5,r4,42e98 <__umodsi3+0x18>
   42eb0:	18000626 	beq	r3,zero,42ecc <__umodsi3+0x4c>
   42eb4:	1806d07a 	srli	r3,r3,1
   42eb8:	11400136 	bltu	r2,r5,42ec0 <__umodsi3+0x40>
   42ebc:	1145c83a 	sub	r2,r2,r5
   42ec0:	280ad07a 	srli	r5,r5,1
   42ec4:	183ffb1e 	bne	r3,zero,42eb4 <__umodsi3+0x34>
   42ec8:	f800283a 	ret
   42ecc:	f800283a 	ret
   42ed0:	00c00044 	movi	r3,1
   42ed4:	003ff706 	br	42eb4 <__umodsi3+0x34>

00042ed8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42ed8:	defffe04 	addi	sp,sp,-8
   42edc:	dfc00115 	stw	ra,4(sp)
   42ee0:	df000015 	stw	fp,0(sp)
   42ee4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42ee8:	d0a00917 	ldw	r2,-32732(gp)
   42eec:	10000326 	beq	r2,zero,42efc <alt_get_errno+0x24>
   42ef0:	d0a00917 	ldw	r2,-32732(gp)
   42ef4:	103ee83a 	callr	r2
   42ef8:	00000106 	br	42f00 <alt_get_errno+0x28>
   42efc:	d0a29904 	addi	r2,gp,-30108
}
   42f00:	e037883a 	mov	sp,fp
   42f04:	dfc00117 	ldw	ra,4(sp)
   42f08:	df000017 	ldw	fp,0(sp)
   42f0c:	dec00204 	addi	sp,sp,8
   42f10:	f800283a 	ret

00042f14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42f14:	defffb04 	addi	sp,sp,-20
   42f18:	dfc00415 	stw	ra,16(sp)
   42f1c:	df000315 	stw	fp,12(sp)
   42f20:	df000304 	addi	fp,sp,12
   42f24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42f28:	e0bfff17 	ldw	r2,-4(fp)
   42f2c:	10000616 	blt	r2,zero,42f48 <close+0x34>
   42f30:	e0bfff17 	ldw	r2,-4(fp)
   42f34:	10c00324 	muli	r3,r2,12
   42f38:	00800134 	movhi	r2,4
   42f3c:	10945604 	addi	r2,r2,20824
   42f40:	1885883a 	add	r2,r3,r2
   42f44:	00000106 	br	42f4c <close+0x38>
   42f48:	0005883a 	mov	r2,zero
   42f4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   42f50:	e0bffd17 	ldw	r2,-12(fp)
   42f54:	10001926 	beq	r2,zero,42fbc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42f58:	e0bffd17 	ldw	r2,-12(fp)
   42f5c:	10800017 	ldw	r2,0(r2)
   42f60:	10800417 	ldw	r2,16(r2)
   42f64:	10000626 	beq	r2,zero,42f80 <close+0x6c>
   42f68:	e0bffd17 	ldw	r2,-12(fp)
   42f6c:	10800017 	ldw	r2,0(r2)
   42f70:	10800417 	ldw	r2,16(r2)
   42f74:	e13ffd17 	ldw	r4,-12(fp)
   42f78:	103ee83a 	callr	r2
   42f7c:	00000106 	br	42f84 <close+0x70>
   42f80:	0005883a 	mov	r2,zero
   42f84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42f88:	e13fff17 	ldw	r4,-4(fp)
   42f8c:	00435d40 	call	435d4 <alt_release_fd>
    if (rval < 0)
   42f90:	e0bffe17 	ldw	r2,-8(fp)
   42f94:	1000070e 	bge	r2,zero,42fb4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   42f98:	0042ed80 	call	42ed8 <alt_get_errno>
   42f9c:	1007883a 	mov	r3,r2
   42fa0:	e0bffe17 	ldw	r2,-8(fp)
   42fa4:	0085c83a 	sub	r2,zero,r2
   42fa8:	18800015 	stw	r2,0(r3)
      return -1;
   42fac:	00bfffc4 	movi	r2,-1
   42fb0:	00000706 	br	42fd0 <close+0xbc>
    }
    return 0;
   42fb4:	0005883a 	mov	r2,zero
   42fb8:	00000506 	br	42fd0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42fbc:	0042ed80 	call	42ed8 <alt_get_errno>
   42fc0:	1007883a 	mov	r3,r2
   42fc4:	00801444 	movi	r2,81
   42fc8:	18800015 	stw	r2,0(r3)
    return -1;
   42fcc:	00bfffc4 	movi	r2,-1
  }
}
   42fd0:	e037883a 	mov	sp,fp
   42fd4:	dfc00117 	ldw	ra,4(sp)
   42fd8:	df000017 	ldw	fp,0(sp)
   42fdc:	dec00204 	addi	sp,sp,8
   42fe0:	f800283a 	ret

00042fe4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42fe4:	defffc04 	addi	sp,sp,-16
   42fe8:	df000315 	stw	fp,12(sp)
   42fec:	df000304 	addi	fp,sp,12
   42ff0:	e13ffd15 	stw	r4,-12(fp)
   42ff4:	e17ffe15 	stw	r5,-8(fp)
   42ff8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42ffc:	e0bfff17 	ldw	r2,-4(fp)
}
   43000:	e037883a 	mov	sp,fp
   43004:	df000017 	ldw	fp,0(sp)
   43008:	dec00104 	addi	sp,sp,4
   4300c:	f800283a 	ret

00043010 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43010:	defffe04 	addi	sp,sp,-8
   43014:	dfc00115 	stw	ra,4(sp)
   43018:	df000015 	stw	fp,0(sp)
   4301c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43020:	d0a00917 	ldw	r2,-32732(gp)
   43024:	10000326 	beq	r2,zero,43034 <alt_get_errno+0x24>
   43028:	d0a00917 	ldw	r2,-32732(gp)
   4302c:	103ee83a 	callr	r2
   43030:	00000106 	br	43038 <alt_get_errno+0x28>
   43034:	d0a29904 	addi	r2,gp,-30108
}
   43038:	e037883a 	mov	sp,fp
   4303c:	dfc00117 	ldw	ra,4(sp)
   43040:	df000017 	ldw	fp,0(sp)
   43044:	dec00204 	addi	sp,sp,8
   43048:	f800283a 	ret

0004304c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4304c:	defffb04 	addi	sp,sp,-20
   43050:	dfc00415 	stw	ra,16(sp)
   43054:	df000315 	stw	fp,12(sp)
   43058:	df000304 	addi	fp,sp,12
   4305c:	e13ffe15 	stw	r4,-8(fp)
   43060:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43064:	e0bffe17 	ldw	r2,-8(fp)
   43068:	10000616 	blt	r2,zero,43084 <fstat+0x38>
   4306c:	e0bffe17 	ldw	r2,-8(fp)
   43070:	10c00324 	muli	r3,r2,12
   43074:	00800134 	movhi	r2,4
   43078:	10945604 	addi	r2,r2,20824
   4307c:	1885883a 	add	r2,r3,r2
   43080:	00000106 	br	43088 <fstat+0x3c>
   43084:	0005883a 	mov	r2,zero
   43088:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4308c:	e0bffd17 	ldw	r2,-12(fp)
   43090:	10001026 	beq	r2,zero,430d4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   43094:	e0bffd17 	ldw	r2,-12(fp)
   43098:	10800017 	ldw	r2,0(r2)
   4309c:	10800817 	ldw	r2,32(r2)
   430a0:	10000726 	beq	r2,zero,430c0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   430a4:	e0bffd17 	ldw	r2,-12(fp)
   430a8:	10800017 	ldw	r2,0(r2)
   430ac:	10800817 	ldw	r2,32(r2)
   430b0:	e17fff17 	ldw	r5,-4(fp)
   430b4:	e13ffd17 	ldw	r4,-12(fp)
   430b8:	103ee83a 	callr	r2
   430bc:	00000a06 	br	430e8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   430c0:	e0bfff17 	ldw	r2,-4(fp)
   430c4:	00c80004 	movi	r3,8192
   430c8:	10c00115 	stw	r3,4(r2)
      return 0;
   430cc:	0005883a 	mov	r2,zero
   430d0:	00000506 	br	430e8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   430d4:	00430100 	call	43010 <alt_get_errno>
   430d8:	1007883a 	mov	r3,r2
   430dc:	00801444 	movi	r2,81
   430e0:	18800015 	stw	r2,0(r3)
    return -1;
   430e4:	00bfffc4 	movi	r2,-1
  }
}
   430e8:	e037883a 	mov	sp,fp
   430ec:	dfc00117 	ldw	ra,4(sp)
   430f0:	df000017 	ldw	fp,0(sp)
   430f4:	dec00204 	addi	sp,sp,8
   430f8:	f800283a 	ret

000430fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   430fc:	defffe04 	addi	sp,sp,-8
   43100:	dfc00115 	stw	ra,4(sp)
   43104:	df000015 	stw	fp,0(sp)
   43108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4310c:	d0a00917 	ldw	r2,-32732(gp)
   43110:	10000326 	beq	r2,zero,43120 <alt_get_errno+0x24>
   43114:	d0a00917 	ldw	r2,-32732(gp)
   43118:	103ee83a 	callr	r2
   4311c:	00000106 	br	43124 <alt_get_errno+0x28>
   43120:	d0a29904 	addi	r2,gp,-30108
}
   43124:	e037883a 	mov	sp,fp
   43128:	dfc00117 	ldw	ra,4(sp)
   4312c:	df000017 	ldw	fp,0(sp)
   43130:	dec00204 	addi	sp,sp,8
   43134:	f800283a 	ret

00043138 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   43138:	deffed04 	addi	sp,sp,-76
   4313c:	dfc01215 	stw	ra,72(sp)
   43140:	df001115 	stw	fp,68(sp)
   43144:	df001104 	addi	fp,sp,68
   43148:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4314c:	e0bfff17 	ldw	r2,-4(fp)
   43150:	10000616 	blt	r2,zero,4316c <isatty+0x34>
   43154:	e0bfff17 	ldw	r2,-4(fp)
   43158:	10c00324 	muli	r3,r2,12
   4315c:	00800134 	movhi	r2,4
   43160:	10945604 	addi	r2,r2,20824
   43164:	1885883a 	add	r2,r3,r2
   43168:	00000106 	br	43170 <isatty+0x38>
   4316c:	0005883a 	mov	r2,zero
   43170:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   43174:	e0bfef17 	ldw	r2,-68(fp)
   43178:	10000e26 	beq	r2,zero,431b4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4317c:	e0bfef17 	ldw	r2,-68(fp)
   43180:	10800017 	ldw	r2,0(r2)
   43184:	10800817 	ldw	r2,32(r2)
   43188:	1000021e 	bne	r2,zero,43194 <isatty+0x5c>
    {
      return 1;
   4318c:	00800044 	movi	r2,1
   43190:	00000d06 	br	431c8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   43194:	e0bff004 	addi	r2,fp,-64
   43198:	100b883a 	mov	r5,r2
   4319c:	e13fff17 	ldw	r4,-4(fp)
   431a0:	004304c0 	call	4304c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   431a4:	e0bff117 	ldw	r2,-60(fp)
   431a8:	10880020 	cmpeqi	r2,r2,8192
   431ac:	10803fcc 	andi	r2,r2,255
   431b0:	00000506 	br	431c8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   431b4:	00430fc0 	call	430fc <alt_get_errno>
   431b8:	1007883a 	mov	r3,r2
   431bc:	00801444 	movi	r2,81
   431c0:	18800015 	stw	r2,0(r3)
    return 0;
   431c4:	0005883a 	mov	r2,zero
  }
}
   431c8:	e037883a 	mov	sp,fp
   431cc:	dfc00117 	ldw	ra,4(sp)
   431d0:	df000017 	ldw	fp,0(sp)
   431d4:	dec00204 	addi	sp,sp,8
   431d8:	f800283a 	ret

000431dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   431dc:	defffc04 	addi	sp,sp,-16
   431e0:	df000315 	stw	fp,12(sp)
   431e4:	df000304 	addi	fp,sp,12
   431e8:	e13ffd15 	stw	r4,-12(fp)
   431ec:	e17ffe15 	stw	r5,-8(fp)
   431f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   431f4:	e0fffe17 	ldw	r3,-8(fp)
   431f8:	e0bffd17 	ldw	r2,-12(fp)
   431fc:	18800c26 	beq	r3,r2,43230 <alt_load_section+0x54>
  {
    while( to != end )
   43200:	00000806 	br	43224 <alt_load_section+0x48>
    {
      *to++ = *from++;
   43204:	e0bffe17 	ldw	r2,-8(fp)
   43208:	10c00104 	addi	r3,r2,4
   4320c:	e0fffe15 	stw	r3,-8(fp)
   43210:	e0fffd17 	ldw	r3,-12(fp)
   43214:	19000104 	addi	r4,r3,4
   43218:	e13ffd15 	stw	r4,-12(fp)
   4321c:	18c00017 	ldw	r3,0(r3)
   43220:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   43224:	e0fffe17 	ldw	r3,-8(fp)
   43228:	e0bfff17 	ldw	r2,-4(fp)
   4322c:	18bff51e 	bne	r3,r2,43204 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   43230:	0001883a 	nop
   43234:	e037883a 	mov	sp,fp
   43238:	df000017 	ldw	fp,0(sp)
   4323c:	dec00104 	addi	sp,sp,4
   43240:	f800283a 	ret

00043244 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43244:	defffe04 	addi	sp,sp,-8
   43248:	dfc00115 	stw	ra,4(sp)
   4324c:	df000015 	stw	fp,0(sp)
   43250:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43254:	01800134 	movhi	r6,4
   43258:	3194cc04 	addi	r6,r6,21296
   4325c:	01400134 	movhi	r5,4
   43260:	29524104 	addi	r5,r5,18692
   43264:	01000134 	movhi	r4,4
   43268:	2114cc04 	addi	r4,r4,21296
   4326c:	00431dc0 	call	431dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43270:	01800134 	movhi	r6,4
   43274:	31800804 	addi	r6,r6,32
   43278:	01400134 	movhi	r5,4
   4327c:	29400804 	addi	r5,r5,32
   43280:	01000134 	movhi	r4,4
   43284:	21000804 	addi	r4,r4,32
   43288:	00431dc0 	call	431dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4328c:	01800134 	movhi	r6,4
   43290:	31924104 	addi	r6,r6,18692
   43294:	01400134 	movhi	r5,4
   43298:	29522e04 	addi	r5,r5,18616
   4329c:	01000134 	movhi	r4,4
   432a0:	21122e04 	addi	r4,r4,18616
   432a4:	00431dc0 	call	431dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   432a8:	0043c840 	call	43c84 <alt_dcache_flush_all>
  alt_icache_flush_all();
   432ac:	0043e6c0 	call	43e6c <alt_icache_flush_all>
}
   432b0:	0001883a 	nop
   432b4:	e037883a 	mov	sp,fp
   432b8:	dfc00117 	ldw	ra,4(sp)
   432bc:	df000017 	ldw	fp,0(sp)
   432c0:	dec00204 	addi	sp,sp,8
   432c4:	f800283a 	ret

000432c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   432c8:	defffe04 	addi	sp,sp,-8
   432cc:	dfc00115 	stw	ra,4(sp)
   432d0:	df000015 	stw	fp,0(sp)
   432d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   432d8:	d0a00917 	ldw	r2,-32732(gp)
   432dc:	10000326 	beq	r2,zero,432ec <alt_get_errno+0x24>
   432e0:	d0a00917 	ldw	r2,-32732(gp)
   432e4:	103ee83a 	callr	r2
   432e8:	00000106 	br	432f0 <alt_get_errno+0x28>
   432ec:	d0a29904 	addi	r2,gp,-30108
}
   432f0:	e037883a 	mov	sp,fp
   432f4:	dfc00117 	ldw	ra,4(sp)
   432f8:	df000017 	ldw	fp,0(sp)
   432fc:	dec00204 	addi	sp,sp,8
   43300:	f800283a 	ret

00043304 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   43304:	defff904 	addi	sp,sp,-28
   43308:	dfc00615 	stw	ra,24(sp)
   4330c:	df000515 	stw	fp,20(sp)
   43310:	df000504 	addi	fp,sp,20
   43314:	e13ffd15 	stw	r4,-12(fp)
   43318:	e17ffe15 	stw	r5,-8(fp)
   4331c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   43320:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43324:	e0bffd17 	ldw	r2,-12(fp)
   43328:	10000616 	blt	r2,zero,43344 <lseek+0x40>
   4332c:	e0bffd17 	ldw	r2,-12(fp)
   43330:	10c00324 	muli	r3,r2,12
   43334:	00800134 	movhi	r2,4
   43338:	10945604 	addi	r2,r2,20824
   4333c:	1885883a 	add	r2,r3,r2
   43340:	00000106 	br	43348 <lseek+0x44>
   43344:	0005883a 	mov	r2,zero
   43348:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4334c:	e0bffc17 	ldw	r2,-16(fp)
   43350:	10001026 	beq	r2,zero,43394 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   43354:	e0bffc17 	ldw	r2,-16(fp)
   43358:	10800017 	ldw	r2,0(r2)
   4335c:	10800717 	ldw	r2,28(r2)
   43360:	10000926 	beq	r2,zero,43388 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   43364:	e0bffc17 	ldw	r2,-16(fp)
   43368:	10800017 	ldw	r2,0(r2)
   4336c:	10800717 	ldw	r2,28(r2)
   43370:	e1bfff17 	ldw	r6,-4(fp)
   43374:	e17ffe17 	ldw	r5,-8(fp)
   43378:	e13ffc17 	ldw	r4,-16(fp)
   4337c:	103ee83a 	callr	r2
   43380:	e0bffb15 	stw	r2,-20(fp)
   43384:	00000506 	br	4339c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43388:	00bfde84 	movi	r2,-134
   4338c:	e0bffb15 	stw	r2,-20(fp)
   43390:	00000206 	br	4339c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   43394:	00bfebc4 	movi	r2,-81
   43398:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4339c:	e0bffb17 	ldw	r2,-20(fp)
   433a0:	1000070e 	bge	r2,zero,433c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   433a4:	00432c80 	call	432c8 <alt_get_errno>
   433a8:	1007883a 	mov	r3,r2
   433ac:	e0bffb17 	ldw	r2,-20(fp)
   433b0:	0085c83a 	sub	r2,zero,r2
   433b4:	18800015 	stw	r2,0(r3)
    rc = -1;
   433b8:	00bfffc4 	movi	r2,-1
   433bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   433c0:	e0bffb17 	ldw	r2,-20(fp)
}
   433c4:	e037883a 	mov	sp,fp
   433c8:	dfc00117 	ldw	ra,4(sp)
   433cc:	df000017 	ldw	fp,0(sp)
   433d0:	dec00204 	addi	sp,sp,8
   433d4:	f800283a 	ret

000433d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   433d8:	defffd04 	addi	sp,sp,-12
   433dc:	dfc00215 	stw	ra,8(sp)
   433e0:	df000115 	stw	fp,4(sp)
   433e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   433e8:	0009883a 	mov	r4,zero
   433ec:	00438800 	call	43880 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   433f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   433f4:	00438b80 	call	438b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   433f8:	01800134 	movhi	r6,4
   433fc:	31923704 	addi	r6,r6,18652
   43400:	01400134 	movhi	r5,4
   43404:	29523704 	addi	r5,r5,18652
   43408:	01000134 	movhi	r4,4
   4340c:	21123704 	addi	r4,r4,18652
   43410:	0043f640 	call	43f64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   43414:	0043dac0 	call	43dac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   43418:	01000134 	movhi	r4,4
   4341c:	210f8304 	addi	r4,r4,15884
   43420:	00445240 	call	44524 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43424:	d0a29a17 	ldw	r2,-30104(gp)
   43428:	d0e29b17 	ldw	r3,-30100(gp)
   4342c:	d1229c17 	ldw	r4,-30096(gp)
   43430:	200d883a 	mov	r6,r4
   43434:	180b883a 	mov	r5,r3
   43438:	1009883a 	mov	r4,r2
   4343c:	00400b00 	call	400b0 <main>
   43440:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43444:	01000044 	movi	r4,1
   43448:	0042f140 	call	42f14 <close>
  exit (result);
   4344c:	e13fff17 	ldw	r4,-4(fp)
   43450:	00445380 	call	44538 <exit>

00043454 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   43454:	defffe04 	addi	sp,sp,-8
   43458:	df000115 	stw	fp,4(sp)
   4345c:	df000104 	addi	fp,sp,4
   43460:	e13fff15 	stw	r4,-4(fp)
}
   43464:	0001883a 	nop
   43468:	e037883a 	mov	sp,fp
   4346c:	df000017 	ldw	fp,0(sp)
   43470:	dec00104 	addi	sp,sp,4
   43474:	f800283a 	ret

00043478 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   43478:	defffe04 	addi	sp,sp,-8
   4347c:	df000115 	stw	fp,4(sp)
   43480:	df000104 	addi	fp,sp,4
   43484:	e13fff15 	stw	r4,-4(fp)
}
   43488:	0001883a 	nop
   4348c:	e037883a 	mov	sp,fp
   43490:	df000017 	ldw	fp,0(sp)
   43494:	dec00104 	addi	sp,sp,4
   43498:	f800283a 	ret

0004349c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4349c:	defffe04 	addi	sp,sp,-8
   434a0:	dfc00115 	stw	ra,4(sp)
   434a4:	df000015 	stw	fp,0(sp)
   434a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   434ac:	d0a00917 	ldw	r2,-32732(gp)
   434b0:	10000326 	beq	r2,zero,434c0 <alt_get_errno+0x24>
   434b4:	d0a00917 	ldw	r2,-32732(gp)
   434b8:	103ee83a 	callr	r2
   434bc:	00000106 	br	434c4 <alt_get_errno+0x28>
   434c0:	d0a29904 	addi	r2,gp,-30108
}
   434c4:	e037883a 	mov	sp,fp
   434c8:	dfc00117 	ldw	ra,4(sp)
   434cc:	df000017 	ldw	fp,0(sp)
   434d0:	dec00204 	addi	sp,sp,8
   434d4:	f800283a 	ret

000434d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   434d8:	defff904 	addi	sp,sp,-28
   434dc:	dfc00615 	stw	ra,24(sp)
   434e0:	df000515 	stw	fp,20(sp)
   434e4:	df000504 	addi	fp,sp,20
   434e8:	e13ffd15 	stw	r4,-12(fp)
   434ec:	e17ffe15 	stw	r5,-8(fp)
   434f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   434f4:	e0bffd17 	ldw	r2,-12(fp)
   434f8:	10000616 	blt	r2,zero,43514 <read+0x3c>
   434fc:	e0bffd17 	ldw	r2,-12(fp)
   43500:	10c00324 	muli	r3,r2,12
   43504:	00800134 	movhi	r2,4
   43508:	10945604 	addi	r2,r2,20824
   4350c:	1885883a 	add	r2,r3,r2
   43510:	00000106 	br	43518 <read+0x40>
   43514:	0005883a 	mov	r2,zero
   43518:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4351c:	e0bffb17 	ldw	r2,-20(fp)
   43520:	10002226 	beq	r2,zero,435ac <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43524:	e0bffb17 	ldw	r2,-20(fp)
   43528:	10800217 	ldw	r2,8(r2)
   4352c:	108000cc 	andi	r2,r2,3
   43530:	10800060 	cmpeqi	r2,r2,1
   43534:	1000181e 	bne	r2,zero,43598 <read+0xc0>
        (fd->dev->read))
   43538:	e0bffb17 	ldw	r2,-20(fp)
   4353c:	10800017 	ldw	r2,0(r2)
   43540:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   43544:	10001426 	beq	r2,zero,43598 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   43548:	e0bffb17 	ldw	r2,-20(fp)
   4354c:	10800017 	ldw	r2,0(r2)
   43550:	10800517 	ldw	r2,20(r2)
   43554:	e0ffff17 	ldw	r3,-4(fp)
   43558:	180d883a 	mov	r6,r3
   4355c:	e17ffe17 	ldw	r5,-8(fp)
   43560:	e13ffb17 	ldw	r4,-20(fp)
   43564:	103ee83a 	callr	r2
   43568:	e0bffc15 	stw	r2,-16(fp)
   4356c:	e0bffc17 	ldw	r2,-16(fp)
   43570:	1000070e 	bge	r2,zero,43590 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   43574:	004349c0 	call	4349c <alt_get_errno>
   43578:	1007883a 	mov	r3,r2
   4357c:	e0bffc17 	ldw	r2,-16(fp)
   43580:	0085c83a 	sub	r2,zero,r2
   43584:	18800015 	stw	r2,0(r3)
          return -1;
   43588:	00bfffc4 	movi	r2,-1
   4358c:	00000c06 	br	435c0 <read+0xe8>
        }
        return rval;
   43590:	e0bffc17 	ldw	r2,-16(fp)
   43594:	00000a06 	br	435c0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43598:	004349c0 	call	4349c <alt_get_errno>
   4359c:	1007883a 	mov	r3,r2
   435a0:	00800344 	movi	r2,13
   435a4:	18800015 	stw	r2,0(r3)
   435a8:	00000406 	br	435bc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   435ac:	004349c0 	call	4349c <alt_get_errno>
   435b0:	1007883a 	mov	r3,r2
   435b4:	00801444 	movi	r2,81
   435b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   435bc:	00bfffc4 	movi	r2,-1
}
   435c0:	e037883a 	mov	sp,fp
   435c4:	dfc00117 	ldw	ra,4(sp)
   435c8:	df000017 	ldw	fp,0(sp)
   435cc:	dec00204 	addi	sp,sp,8
   435d0:	f800283a 	ret

000435d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   435d4:	defffe04 	addi	sp,sp,-8
   435d8:	df000115 	stw	fp,4(sp)
   435dc:	df000104 	addi	fp,sp,4
   435e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   435e4:	e0bfff17 	ldw	r2,-4(fp)
   435e8:	108000d0 	cmplti	r2,r2,3
   435ec:	10000d1e 	bne	r2,zero,43624 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   435f0:	00800134 	movhi	r2,4
   435f4:	10945604 	addi	r2,r2,20824
   435f8:	e0ffff17 	ldw	r3,-4(fp)
   435fc:	18c00324 	muli	r3,r3,12
   43600:	10c5883a 	add	r2,r2,r3
   43604:	10800204 	addi	r2,r2,8
   43608:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4360c:	00800134 	movhi	r2,4
   43610:	10945604 	addi	r2,r2,20824
   43614:	e0ffff17 	ldw	r3,-4(fp)
   43618:	18c00324 	muli	r3,r3,12
   4361c:	10c5883a 	add	r2,r2,r3
   43620:	10000015 	stw	zero,0(r2)
  }
}
   43624:	0001883a 	nop
   43628:	e037883a 	mov	sp,fp
   4362c:	df000017 	ldw	fp,0(sp)
   43630:	dec00104 	addi	sp,sp,4
   43634:	f800283a 	ret

00043638 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   43638:	defff904 	addi	sp,sp,-28
   4363c:	df000615 	stw	fp,24(sp)
   43640:	df000604 	addi	fp,sp,24
   43644:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43648:	0005303a 	rdctl	r2,status
   4364c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43650:	e0fffe17 	ldw	r3,-8(fp)
   43654:	00bfff84 	movi	r2,-2
   43658:	1884703a 	and	r2,r3,r2
   4365c:	1001703a 	wrctl	status,r2
  
  return context;
   43660:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   43664:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43668:	d0a00a17 	ldw	r2,-32728(gp)
   4366c:	10c000c4 	addi	r3,r2,3
   43670:	00bfff04 	movi	r2,-4
   43674:	1884703a 	and	r2,r3,r2
   43678:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4367c:	d0e00a17 	ldw	r3,-32728(gp)
   43680:	e0bfff17 	ldw	r2,-4(fp)
   43684:	1887883a 	add	r3,r3,r2
   43688:	008001f4 	movhi	r2,7
   4368c:	10a00004 	addi	r2,r2,-32768
   43690:	10c0062e 	bgeu	r2,r3,436ac <sbrk+0x74>
   43694:	e0bffb17 	ldw	r2,-20(fp)
   43698:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4369c:	e0bffa17 	ldw	r2,-24(fp)
   436a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   436a4:	00bfffc4 	movi	r2,-1
   436a8:	00000b06 	br	436d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   436ac:	d0a00a17 	ldw	r2,-32728(gp)
   436b0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   436b4:	d0e00a17 	ldw	r3,-32728(gp)
   436b8:	e0bfff17 	ldw	r2,-4(fp)
   436bc:	1885883a 	add	r2,r3,r2
   436c0:	d0a00a15 	stw	r2,-32728(gp)
   436c4:	e0bffb17 	ldw	r2,-20(fp)
   436c8:	e0bffc15 	stw	r2,-16(fp)
   436cc:	e0bffc17 	ldw	r2,-16(fp)
   436d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   436d4:	e0bffd17 	ldw	r2,-12(fp)
} 
   436d8:	e037883a 	mov	sp,fp
   436dc:	df000017 	ldw	fp,0(sp)
   436e0:	dec00104 	addi	sp,sp,4
   436e4:	f800283a 	ret

000436e8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   436e8:	defffd04 	addi	sp,sp,-12
   436ec:	dfc00215 	stw	ra,8(sp)
   436f0:	df000115 	stw	fp,4(sp)
   436f4:	df000104 	addi	fp,sp,4
   436f8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   436fc:	e13fff17 	ldw	r4,-4(fp)
   43700:	0043b2c0 	call	43b2c <alt_busy_sleep>
}
   43704:	e037883a 	mov	sp,fp
   43708:	dfc00117 	ldw	ra,4(sp)
   4370c:	df000017 	ldw	fp,0(sp)
   43710:	dec00204 	addi	sp,sp,8
   43714:	f800283a 	ret

00043718 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43718:	defffe04 	addi	sp,sp,-8
   4371c:	dfc00115 	stw	ra,4(sp)
   43720:	df000015 	stw	fp,0(sp)
   43724:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43728:	d0a00917 	ldw	r2,-32732(gp)
   4372c:	10000326 	beq	r2,zero,4373c <alt_get_errno+0x24>
   43730:	d0a00917 	ldw	r2,-32732(gp)
   43734:	103ee83a 	callr	r2
   43738:	00000106 	br	43740 <alt_get_errno+0x28>
   4373c:	d0a29904 	addi	r2,gp,-30108
}
   43740:	e037883a 	mov	sp,fp
   43744:	dfc00117 	ldw	ra,4(sp)
   43748:	df000017 	ldw	fp,0(sp)
   4374c:	dec00204 	addi	sp,sp,8
   43750:	f800283a 	ret

00043754 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43754:	defff904 	addi	sp,sp,-28
   43758:	dfc00615 	stw	ra,24(sp)
   4375c:	df000515 	stw	fp,20(sp)
   43760:	df000504 	addi	fp,sp,20
   43764:	e13ffd15 	stw	r4,-12(fp)
   43768:	e17ffe15 	stw	r5,-8(fp)
   4376c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43770:	e0bffd17 	ldw	r2,-12(fp)
   43774:	10000616 	blt	r2,zero,43790 <write+0x3c>
   43778:	e0bffd17 	ldw	r2,-12(fp)
   4377c:	10c00324 	muli	r3,r2,12
   43780:	00800134 	movhi	r2,4
   43784:	10945604 	addi	r2,r2,20824
   43788:	1885883a 	add	r2,r3,r2
   4378c:	00000106 	br	43794 <write+0x40>
   43790:	0005883a 	mov	r2,zero
   43794:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43798:	e0bffb17 	ldw	r2,-20(fp)
   4379c:	10002126 	beq	r2,zero,43824 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   437a0:	e0bffb17 	ldw	r2,-20(fp)
   437a4:	10800217 	ldw	r2,8(r2)
   437a8:	108000cc 	andi	r2,r2,3
   437ac:	10001826 	beq	r2,zero,43810 <write+0xbc>
   437b0:	e0bffb17 	ldw	r2,-20(fp)
   437b4:	10800017 	ldw	r2,0(r2)
   437b8:	10800617 	ldw	r2,24(r2)
   437bc:	10001426 	beq	r2,zero,43810 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   437c0:	e0bffb17 	ldw	r2,-20(fp)
   437c4:	10800017 	ldw	r2,0(r2)
   437c8:	10800617 	ldw	r2,24(r2)
   437cc:	e0ffff17 	ldw	r3,-4(fp)
   437d0:	180d883a 	mov	r6,r3
   437d4:	e17ffe17 	ldw	r5,-8(fp)
   437d8:	e13ffb17 	ldw	r4,-20(fp)
   437dc:	103ee83a 	callr	r2
   437e0:	e0bffc15 	stw	r2,-16(fp)
   437e4:	e0bffc17 	ldw	r2,-16(fp)
   437e8:	1000070e 	bge	r2,zero,43808 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   437ec:	00437180 	call	43718 <alt_get_errno>
   437f0:	1007883a 	mov	r3,r2
   437f4:	e0bffc17 	ldw	r2,-16(fp)
   437f8:	0085c83a 	sub	r2,zero,r2
   437fc:	18800015 	stw	r2,0(r3)
        return -1;
   43800:	00bfffc4 	movi	r2,-1
   43804:	00000c06 	br	43838 <write+0xe4>
      }
      return rval;
   43808:	e0bffc17 	ldw	r2,-16(fp)
   4380c:	00000a06 	br	43838 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43810:	00437180 	call	43718 <alt_get_errno>
   43814:	1007883a 	mov	r3,r2
   43818:	00800344 	movi	r2,13
   4381c:	18800015 	stw	r2,0(r3)
   43820:	00000406 	br	43834 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43824:	00437180 	call	43718 <alt_get_errno>
   43828:	1007883a 	mov	r3,r2
   4382c:	00801444 	movi	r2,81
   43830:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43834:	00bfffc4 	movi	r2,-1
}
   43838:	e037883a 	mov	sp,fp
   4383c:	dfc00117 	ldw	ra,4(sp)
   43840:	df000017 	ldw	fp,0(sp)
   43844:	dec00204 	addi	sp,sp,8
   43848:	f800283a 	ret

0004384c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4384c:	defffd04 	addi	sp,sp,-12
   43850:	dfc00215 	stw	ra,8(sp)
   43854:	df000115 	stw	fp,4(sp)
   43858:	df000104 	addi	fp,sp,4
   4385c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43860:	d1600604 	addi	r5,gp,-32744
   43864:	e13fff17 	ldw	r4,-4(fp)
   43868:	0043d080 	call	43d08 <alt_dev_llist_insert>
}
   4386c:	e037883a 	mov	sp,fp
   43870:	dfc00117 	ldw	ra,4(sp)
   43874:	df000017 	ldw	fp,0(sp)
   43878:	dec00204 	addi	sp,sp,8
   4387c:	f800283a 	ret

00043880 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43880:	defffd04 	addi	sp,sp,-12
   43884:	dfc00215 	stw	ra,8(sp)
   43888:	df000115 	stw	fp,4(sp)
   4388c:	df000104 	addi	fp,sp,4
   43890:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   43894:	00442340 	call	44234 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43898:	00800044 	movi	r2,1
   4389c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   438a0:	0001883a 	nop
   438a4:	e037883a 	mov	sp,fp
   438a8:	dfc00117 	ldw	ra,4(sp)
   438ac:	df000017 	ldw	fp,0(sp)
   438b0:	dec00204 	addi	sp,sp,8
   438b4:	f800283a 	ret

000438b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   438b8:	defffe04 	addi	sp,sp,-8
   438bc:	dfc00115 	stw	ra,4(sp)
   438c0:	df000015 	stw	fp,0(sp)
   438c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   438c8:	01000134 	movhi	r4,4
   438cc:	2114b604 	addi	r4,r4,21208
   438d0:	004384c0 	call	4384c <alt_dev_reg>
}
   438d4:	0001883a 	nop
   438d8:	e037883a 	mov	sp,fp
   438dc:	dfc00117 	ldw	ra,4(sp)
   438e0:	df000017 	ldw	fp,0(sp)
   438e4:	dec00204 	addi	sp,sp,8
   438e8:	f800283a 	ret

000438ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   438ec:	defffa04 	addi	sp,sp,-24
   438f0:	dfc00515 	stw	ra,20(sp)
   438f4:	df000415 	stw	fp,16(sp)
   438f8:	df000404 	addi	fp,sp,16
   438fc:	e13ffd15 	stw	r4,-12(fp)
   43900:	e17ffe15 	stw	r5,-8(fp)
   43904:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43908:	e0bffd17 	ldw	r2,-12(fp)
   4390c:	10800017 	ldw	r2,0(r2)
   43910:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43914:	e0bffc17 	ldw	r2,-16(fp)
   43918:	10c00a04 	addi	r3,r2,40
   4391c:	e0bffd17 	ldw	r2,-12(fp)
   43920:	10800217 	ldw	r2,8(r2)
   43924:	100f883a 	mov	r7,r2
   43928:	e1bfff17 	ldw	r6,-4(fp)
   4392c:	e17ffe17 	ldw	r5,-8(fp)
   43930:	1809883a 	mov	r4,r3
   43934:	00439ac0 	call	439ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43938:	e037883a 	mov	sp,fp
   4393c:	dfc00117 	ldw	ra,4(sp)
   43940:	df000017 	ldw	fp,0(sp)
   43944:	dec00204 	addi	sp,sp,8
   43948:	f800283a 	ret

0004394c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4394c:	defffa04 	addi	sp,sp,-24
   43950:	dfc00515 	stw	ra,20(sp)
   43954:	df000415 	stw	fp,16(sp)
   43958:	df000404 	addi	fp,sp,16
   4395c:	e13ffd15 	stw	r4,-12(fp)
   43960:	e17ffe15 	stw	r5,-8(fp)
   43964:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43968:	e0bffd17 	ldw	r2,-12(fp)
   4396c:	10800017 	ldw	r2,0(r2)
   43970:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43974:	e0bffc17 	ldw	r2,-16(fp)
   43978:	10c00a04 	addi	r3,r2,40
   4397c:	e0bffd17 	ldw	r2,-12(fp)
   43980:	10800217 	ldw	r2,8(r2)
   43984:	100f883a 	mov	r7,r2
   43988:	e1bfff17 	ldw	r6,-4(fp)
   4398c:	e17ffe17 	ldw	r5,-8(fp)
   43990:	1809883a 	mov	r4,r3
   43994:	0043a980 	call	43a98 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43998:	e037883a 	mov	sp,fp
   4399c:	dfc00117 	ldw	ra,4(sp)
   439a0:	df000017 	ldw	fp,0(sp)
   439a4:	dec00204 	addi	sp,sp,8
   439a8:	f800283a 	ret

000439ac <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   439ac:	defff704 	addi	sp,sp,-36
   439b0:	df000815 	stw	fp,32(sp)
   439b4:	df000804 	addi	fp,sp,32
   439b8:	e13ffc15 	stw	r4,-16(fp)
   439bc:	e17ffd15 	stw	r5,-12(fp)
   439c0:	e1bffe15 	stw	r6,-8(fp)
   439c4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   439c8:	e0bffc17 	ldw	r2,-16(fp)
   439cc:	10800017 	ldw	r2,0(r2)
   439d0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   439d4:	e0bffd17 	ldw	r2,-12(fp)
   439d8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   439dc:	e0bffe17 	ldw	r2,-8(fp)
   439e0:	e0fffd17 	ldw	r3,-12(fp)
   439e4:	1885883a 	add	r2,r3,r2
   439e8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   439ec:	00001206 	br	43a38 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   439f0:	e0bff917 	ldw	r2,-28(fp)
   439f4:	10800037 	ldwio	r2,0(r2)
   439f8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   439fc:	e0bffb17 	ldw	r2,-20(fp)
   43a00:	10a0000c 	andi	r2,r2,32768
   43a04:	10000626 	beq	r2,zero,43a20 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43a08:	e0bff817 	ldw	r2,-32(fp)
   43a0c:	10c00044 	addi	r3,r2,1
   43a10:	e0fff815 	stw	r3,-32(fp)
   43a14:	e0fffb17 	ldw	r3,-20(fp)
   43a18:	10c00005 	stb	r3,0(r2)
   43a1c:	00000606 	br	43a38 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   43a20:	e0fff817 	ldw	r3,-32(fp)
   43a24:	e0bffd17 	ldw	r2,-12(fp)
   43a28:	1880071e 	bne	r3,r2,43a48 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   43a2c:	e0bfff17 	ldw	r2,-4(fp)
   43a30:	1090000c 	andi	r2,r2,16384
   43a34:	1000061e 	bne	r2,zero,43a50 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   43a38:	e0fff817 	ldw	r3,-32(fp)
   43a3c:	e0bffa17 	ldw	r2,-24(fp)
   43a40:	18bfeb36 	bltu	r3,r2,439f0 <altera_avalon_jtag_uart_read+0x44>
   43a44:	00000306 	br	43a54 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   43a48:	0001883a 	nop
   43a4c:	00000106 	br	43a54 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   43a50:	0001883a 	nop
    
  }

  if (ptr != buffer)
   43a54:	e0fff817 	ldw	r3,-32(fp)
   43a58:	e0bffd17 	ldw	r2,-12(fp)
   43a5c:	18800426 	beq	r3,r2,43a70 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   43a60:	e0fff817 	ldw	r3,-32(fp)
   43a64:	e0bffd17 	ldw	r2,-12(fp)
   43a68:	1885c83a 	sub	r2,r3,r2
   43a6c:	00000606 	br	43a88 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   43a70:	e0bfff17 	ldw	r2,-4(fp)
   43a74:	1090000c 	andi	r2,r2,16384
   43a78:	10000226 	beq	r2,zero,43a84 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   43a7c:	00bffd44 	movi	r2,-11
   43a80:	00000106 	br	43a88 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   43a84:	00bffec4 	movi	r2,-5
}
   43a88:	e037883a 	mov	sp,fp
   43a8c:	df000017 	ldw	fp,0(sp)
   43a90:	dec00104 	addi	sp,sp,4
   43a94:	f800283a 	ret

00043a98 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   43a98:	defff904 	addi	sp,sp,-28
   43a9c:	df000615 	stw	fp,24(sp)
   43aa0:	df000604 	addi	fp,sp,24
   43aa4:	e13ffc15 	stw	r4,-16(fp)
   43aa8:	e17ffd15 	stw	r5,-12(fp)
   43aac:	e1bffe15 	stw	r6,-8(fp)
   43ab0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   43ab4:	e0bffc17 	ldw	r2,-16(fp)
   43ab8:	10800017 	ldw	r2,0(r2)
   43abc:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   43ac0:	e0bffe17 	ldw	r2,-8(fp)
   43ac4:	e0fffd17 	ldw	r3,-12(fp)
   43ac8:	1885883a 	add	r2,r3,r2
   43acc:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   43ad0:	00000e06 	br	43b0c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   43ad4:	e0bffa17 	ldw	r2,-24(fp)
   43ad8:	10800104 	addi	r2,r2,4
   43adc:	10800037 	ldwio	r2,0(r2)
   43ae0:	10bfffec 	andhi	r2,r2,65535
   43ae4:	10000926 	beq	r2,zero,43b0c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   43ae8:	e0fffa17 	ldw	r3,-24(fp)
   43aec:	e0bffd17 	ldw	r2,-12(fp)
   43af0:	11000044 	addi	r4,r2,1
   43af4:	e13ffd15 	stw	r4,-12(fp)
   43af8:	10800003 	ldbu	r2,0(r2)
   43afc:	10803fcc 	andi	r2,r2,255
   43b00:	1080201c 	xori	r2,r2,128
   43b04:	10bfe004 	addi	r2,r2,-128
   43b08:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   43b0c:	e0fffd17 	ldw	r3,-12(fp)
   43b10:	e0bffb17 	ldw	r2,-20(fp)
   43b14:	18bfef36 	bltu	r3,r2,43ad4 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   43b18:	e0bffe17 	ldw	r2,-8(fp)
}
   43b1c:	e037883a 	mov	sp,fp
   43b20:	df000017 	ldw	fp,0(sp)
   43b24:	dec00104 	addi	sp,sp,4
   43b28:	f800283a 	ret

00043b2c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   43b2c:	defffa04 	addi	sp,sp,-24
   43b30:	dfc00515 	stw	ra,20(sp)
   43b34:	df000415 	stw	fp,16(sp)
   43b38:	df000404 	addi	fp,sp,16
   43b3c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   43b40:	008000c4 	movi	r2,3
   43b44:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   43b48:	e0fffd17 	ldw	r3,-12(fp)
   43b4c:	008003f4 	movhi	r2,15
   43b50:	10909004 	addi	r2,r2,16960
   43b54:	1885383a 	mul	r2,r3,r2
   43b58:	100b883a 	mov	r5,r2
   43b5c:	0100bef4 	movhi	r4,763
   43b60:	213c2004 	addi	r4,r4,-3968
   43b64:	0042e1c0 	call	42e1c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   43b68:	100b883a 	mov	r5,r2
   43b6c:	01200034 	movhi	r4,32768
   43b70:	213fffc4 	addi	r4,r4,-1
   43b74:	0042e1c0 	call	42e1c <__udivsi3>
   43b78:	100b883a 	mov	r5,r2
   43b7c:	e13fff17 	ldw	r4,-4(fp)
   43b80:	0042e1c0 	call	42e1c <__udivsi3>
   43b84:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   43b88:	e0bffe17 	ldw	r2,-8(fp)
   43b8c:	10002a26 	beq	r2,zero,43c38 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   43b90:	e03ffc15 	stw	zero,-16(fp)
   43b94:	00001706 	br	43bf4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   43b98:	00a00034 	movhi	r2,32768
   43b9c:	10bfffc4 	addi	r2,r2,-1
   43ba0:	10bfffc4 	addi	r2,r2,-1
   43ba4:	103ffe1e 	bne	r2,zero,43ba0 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   43ba8:	e0fffd17 	ldw	r3,-12(fp)
   43bac:	008003f4 	movhi	r2,15
   43bb0:	10909004 	addi	r2,r2,16960
   43bb4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   43bb8:	100b883a 	mov	r5,r2
   43bbc:	0100bef4 	movhi	r4,763
   43bc0:	213c2004 	addi	r4,r4,-3968
   43bc4:	0042e1c0 	call	42e1c <__udivsi3>
   43bc8:	100b883a 	mov	r5,r2
   43bcc:	01200034 	movhi	r4,32768
   43bd0:	213fffc4 	addi	r4,r4,-1
   43bd4:	0042e1c0 	call	42e1c <__udivsi3>
   43bd8:	1007883a 	mov	r3,r2
   43bdc:	e0bfff17 	ldw	r2,-4(fp)
   43be0:	10c5c83a 	sub	r2,r2,r3
   43be4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   43be8:	e0bffc17 	ldw	r2,-16(fp)
   43bec:	10800044 	addi	r2,r2,1
   43bf0:	e0bffc15 	stw	r2,-16(fp)
   43bf4:	e0fffc17 	ldw	r3,-16(fp)
   43bf8:	e0bffe17 	ldw	r2,-8(fp)
   43bfc:	18bfe616 	blt	r3,r2,43b98 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   43c00:	e0fffd17 	ldw	r3,-12(fp)
   43c04:	008003f4 	movhi	r2,15
   43c08:	10909004 	addi	r2,r2,16960
   43c0c:	1885383a 	mul	r2,r3,r2
   43c10:	100b883a 	mov	r5,r2
   43c14:	0100bef4 	movhi	r4,763
   43c18:	213c2004 	addi	r4,r4,-3968
   43c1c:	0042e1c0 	call	42e1c <__udivsi3>
   43c20:	1007883a 	mov	r3,r2
   43c24:	e0bfff17 	ldw	r2,-4(fp)
   43c28:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   43c2c:	10bfffc4 	addi	r2,r2,-1
   43c30:	103ffe1e 	bne	r2,zero,43c2c <alt_busy_sleep+0x100>
   43c34:	00000d06 	br	43c6c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   43c38:	e0fffd17 	ldw	r3,-12(fp)
   43c3c:	008003f4 	movhi	r2,15
   43c40:	10909004 	addi	r2,r2,16960
   43c44:	1885383a 	mul	r2,r3,r2
   43c48:	100b883a 	mov	r5,r2
   43c4c:	0100bef4 	movhi	r4,763
   43c50:	213c2004 	addi	r4,r4,-3968
   43c54:	0042e1c0 	call	42e1c <__udivsi3>
   43c58:	1007883a 	mov	r3,r2
   43c5c:	e0bfff17 	ldw	r2,-4(fp)
   43c60:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   43c64:	10bfffc4 	addi	r2,r2,-1
   43c68:	00bffe16 	blt	zero,r2,43c64 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   43c6c:	0005883a 	mov	r2,zero
}
   43c70:	e037883a 	mov	sp,fp
   43c74:	dfc00117 	ldw	ra,4(sp)
   43c78:	df000017 	ldw	fp,0(sp)
   43c7c:	dec00204 	addi	sp,sp,8
   43c80:	f800283a 	ret

00043c84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   43c84:	defffe04 	addi	sp,sp,-8
   43c88:	df000115 	stw	fp,4(sp)
   43c8c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   43c90:	e03fff15 	stw	zero,-4(fp)
   43c94:	00000506 	br	43cac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   43c98:	e0bfff17 	ldw	r2,-4(fp)
   43c9c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   43ca0:	e0bfff17 	ldw	r2,-4(fp)
   43ca4:	10800804 	addi	r2,r2,32
   43ca8:	e0bfff15 	stw	r2,-4(fp)
   43cac:	e0bfff17 	ldw	r2,-4(fp)
   43cb0:	10820030 	cmpltui	r2,r2,2048
   43cb4:	103ff81e 	bne	r2,zero,43c98 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   43cb8:	0001883a 	nop
   43cbc:	e037883a 	mov	sp,fp
   43cc0:	df000017 	ldw	fp,0(sp)
   43cc4:	dec00104 	addi	sp,sp,4
   43cc8:	f800283a 	ret

00043ccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43ccc:	defffe04 	addi	sp,sp,-8
   43cd0:	dfc00115 	stw	ra,4(sp)
   43cd4:	df000015 	stw	fp,0(sp)
   43cd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43cdc:	d0a00917 	ldw	r2,-32732(gp)
   43ce0:	10000326 	beq	r2,zero,43cf0 <alt_get_errno+0x24>
   43ce4:	d0a00917 	ldw	r2,-32732(gp)
   43ce8:	103ee83a 	callr	r2
   43cec:	00000106 	br	43cf4 <alt_get_errno+0x28>
   43cf0:	d0a29904 	addi	r2,gp,-30108
}
   43cf4:	e037883a 	mov	sp,fp
   43cf8:	dfc00117 	ldw	ra,4(sp)
   43cfc:	df000017 	ldw	fp,0(sp)
   43d00:	dec00204 	addi	sp,sp,8
   43d04:	f800283a 	ret

00043d08 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   43d08:	defffa04 	addi	sp,sp,-24
   43d0c:	dfc00515 	stw	ra,20(sp)
   43d10:	df000415 	stw	fp,16(sp)
   43d14:	df000404 	addi	fp,sp,16
   43d18:	e13ffe15 	stw	r4,-8(fp)
   43d1c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   43d20:	e0bffe17 	ldw	r2,-8(fp)
   43d24:	10000326 	beq	r2,zero,43d34 <alt_dev_llist_insert+0x2c>
   43d28:	e0bffe17 	ldw	r2,-8(fp)
   43d2c:	10800217 	ldw	r2,8(r2)
   43d30:	1000061e 	bne	r2,zero,43d4c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   43d34:	0043ccc0 	call	43ccc <alt_get_errno>
   43d38:	1007883a 	mov	r3,r2
   43d3c:	00800584 	movi	r2,22
   43d40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   43d44:	00bffa84 	movi	r2,-22
   43d48:	00001306 	br	43d98 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   43d4c:	e0bffe17 	ldw	r2,-8(fp)
   43d50:	e0ffff17 	ldw	r3,-4(fp)
   43d54:	e0fffc15 	stw	r3,-16(fp)
   43d58:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   43d5c:	e0bffd17 	ldw	r2,-12(fp)
   43d60:	e0fffc17 	ldw	r3,-16(fp)
   43d64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   43d68:	e0bffc17 	ldw	r2,-16(fp)
   43d6c:	10c00017 	ldw	r3,0(r2)
   43d70:	e0bffd17 	ldw	r2,-12(fp)
   43d74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   43d78:	e0bffc17 	ldw	r2,-16(fp)
   43d7c:	10800017 	ldw	r2,0(r2)
   43d80:	e0fffd17 	ldw	r3,-12(fp)
   43d84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   43d88:	e0bffc17 	ldw	r2,-16(fp)
   43d8c:	e0fffd17 	ldw	r3,-12(fp)
   43d90:	10c00015 	stw	r3,0(r2)

  return 0;  
   43d94:	0005883a 	mov	r2,zero
}
   43d98:	e037883a 	mov	sp,fp
   43d9c:	dfc00117 	ldw	ra,4(sp)
   43da0:	df000017 	ldw	fp,0(sp)
   43da4:	dec00204 	addi	sp,sp,8
   43da8:	f800283a 	ret

00043dac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   43dac:	defffd04 	addi	sp,sp,-12
   43db0:	dfc00215 	stw	ra,8(sp)
   43db4:	df000115 	stw	fp,4(sp)
   43db8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   43dbc:	00800134 	movhi	r2,4
   43dc0:	10922d04 	addi	r2,r2,18612
   43dc4:	e0bfff15 	stw	r2,-4(fp)
   43dc8:	00000606 	br	43de4 <_do_ctors+0x38>
        (*ctor) (); 
   43dcc:	e0bfff17 	ldw	r2,-4(fp)
   43dd0:	10800017 	ldw	r2,0(r2)
   43dd4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   43dd8:	e0bfff17 	ldw	r2,-4(fp)
   43ddc:	10bfff04 	addi	r2,r2,-4
   43de0:	e0bfff15 	stw	r2,-4(fp)
   43de4:	e0ffff17 	ldw	r3,-4(fp)
   43de8:	00800134 	movhi	r2,4
   43dec:	10922e04 	addi	r2,r2,18616
   43df0:	18bff62e 	bgeu	r3,r2,43dcc <_do_ctors+0x20>
        (*ctor) (); 
}
   43df4:	0001883a 	nop
   43df8:	e037883a 	mov	sp,fp
   43dfc:	dfc00117 	ldw	ra,4(sp)
   43e00:	df000017 	ldw	fp,0(sp)
   43e04:	dec00204 	addi	sp,sp,8
   43e08:	f800283a 	ret

00043e0c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   43e0c:	defffd04 	addi	sp,sp,-12
   43e10:	dfc00215 	stw	ra,8(sp)
   43e14:	df000115 	stw	fp,4(sp)
   43e18:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   43e1c:	00800134 	movhi	r2,4
   43e20:	10922d04 	addi	r2,r2,18612
   43e24:	e0bfff15 	stw	r2,-4(fp)
   43e28:	00000606 	br	43e44 <_do_dtors+0x38>
        (*dtor) (); 
   43e2c:	e0bfff17 	ldw	r2,-4(fp)
   43e30:	10800017 	ldw	r2,0(r2)
   43e34:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   43e38:	e0bfff17 	ldw	r2,-4(fp)
   43e3c:	10bfff04 	addi	r2,r2,-4
   43e40:	e0bfff15 	stw	r2,-4(fp)
   43e44:	e0ffff17 	ldw	r3,-4(fp)
   43e48:	00800134 	movhi	r2,4
   43e4c:	10922e04 	addi	r2,r2,18616
   43e50:	18bff62e 	bgeu	r3,r2,43e2c <_do_dtors+0x20>
        (*dtor) (); 
}
   43e54:	0001883a 	nop
   43e58:	e037883a 	mov	sp,fp
   43e5c:	dfc00117 	ldw	ra,4(sp)
   43e60:	df000017 	ldw	fp,0(sp)
   43e64:	dec00204 	addi	sp,sp,8
   43e68:	f800283a 	ret

00043e6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   43e6c:	defffe04 	addi	sp,sp,-8
   43e70:	dfc00115 	stw	ra,4(sp)
   43e74:	df000015 	stw	fp,0(sp)
   43e78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   43e7c:	01440004 	movi	r5,4096
   43e80:	0009883a 	mov	r4,zero
   43e84:	00444940 	call	44494 <alt_icache_flush>
#endif
}
   43e88:	0001883a 	nop
   43e8c:	e037883a 	mov	sp,fp
   43e90:	dfc00117 	ldw	ra,4(sp)
   43e94:	df000017 	ldw	fp,0(sp)
   43e98:	dec00204 	addi	sp,sp,8
   43e9c:	f800283a 	ret

00043ea0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   43ea0:	defff904 	addi	sp,sp,-28
   43ea4:	dfc00615 	stw	ra,24(sp)
   43ea8:	df000515 	stw	fp,20(sp)
   43eac:	df000504 	addi	fp,sp,20
   43eb0:	e13ffc15 	stw	r4,-16(fp)
   43eb4:	e17ffd15 	stw	r5,-12(fp)
   43eb8:	e1bffe15 	stw	r6,-8(fp)
   43ebc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   43ec0:	e1bfff17 	ldw	r6,-4(fp)
   43ec4:	e17ffe17 	ldw	r5,-8(fp)
   43ec8:	e13ffd17 	ldw	r4,-12(fp)
   43ecc:	00440e00 	call	440e0 <open>
   43ed0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   43ed4:	e0bffb17 	ldw	r2,-20(fp)
   43ed8:	10001c16 	blt	r2,zero,43f4c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   43edc:	00800134 	movhi	r2,4
   43ee0:	10945604 	addi	r2,r2,20824
   43ee4:	e0fffb17 	ldw	r3,-20(fp)
   43ee8:	18c00324 	muli	r3,r3,12
   43eec:	10c5883a 	add	r2,r2,r3
   43ef0:	10c00017 	ldw	r3,0(r2)
   43ef4:	e0bffc17 	ldw	r2,-16(fp)
   43ef8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   43efc:	00800134 	movhi	r2,4
   43f00:	10945604 	addi	r2,r2,20824
   43f04:	e0fffb17 	ldw	r3,-20(fp)
   43f08:	18c00324 	muli	r3,r3,12
   43f0c:	10c5883a 	add	r2,r2,r3
   43f10:	10800104 	addi	r2,r2,4
   43f14:	10c00017 	ldw	r3,0(r2)
   43f18:	e0bffc17 	ldw	r2,-16(fp)
   43f1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   43f20:	00800134 	movhi	r2,4
   43f24:	10945604 	addi	r2,r2,20824
   43f28:	e0fffb17 	ldw	r3,-20(fp)
   43f2c:	18c00324 	muli	r3,r3,12
   43f30:	10c5883a 	add	r2,r2,r3
   43f34:	10800204 	addi	r2,r2,8
   43f38:	10c00017 	ldw	r3,0(r2)
   43f3c:	e0bffc17 	ldw	r2,-16(fp)
   43f40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   43f44:	e13ffb17 	ldw	r4,-20(fp)
   43f48:	00435d40 	call	435d4 <alt_release_fd>
  }
} 
   43f4c:	0001883a 	nop
   43f50:	e037883a 	mov	sp,fp
   43f54:	dfc00117 	ldw	ra,4(sp)
   43f58:	df000017 	ldw	fp,0(sp)
   43f5c:	dec00204 	addi	sp,sp,8
   43f60:	f800283a 	ret

00043f64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   43f64:	defffb04 	addi	sp,sp,-20
   43f68:	dfc00415 	stw	ra,16(sp)
   43f6c:	df000315 	stw	fp,12(sp)
   43f70:	df000304 	addi	fp,sp,12
   43f74:	e13ffd15 	stw	r4,-12(fp)
   43f78:	e17ffe15 	stw	r5,-8(fp)
   43f7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   43f80:	01c07fc4 	movi	r7,511
   43f84:	01800044 	movi	r6,1
   43f88:	e17ffd17 	ldw	r5,-12(fp)
   43f8c:	01000134 	movhi	r4,4
   43f90:	21145904 	addi	r4,r4,20836
   43f94:	0043ea00 	call	43ea0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   43f98:	01c07fc4 	movi	r7,511
   43f9c:	000d883a 	mov	r6,zero
   43fa0:	e17ffe17 	ldw	r5,-8(fp)
   43fa4:	01000134 	movhi	r4,4
   43fa8:	21145604 	addi	r4,r4,20824
   43fac:	0043ea00 	call	43ea0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   43fb0:	01c07fc4 	movi	r7,511
   43fb4:	01800044 	movi	r6,1
   43fb8:	e17fff17 	ldw	r5,-4(fp)
   43fbc:	01000134 	movhi	r4,4
   43fc0:	21145c04 	addi	r4,r4,20848
   43fc4:	0043ea00 	call	43ea0 <alt_open_fd>
}  
   43fc8:	0001883a 	nop
   43fcc:	e037883a 	mov	sp,fp
   43fd0:	dfc00117 	ldw	ra,4(sp)
   43fd4:	df000017 	ldw	fp,0(sp)
   43fd8:	dec00204 	addi	sp,sp,8
   43fdc:	f800283a 	ret

00043fe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43fe0:	defffe04 	addi	sp,sp,-8
   43fe4:	dfc00115 	stw	ra,4(sp)
   43fe8:	df000015 	stw	fp,0(sp)
   43fec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43ff0:	d0a00917 	ldw	r2,-32732(gp)
   43ff4:	10000326 	beq	r2,zero,44004 <alt_get_errno+0x24>
   43ff8:	d0a00917 	ldw	r2,-32732(gp)
   43ffc:	103ee83a 	callr	r2
   44000:	00000106 	br	44008 <alt_get_errno+0x28>
   44004:	d0a29904 	addi	r2,gp,-30108
}
   44008:	e037883a 	mov	sp,fp
   4400c:	dfc00117 	ldw	ra,4(sp)
   44010:	df000017 	ldw	fp,0(sp)
   44014:	dec00204 	addi	sp,sp,8
   44018:	f800283a 	ret

0004401c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4401c:	defffd04 	addi	sp,sp,-12
   44020:	df000215 	stw	fp,8(sp)
   44024:	df000204 	addi	fp,sp,8
   44028:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4402c:	e0bfff17 	ldw	r2,-4(fp)
   44030:	10800217 	ldw	r2,8(r2)
   44034:	10d00034 	orhi	r3,r2,16384
   44038:	e0bfff17 	ldw	r2,-4(fp)
   4403c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44040:	e03ffe15 	stw	zero,-8(fp)
   44044:	00001d06 	br	440bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44048:	00800134 	movhi	r2,4
   4404c:	10945604 	addi	r2,r2,20824
   44050:	e0fffe17 	ldw	r3,-8(fp)
   44054:	18c00324 	muli	r3,r3,12
   44058:	10c5883a 	add	r2,r2,r3
   4405c:	10c00017 	ldw	r3,0(r2)
   44060:	e0bfff17 	ldw	r2,-4(fp)
   44064:	10800017 	ldw	r2,0(r2)
   44068:	1880111e 	bne	r3,r2,440b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4406c:	00800134 	movhi	r2,4
   44070:	10945604 	addi	r2,r2,20824
   44074:	e0fffe17 	ldw	r3,-8(fp)
   44078:	18c00324 	muli	r3,r3,12
   4407c:	10c5883a 	add	r2,r2,r3
   44080:	10800204 	addi	r2,r2,8
   44084:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44088:	1000090e 	bge	r2,zero,440b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4408c:	e0bffe17 	ldw	r2,-8(fp)
   44090:	10c00324 	muli	r3,r2,12
   44094:	00800134 	movhi	r2,4
   44098:	10945604 	addi	r2,r2,20824
   4409c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   440a0:	e0bfff17 	ldw	r2,-4(fp)
   440a4:	18800226 	beq	r3,r2,440b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   440a8:	00bffcc4 	movi	r2,-13
   440ac:	00000806 	br	440d0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   440b0:	e0bffe17 	ldw	r2,-8(fp)
   440b4:	10800044 	addi	r2,r2,1
   440b8:	e0bffe15 	stw	r2,-8(fp)
   440bc:	d0a00817 	ldw	r2,-32736(gp)
   440c0:	1007883a 	mov	r3,r2
   440c4:	e0bffe17 	ldw	r2,-8(fp)
   440c8:	18bfdf2e 	bgeu	r3,r2,44048 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   440cc:	0005883a 	mov	r2,zero
}
   440d0:	e037883a 	mov	sp,fp
   440d4:	df000017 	ldw	fp,0(sp)
   440d8:	dec00104 	addi	sp,sp,4
   440dc:	f800283a 	ret

000440e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   440e0:	defff604 	addi	sp,sp,-40
   440e4:	dfc00915 	stw	ra,36(sp)
   440e8:	df000815 	stw	fp,32(sp)
   440ec:	df000804 	addi	fp,sp,32
   440f0:	e13ffd15 	stw	r4,-12(fp)
   440f4:	e17ffe15 	stw	r5,-8(fp)
   440f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   440fc:	00bfffc4 	movi	r2,-1
   44100:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   44104:	00bffb44 	movi	r2,-19
   44108:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   4410c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   44110:	d1600604 	addi	r5,gp,-32744
   44114:	e13ffd17 	ldw	r4,-12(fp)
   44118:	00442580 	call	44258 <alt_find_dev>
   4411c:	e0bff815 	stw	r2,-32(fp)
   44120:	e0bff817 	ldw	r2,-32(fp)
   44124:	1000051e 	bne	r2,zero,4413c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   44128:	e13ffd17 	ldw	r4,-12(fp)
   4412c:	00442e80 	call	442e8 <alt_find_file>
   44130:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   44134:	00800044 	movi	r2,1
   44138:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4413c:	e0bff817 	ldw	r2,-32(fp)
   44140:	10002926 	beq	r2,zero,441e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   44144:	e13ff817 	ldw	r4,-32(fp)
   44148:	00443f00 	call	443f0 <alt_get_fd>
   4414c:	e0bff915 	stw	r2,-28(fp)
   44150:	e0bff917 	ldw	r2,-28(fp)
   44154:	1000030e 	bge	r2,zero,44164 <open+0x84>
    {
      status = index;
   44158:	e0bff917 	ldw	r2,-28(fp)
   4415c:	e0bffa15 	stw	r2,-24(fp)
   44160:	00002306 	br	441f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   44164:	e0bff917 	ldw	r2,-28(fp)
   44168:	10c00324 	muli	r3,r2,12
   4416c:	00800134 	movhi	r2,4
   44170:	10945604 	addi	r2,r2,20824
   44174:	1885883a 	add	r2,r3,r2
   44178:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4417c:	e0fffe17 	ldw	r3,-8(fp)
   44180:	00900034 	movhi	r2,16384
   44184:	10bfffc4 	addi	r2,r2,-1
   44188:	1886703a 	and	r3,r3,r2
   4418c:	e0bffc17 	ldw	r2,-16(fp)
   44190:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44194:	e0bffb17 	ldw	r2,-20(fp)
   44198:	1000051e 	bne	r2,zero,441b0 <open+0xd0>
   4419c:	e13ffc17 	ldw	r4,-16(fp)
   441a0:	004401c0 	call	4401c <alt_file_locked>
   441a4:	e0bffa15 	stw	r2,-24(fp)
   441a8:	e0bffa17 	ldw	r2,-24(fp)
   441ac:	10001016 	blt	r2,zero,441f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   441b0:	e0bff817 	ldw	r2,-32(fp)
   441b4:	10800317 	ldw	r2,12(r2)
   441b8:	10000826 	beq	r2,zero,441dc <open+0xfc>
   441bc:	e0bff817 	ldw	r2,-32(fp)
   441c0:	10800317 	ldw	r2,12(r2)
   441c4:	e1ffff17 	ldw	r7,-4(fp)
   441c8:	e1bffe17 	ldw	r6,-8(fp)
   441cc:	e17ffd17 	ldw	r5,-12(fp)
   441d0:	e13ffc17 	ldw	r4,-16(fp)
   441d4:	103ee83a 	callr	r2
   441d8:	00000106 	br	441e0 <open+0x100>
   441dc:	0005883a 	mov	r2,zero
   441e0:	e0bffa15 	stw	r2,-24(fp)
   441e4:	00000206 	br	441f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   441e8:	00bffb44 	movi	r2,-19
   441ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   441f0:	e0bffa17 	ldw	r2,-24(fp)
   441f4:	1000090e 	bge	r2,zero,4421c <open+0x13c>
  {
    alt_release_fd (index);  
   441f8:	e13ff917 	ldw	r4,-28(fp)
   441fc:	00435d40 	call	435d4 <alt_release_fd>
    ALT_ERRNO = -status;
   44200:	0043fe00 	call	43fe0 <alt_get_errno>
   44204:	1007883a 	mov	r3,r2
   44208:	e0bffa17 	ldw	r2,-24(fp)
   4420c:	0085c83a 	sub	r2,zero,r2
   44210:	18800015 	stw	r2,0(r3)
    return -1;
   44214:	00bfffc4 	movi	r2,-1
   44218:	00000106 	br	44220 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   4421c:	e0bff917 	ldw	r2,-28(fp)
}
   44220:	e037883a 	mov	sp,fp
   44224:	dfc00117 	ldw	ra,4(sp)
   44228:	df000017 	ldw	fp,0(sp)
   4422c:	dec00204 	addi	sp,sp,8
   44230:	f800283a 	ret

00044234 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   44234:	deffff04 	addi	sp,sp,-4
   44238:	df000015 	stw	fp,0(sp)
   4423c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   44240:	000170fa 	wrctl	ienable,zero
}
   44244:	0001883a 	nop
   44248:	e037883a 	mov	sp,fp
   4424c:	df000017 	ldw	fp,0(sp)
   44250:	dec00104 	addi	sp,sp,4
   44254:	f800283a 	ret

00044258 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   44258:	defffa04 	addi	sp,sp,-24
   4425c:	dfc00515 	stw	ra,20(sp)
   44260:	df000415 	stw	fp,16(sp)
   44264:	df000404 	addi	fp,sp,16
   44268:	e13ffe15 	stw	r4,-8(fp)
   4426c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44270:	e0bfff17 	ldw	r2,-4(fp)
   44274:	10800017 	ldw	r2,0(r2)
   44278:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4427c:	e13ffe17 	ldw	r4,-8(fp)
   44280:	00401e40 	call	401e4 <strlen>
   44284:	10800044 	addi	r2,r2,1
   44288:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4428c:	00000d06 	br	442c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44290:	e0bffc17 	ldw	r2,-16(fp)
   44294:	10800217 	ldw	r2,8(r2)
   44298:	e0fffd17 	ldw	r3,-12(fp)
   4429c:	180d883a 	mov	r6,r3
   442a0:	e17ffe17 	ldw	r5,-8(fp)
   442a4:	1009883a 	mov	r4,r2
   442a8:	00445700 	call	44570 <memcmp>
   442ac:	1000021e 	bne	r2,zero,442b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   442b0:	e0bffc17 	ldw	r2,-16(fp)
   442b4:	00000706 	br	442d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   442b8:	e0bffc17 	ldw	r2,-16(fp)
   442bc:	10800017 	ldw	r2,0(r2)
   442c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   442c4:	e0fffc17 	ldw	r3,-16(fp)
   442c8:	e0bfff17 	ldw	r2,-4(fp)
   442cc:	18bff01e 	bne	r3,r2,44290 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   442d0:	0005883a 	mov	r2,zero
}
   442d4:	e037883a 	mov	sp,fp
   442d8:	dfc00117 	ldw	ra,4(sp)
   442dc:	df000017 	ldw	fp,0(sp)
   442e0:	dec00204 	addi	sp,sp,8
   442e4:	f800283a 	ret

000442e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   442e8:	defffb04 	addi	sp,sp,-20
   442ec:	dfc00415 	stw	ra,16(sp)
   442f0:	df000315 	stw	fp,12(sp)
   442f4:	df000304 	addi	fp,sp,12
   442f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   442fc:	d0a00417 	ldw	r2,-32752(gp)
   44300:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   44304:	00003106 	br	443cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   44308:	e0bffd17 	ldw	r2,-12(fp)
   4430c:	10800217 	ldw	r2,8(r2)
   44310:	1009883a 	mov	r4,r2
   44314:	00401e40 	call	401e4 <strlen>
   44318:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4431c:	e0bffd17 	ldw	r2,-12(fp)
   44320:	10c00217 	ldw	r3,8(r2)
   44324:	e0bffe17 	ldw	r2,-8(fp)
   44328:	10bfffc4 	addi	r2,r2,-1
   4432c:	1885883a 	add	r2,r3,r2
   44330:	10800003 	ldbu	r2,0(r2)
   44334:	10803fcc 	andi	r2,r2,255
   44338:	1080201c 	xori	r2,r2,128
   4433c:	10bfe004 	addi	r2,r2,-128
   44340:	10800bd8 	cmpnei	r2,r2,47
   44344:	1000031e 	bne	r2,zero,44354 <alt_find_file+0x6c>
    {
      len -= 1;
   44348:	e0bffe17 	ldw	r2,-8(fp)
   4434c:	10bfffc4 	addi	r2,r2,-1
   44350:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   44354:	e0bffe17 	ldw	r2,-8(fp)
   44358:	e0ffff17 	ldw	r3,-4(fp)
   4435c:	1885883a 	add	r2,r3,r2
   44360:	10800003 	ldbu	r2,0(r2)
   44364:	10803fcc 	andi	r2,r2,255
   44368:	1080201c 	xori	r2,r2,128
   4436c:	10bfe004 	addi	r2,r2,-128
   44370:	10800be0 	cmpeqi	r2,r2,47
   44374:	1000081e 	bne	r2,zero,44398 <alt_find_file+0xb0>
   44378:	e0bffe17 	ldw	r2,-8(fp)
   4437c:	e0ffff17 	ldw	r3,-4(fp)
   44380:	1885883a 	add	r2,r3,r2
   44384:	10800003 	ldbu	r2,0(r2)
   44388:	10803fcc 	andi	r2,r2,255
   4438c:	1080201c 	xori	r2,r2,128
   44390:	10bfe004 	addi	r2,r2,-128
   44394:	10000a1e 	bne	r2,zero,443c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   44398:	e0bffd17 	ldw	r2,-12(fp)
   4439c:	10800217 	ldw	r2,8(r2)
   443a0:	e0fffe17 	ldw	r3,-8(fp)
   443a4:	180d883a 	mov	r6,r3
   443a8:	e17fff17 	ldw	r5,-4(fp)
   443ac:	1009883a 	mov	r4,r2
   443b0:	00445700 	call	44570 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   443b4:	1000021e 	bne	r2,zero,443c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   443b8:	e0bffd17 	ldw	r2,-12(fp)
   443bc:	00000706 	br	443dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   443c0:	e0bffd17 	ldw	r2,-12(fp)
   443c4:	10800017 	ldw	r2,0(r2)
   443c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   443cc:	e0fffd17 	ldw	r3,-12(fp)
   443d0:	d0a00404 	addi	r2,gp,-32752
   443d4:	18bfcc1e 	bne	r3,r2,44308 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   443d8:	0005883a 	mov	r2,zero
}
   443dc:	e037883a 	mov	sp,fp
   443e0:	dfc00117 	ldw	ra,4(sp)
   443e4:	df000017 	ldw	fp,0(sp)
   443e8:	dec00204 	addi	sp,sp,8
   443ec:	f800283a 	ret

000443f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   443f0:	defffc04 	addi	sp,sp,-16
   443f4:	df000315 	stw	fp,12(sp)
   443f8:	df000304 	addi	fp,sp,12
   443fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   44400:	00bffa04 	movi	r2,-24
   44404:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   44408:	e03ffd15 	stw	zero,-12(fp)
   4440c:	00001906 	br	44474 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   44410:	00800134 	movhi	r2,4
   44414:	10945604 	addi	r2,r2,20824
   44418:	e0fffd17 	ldw	r3,-12(fp)
   4441c:	18c00324 	muli	r3,r3,12
   44420:	10c5883a 	add	r2,r2,r3
   44424:	10800017 	ldw	r2,0(r2)
   44428:	10000f1e 	bne	r2,zero,44468 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4442c:	00800134 	movhi	r2,4
   44430:	10945604 	addi	r2,r2,20824
   44434:	e0fffd17 	ldw	r3,-12(fp)
   44438:	18c00324 	muli	r3,r3,12
   4443c:	10c5883a 	add	r2,r2,r3
   44440:	e0ffff17 	ldw	r3,-4(fp)
   44444:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   44448:	d0e00817 	ldw	r3,-32736(gp)
   4444c:	e0bffd17 	ldw	r2,-12(fp)
   44450:	1880020e 	bge	r3,r2,4445c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   44454:	e0bffd17 	ldw	r2,-12(fp)
   44458:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   4445c:	e0bffd17 	ldw	r2,-12(fp)
   44460:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   44464:	00000606 	br	44480 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   44468:	e0bffd17 	ldw	r2,-12(fp)
   4446c:	10800044 	addi	r2,r2,1
   44470:	e0bffd15 	stw	r2,-12(fp)
   44474:	e0bffd17 	ldw	r2,-12(fp)
   44478:	10800810 	cmplti	r2,r2,32
   4447c:	103fe41e 	bne	r2,zero,44410 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   44480:	e0bffe17 	ldw	r2,-8(fp)
}
   44484:	e037883a 	mov	sp,fp
   44488:	df000017 	ldw	fp,0(sp)
   4448c:	dec00104 	addi	sp,sp,4
   44490:	f800283a 	ret

00044494 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   44494:	defffb04 	addi	sp,sp,-20
   44498:	df000415 	stw	fp,16(sp)
   4449c:	df000404 	addi	fp,sp,16
   444a0:	e13ffe15 	stw	r4,-8(fp)
   444a4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   444a8:	e0bfff17 	ldw	r2,-4(fp)
   444ac:	10840070 	cmpltui	r2,r2,4097
   444b0:	1000021e 	bne	r2,zero,444bc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   444b4:	00840004 	movi	r2,4096
   444b8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   444bc:	e0fffe17 	ldw	r3,-8(fp)
   444c0:	e0bfff17 	ldw	r2,-4(fp)
   444c4:	1885883a 	add	r2,r3,r2
   444c8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   444cc:	e0bffe17 	ldw	r2,-8(fp)
   444d0:	e0bffc15 	stw	r2,-16(fp)
   444d4:	00000506 	br	444ec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   444d8:	e0bffc17 	ldw	r2,-16(fp)
   444dc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   444e0:	e0bffc17 	ldw	r2,-16(fp)
   444e4:	10800804 	addi	r2,r2,32
   444e8:	e0bffc15 	stw	r2,-16(fp)
   444ec:	e0fffc17 	ldw	r3,-16(fp)
   444f0:	e0bffd17 	ldw	r2,-12(fp)
   444f4:	18bff836 	bltu	r3,r2,444d8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   444f8:	e0bffe17 	ldw	r2,-8(fp)
   444fc:	108007cc 	andi	r2,r2,31
   44500:	10000226 	beq	r2,zero,4450c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   44504:	e0bffc17 	ldw	r2,-16(fp)
   44508:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4450c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   44510:	0001883a 	nop
   44514:	e037883a 	mov	sp,fp
   44518:	df000017 	ldw	fp,0(sp)
   4451c:	dec00104 	addi	sp,sp,4
   44520:	f800283a 	ret

00044524 <atexit>:
   44524:	200b883a 	mov	r5,r4
   44528:	000f883a 	mov	r7,zero
   4452c:	000d883a 	mov	r6,zero
   44530:	0009883a 	mov	r4,zero
   44534:	00445ec1 	jmpi	445ec <__register_exitproc>

00044538 <exit>:
   44538:	defffe04 	addi	sp,sp,-8
   4453c:	000b883a 	mov	r5,zero
   44540:	dc000015 	stw	r16,0(sp)
   44544:	dfc00115 	stw	ra,4(sp)
   44548:	2021883a 	mov	r16,r4
   4454c:	00447040 	call	44704 <__call_exitprocs>
   44550:	00800134 	movhi	r2,4
   44554:	1094c104 	addi	r2,r2,21252
   44558:	11000017 	ldw	r4,0(r2)
   4455c:	20800f17 	ldw	r2,60(r4)
   44560:	10000126 	beq	r2,zero,44568 <exit+0x30>
   44564:	103ee83a 	callr	r2
   44568:	8009883a 	mov	r4,r16
   4456c:	00448840 	call	44884 <_exit>

00044570 <memcmp>:
   44570:	01c000c4 	movi	r7,3
   44574:	3980192e 	bgeu	r7,r6,445dc <memcmp+0x6c>
   44578:	2144b03a 	or	r2,r4,r5
   4457c:	11c4703a 	and	r2,r2,r7
   44580:	10000f26 	beq	r2,zero,445c0 <memcmp+0x50>
   44584:	20800003 	ldbu	r2,0(r4)
   44588:	28c00003 	ldbu	r3,0(r5)
   4458c:	10c0151e 	bne	r2,r3,445e4 <memcmp+0x74>
   44590:	31bfff84 	addi	r6,r6,-2
   44594:	01ffffc4 	movi	r7,-1
   44598:	00000406 	br	445ac <memcmp+0x3c>
   4459c:	20800003 	ldbu	r2,0(r4)
   445a0:	28c00003 	ldbu	r3,0(r5)
   445a4:	31bfffc4 	addi	r6,r6,-1
   445a8:	10c00e1e 	bne	r2,r3,445e4 <memcmp+0x74>
   445ac:	21000044 	addi	r4,r4,1
   445b0:	29400044 	addi	r5,r5,1
   445b4:	31fff91e 	bne	r6,r7,4459c <memcmp+0x2c>
   445b8:	0005883a 	mov	r2,zero
   445bc:	f800283a 	ret
   445c0:	20c00017 	ldw	r3,0(r4)
   445c4:	28800017 	ldw	r2,0(r5)
   445c8:	18bfee1e 	bne	r3,r2,44584 <memcmp+0x14>
   445cc:	31bfff04 	addi	r6,r6,-4
   445d0:	21000104 	addi	r4,r4,4
   445d4:	29400104 	addi	r5,r5,4
   445d8:	39bff936 	bltu	r7,r6,445c0 <memcmp+0x50>
   445dc:	303fe91e 	bne	r6,zero,44584 <memcmp+0x14>
   445e0:	003ff506 	br	445b8 <memcmp+0x48>
   445e4:	10c5c83a 	sub	r2,r2,r3
   445e8:	f800283a 	ret

000445ec <__register_exitproc>:
   445ec:	defffa04 	addi	sp,sp,-24
   445f0:	dc000315 	stw	r16,12(sp)
   445f4:	04000134 	movhi	r16,4
   445f8:	8414c104 	addi	r16,r16,21252
   445fc:	80c00017 	ldw	r3,0(r16)
   44600:	dc400415 	stw	r17,16(sp)
   44604:	dfc00515 	stw	ra,20(sp)
   44608:	18805217 	ldw	r2,328(r3)
   4460c:	2023883a 	mov	r17,r4
   44610:	10003726 	beq	r2,zero,446f0 <__register_exitproc+0x104>
   44614:	10c00117 	ldw	r3,4(r2)
   44618:	010007c4 	movi	r4,31
   4461c:	20c00e16 	blt	r4,r3,44658 <__register_exitproc+0x6c>
   44620:	1a000044 	addi	r8,r3,1
   44624:	8800221e 	bne	r17,zero,446b0 <__register_exitproc+0xc4>
   44628:	18c00084 	addi	r3,r3,2
   4462c:	18c7883a 	add	r3,r3,r3
   44630:	18c7883a 	add	r3,r3,r3
   44634:	12000115 	stw	r8,4(r2)
   44638:	10c7883a 	add	r3,r2,r3
   4463c:	19400015 	stw	r5,0(r3)
   44640:	0005883a 	mov	r2,zero
   44644:	dfc00517 	ldw	ra,20(sp)
   44648:	dc400417 	ldw	r17,16(sp)
   4464c:	dc000317 	ldw	r16,12(sp)
   44650:	dec00604 	addi	sp,sp,24
   44654:	f800283a 	ret
   44658:	00800034 	movhi	r2,0
   4465c:	10800004 	addi	r2,r2,0
   44660:	10002626 	beq	r2,zero,446fc <__register_exitproc+0x110>
   44664:	01006404 	movi	r4,400
   44668:	d9400015 	stw	r5,0(sp)
   4466c:	d9800115 	stw	r6,4(sp)
   44670:	d9c00215 	stw	r7,8(sp)
   44674:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   44678:	d9400017 	ldw	r5,0(sp)
   4467c:	d9800117 	ldw	r6,4(sp)
   44680:	d9c00217 	ldw	r7,8(sp)
   44684:	10001d26 	beq	r2,zero,446fc <__register_exitproc+0x110>
   44688:	81000017 	ldw	r4,0(r16)
   4468c:	10000115 	stw	zero,4(r2)
   44690:	02000044 	movi	r8,1
   44694:	22405217 	ldw	r9,328(r4)
   44698:	0007883a 	mov	r3,zero
   4469c:	12400015 	stw	r9,0(r2)
   446a0:	20805215 	stw	r2,328(r4)
   446a4:	10006215 	stw	zero,392(r2)
   446a8:	10006315 	stw	zero,396(r2)
   446ac:	883fde26 	beq	r17,zero,44628 <__register_exitproc+0x3c>
   446b0:	18c9883a 	add	r4,r3,r3
   446b4:	2109883a 	add	r4,r4,r4
   446b8:	1109883a 	add	r4,r2,r4
   446bc:	21802215 	stw	r6,136(r4)
   446c0:	01800044 	movi	r6,1
   446c4:	12406217 	ldw	r9,392(r2)
   446c8:	30cc983a 	sll	r6,r6,r3
   446cc:	4992b03a 	or	r9,r9,r6
   446d0:	12406215 	stw	r9,392(r2)
   446d4:	21c04215 	stw	r7,264(r4)
   446d8:	01000084 	movi	r4,2
   446dc:	893fd21e 	bne	r17,r4,44628 <__register_exitproc+0x3c>
   446e0:	11006317 	ldw	r4,396(r2)
   446e4:	218cb03a 	or	r6,r4,r6
   446e8:	11806315 	stw	r6,396(r2)
   446ec:	003fce06 	br	44628 <__register_exitproc+0x3c>
   446f0:	18805304 	addi	r2,r3,332
   446f4:	18805215 	stw	r2,328(r3)
   446f8:	003fc606 	br	44614 <__register_exitproc+0x28>
   446fc:	00bfffc4 	movi	r2,-1
   44700:	003fd006 	br	44644 <__register_exitproc+0x58>

00044704 <__call_exitprocs>:
   44704:	defff504 	addi	sp,sp,-44
   44708:	df000915 	stw	fp,36(sp)
   4470c:	dd400615 	stw	r21,24(sp)
   44710:	dc800315 	stw	r18,12(sp)
   44714:	dfc00a15 	stw	ra,40(sp)
   44718:	ddc00815 	stw	r23,32(sp)
   4471c:	dd800715 	stw	r22,28(sp)
   44720:	dd000515 	stw	r20,20(sp)
   44724:	dcc00415 	stw	r19,16(sp)
   44728:	dc400215 	stw	r17,8(sp)
   4472c:	dc000115 	stw	r16,4(sp)
   44730:	d9000015 	stw	r4,0(sp)
   44734:	2839883a 	mov	fp,r5
   44738:	04800044 	movi	r18,1
   4473c:	057fffc4 	movi	r21,-1
   44740:	00800134 	movhi	r2,4
   44744:	1094c104 	addi	r2,r2,21252
   44748:	12000017 	ldw	r8,0(r2)
   4474c:	45005217 	ldw	r20,328(r8)
   44750:	44c05204 	addi	r19,r8,328
   44754:	a0001c26 	beq	r20,zero,447c8 <__call_exitprocs+0xc4>
   44758:	a0800117 	ldw	r2,4(r20)
   4475c:	15ffffc4 	addi	r23,r2,-1
   44760:	b8000d16 	blt	r23,zero,44798 <__call_exitprocs+0x94>
   44764:	14000044 	addi	r16,r2,1
   44768:	8421883a 	add	r16,r16,r16
   4476c:	8421883a 	add	r16,r16,r16
   44770:	84402004 	addi	r17,r16,128
   44774:	a463883a 	add	r17,r20,r17
   44778:	a421883a 	add	r16,r20,r16
   4477c:	e0001e26 	beq	fp,zero,447f8 <__call_exitprocs+0xf4>
   44780:	80804017 	ldw	r2,256(r16)
   44784:	e0801c26 	beq	fp,r2,447f8 <__call_exitprocs+0xf4>
   44788:	bdffffc4 	addi	r23,r23,-1
   4478c:	843fff04 	addi	r16,r16,-4
   44790:	8c7fff04 	addi	r17,r17,-4
   44794:	bd7ff91e 	bne	r23,r21,4477c <__call_exitprocs+0x78>
   44798:	00800034 	movhi	r2,0
   4479c:	10800004 	addi	r2,r2,0
   447a0:	10000926 	beq	r2,zero,447c8 <__call_exitprocs+0xc4>
   447a4:	a0800117 	ldw	r2,4(r20)
   447a8:	1000301e 	bne	r2,zero,4486c <__call_exitprocs+0x168>
   447ac:	a0800017 	ldw	r2,0(r20)
   447b0:	10003226 	beq	r2,zero,4487c <__call_exitprocs+0x178>
   447b4:	a009883a 	mov	r4,r20
   447b8:	98800015 	stw	r2,0(r19)
   447bc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   447c0:	9d000017 	ldw	r20,0(r19)
   447c4:	a03fe41e 	bne	r20,zero,44758 <__call_exitprocs+0x54>
   447c8:	dfc00a17 	ldw	ra,40(sp)
   447cc:	df000917 	ldw	fp,36(sp)
   447d0:	ddc00817 	ldw	r23,32(sp)
   447d4:	dd800717 	ldw	r22,28(sp)
   447d8:	dd400617 	ldw	r21,24(sp)
   447dc:	dd000517 	ldw	r20,20(sp)
   447e0:	dcc00417 	ldw	r19,16(sp)
   447e4:	dc800317 	ldw	r18,12(sp)
   447e8:	dc400217 	ldw	r17,8(sp)
   447ec:	dc000117 	ldw	r16,4(sp)
   447f0:	dec00b04 	addi	sp,sp,44
   447f4:	f800283a 	ret
   447f8:	a0800117 	ldw	r2,4(r20)
   447fc:	80c00017 	ldw	r3,0(r16)
   44800:	10bfffc4 	addi	r2,r2,-1
   44804:	15c01426 	beq	r2,r23,44858 <__call_exitprocs+0x154>
   44808:	80000015 	stw	zero,0(r16)
   4480c:	183fde26 	beq	r3,zero,44788 <__call_exitprocs+0x84>
   44810:	95c8983a 	sll	r4,r18,r23
   44814:	a0806217 	ldw	r2,392(r20)
   44818:	a5800117 	ldw	r22,4(r20)
   4481c:	2084703a 	and	r2,r4,r2
   44820:	10000b26 	beq	r2,zero,44850 <__call_exitprocs+0x14c>
   44824:	a0806317 	ldw	r2,396(r20)
   44828:	2088703a 	and	r4,r4,r2
   4482c:	20000c1e 	bne	r4,zero,44860 <__call_exitprocs+0x15c>
   44830:	89400017 	ldw	r5,0(r17)
   44834:	d9000017 	ldw	r4,0(sp)
   44838:	183ee83a 	callr	r3
   4483c:	a0800117 	ldw	r2,4(r20)
   44840:	15bfbf1e 	bne	r2,r22,44740 <__call_exitprocs+0x3c>
   44844:	98800017 	ldw	r2,0(r19)
   44848:	153fcf26 	beq	r2,r20,44788 <__call_exitprocs+0x84>
   4484c:	003fbc06 	br	44740 <__call_exitprocs+0x3c>
   44850:	183ee83a 	callr	r3
   44854:	003ff906 	br	4483c <__call_exitprocs+0x138>
   44858:	a5c00115 	stw	r23,4(r20)
   4485c:	003feb06 	br	4480c <__call_exitprocs+0x108>
   44860:	89000017 	ldw	r4,0(r17)
   44864:	183ee83a 	callr	r3
   44868:	003ff406 	br	4483c <__call_exitprocs+0x138>
   4486c:	a0800017 	ldw	r2,0(r20)
   44870:	a027883a 	mov	r19,r20
   44874:	1029883a 	mov	r20,r2
   44878:	003fb606 	br	44754 <__call_exitprocs+0x50>
   4487c:	0005883a 	mov	r2,zero
   44880:	003ffb06 	br	44870 <__call_exitprocs+0x16c>

00044884 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   44884:	defffd04 	addi	sp,sp,-12
   44888:	df000215 	stw	fp,8(sp)
   4488c:	df000204 	addi	fp,sp,8
   44890:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   44894:	0001883a 	nop
   44898:	e0bfff17 	ldw	r2,-4(fp)
   4489c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   448a0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   448a4:	10000226 	beq	r2,zero,448b0 <_exit+0x2c>
    ALT_SIM_FAIL();
   448a8:	002af070 	cmpltui	zero,zero,43969
   448ac:	00000106 	br	448b4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   448b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   448b4:	003fff06 	br	448b4 <_exit+0x30>
