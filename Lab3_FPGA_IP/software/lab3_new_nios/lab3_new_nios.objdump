
lab3_new_nios.elf:     file format elf32-littlenios2
lab3_new_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000048b0 memsz 0x000048b0 flags r-x
    LOAD off    0x000058d0 vaddr 0x0000c8d0 paddr 0x0000d2fc align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006d28 vaddr 0x0000dd28 paddr 0x0000dd28 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000062fc  2**0
                  CONTENTS
  2 .text         00004864  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0000c884  0000c884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  0000c8d0  0000d2fc  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  0000dd28  0000dd28  00006d28  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000dd6c  0000dd6c  000062fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008c8  00000000  00000000  00006320  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000149da  00000000  00000000  00006be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000053cb  00000000  00000000  0001b5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000060ae  00000000  00000000  0002098d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001270  00000000  00000000  00026a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f10  00000000  00000000  00027cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00029bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0002e608  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005d0  00000000  00000000  0002e668  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00030bde  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00030be1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00030bed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00030bee  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00030bef  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00030bfa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00030c05  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00030c10  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  00030c18  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e8b  00000000  00000000  00030c4e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000307d6  00000000  00000000  00035ad9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c884 l    d  .rodata	00000000 .rodata
0000c8d0 l    d  .rwdata	00000000 .rwdata
0000dd28 l    d  .bss	00000000 .bss
0000dd6c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab3_new_nios_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00008248 l     F .text	00000008 __fp_unlock
0000825c l     F .text	0000019c __sinit.part.1
000083f8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000c8d0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0000aea4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000afb0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000afdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b0c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b1a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000d2f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b6e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b818 l     F .text	00000034 alt_dev_reg
0000d2a4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bc98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000be6c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bfac l     F .text	0000003c alt_get_errno
0000bfe8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ac9c g     F .text	00000054 _isatty_r
0000b3a4 g     F .text	0000007c alt_main
000080dc g     F .text	000000c0 _puts_r
0000a9c4 g     F .text	00000060 _lseek_r
0000d2fc g       *ABS*	00000000 __flash_rwdata_start
0000dd6c g       *ABS*	00000000 __alt_heap_start
00009f78 g     F .text	0000005c __sseek
00008598 g     F .text	00000010 __sinit
00008400 g     F .text	00000068 __sfmoreglue
0000b444 g     F .text	00000024 __malloc_unlock
00009664 g     F .text	0000015c memmove
00008580 g     F .text	00000018 _cleanup
0000c200 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ac40 g     F .text	0000005c _fstat_r
0000dd34 g     O .bss	00000004 errno
00009ef4 g     F .text	00000008 __seofread
0000dd3c g     O .bss	00000004 alt_argv
000152d0 g       *ABS*	00000000 _gp
0000b6b4 g     F .text	00000030 usleep
0000d124 g     O .rwdata	00000180 alt_fd_list
0000c224 g     F .text	00000090 alt_find_dev
0000951c g     F .text	00000148 memcpy
00008250 g     F .text	0000000c _cleanup_r
0000bf30 g     F .text	0000007c alt_io_redirect
0000c884 g       *ABS*	00000000 __DTOR_END__
0000819c g     F .text	00000014 puts
0000b978 g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000ade8 g     F .text	00000064 .hidden __udivsi3
0000b104 g     F .text	000000a4 isatty
0000c460 g     F .text	00000090 alt_icache_flush
0000dd30 g     O .bss	00000004 __malloc_top_pad
000085e8 g     F .text	000004bc __sfvwrite_r
00009e4c g     F .text	00000054 _sbrk_r
0000abe0 g     F .text	00000060 _read_r
0000d2f0 g     O .rwdata	00000004 alt_max_fd
0000a1e4 g     F .text	000000f0 _fclose_r
0000a560 g     F .text	00000030 fflush
0000dd2c g     O .bss	00000004 __malloc_max_sbrked_mem
0000b2d0 g     F .text	000000d4 lseek
0000d2d0 g     O .rwdata	00000004 _global_impure_ptr
000098e8 g     F .text	00000564 _realloc_r
0000dd6c g       *ABS*	00000000 __bss_end
000085b8 g     F .text	00000018 __fp_lock_all
0000d0fc g     O .rwdata	00000028 alt_dev_null
0000bc50 g     F .text	00000048 alt_dcache_flush_all
0000d2fc g       *ABS*	00000000 __ram_rwdata_end
0000d2e8 g     O .rwdata	00000008 alt_dev_list
0000b720 g     F .text	000000f8 write
0000c8d0 g       *ABS*	00000000 __ram_rodata_end
0000b018 g     F .text	000000b0 fstat
0000ae4c g     F .text	00000058 .hidden __umodsi3
0000dd6c g       *ABS*	00000000 end
0000c884 g       *ABS*	00000000 __CTOR_LIST__
0000fd00 g       *ABS*	00000000 __alt_stack_pointer
0000ba64 g     F .text	00000094 altera_avalon_jtag_uart_write
000085a8 g     F .text	00000004 __sfp_lock_acquire
00009438 g     F .text	000000e4 memchr
0000a6b4 g     F .text	00000310 _free_r
0000c6d0 g     F .text	00000180 __call_exitprocs
0000d2d8 g     O .rwdata	00000004 __malloc_sbrk_base
00008020 g     F .text	0000004c _start
0000b4a4 g     F .text	000000fc read
0000b884 g     F .text	00000034 alt_sys_init
0000c5b8 g     F .text	00000118 __register_exitproc
0000c8d0 g       *ABS*	00000000 __ram_rwdata_start
0000c884 g       *ABS*	00000000 __ram_rodata_start
0000dd44 g     O .bss	00000028 __malloc_current_mallinfo
0000b8b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c3bc g     F .text	000000a4 alt_get_fd
0000baf8 g     F .text	00000158 alt_busy_sleep
0000a190 g     F .text	00000054 _close_r
0000c53c g     F .text	0000007c memcmp
0000dd6c g       *ABS*	00000000 __alt_stack_base
0000a03c g     F .text	00000154 __swsetup_r
00008468 g     F .text	00000118 __sfp
0000ccf4 g     O .rwdata	00000408 __malloc_av_
000085b4 g     F .text	00000004 __sinit_lock_release
00009ea0 g     F .text	00000054 __sread
0000c2b4 g     F .text	00000108 alt_find_file
0000bcd4 g     F .text	000000a4 alt_dev_llist_insert
0000b420 g     F .text	00000024 __malloc_lock
0000b604 g     F .text	000000b0 sbrk
0000a504 g     F .text	0000005c _fflush_r
0000dd28 g       *ABS*	00000000 __bss_start
000097c0 g     F .text	00000128 memset
0000806c g     F .text	00000070 main
0000dd40 g     O .bss	00000004 alt_envp
0000dd28 g     O .bss	00000004 __malloc_max_total_mem
0000b918 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009fd4 g     F .text	00000008 __sclose
0000fd00 g       *ABS*	00000000 __alt_heap_limit
0000a2d4 g     F .text	00000014 fclose
00008c2c g     F .text	0000080c _malloc_r
0000d2f4 g     O .rwdata	00000004 alt_errno
00008aa4 g     F .text	000000c4 _fwalk
0000acf0 g     F .text	00000084 .hidden __divsi3
0000a590 g     F .text	00000124 _malloc_trim_r
0000c884 g       *ABS*	00000000 __CTOR_END__
0000c884 g       *ABS*	00000000 __flash_rodata_start
0000c884 g       *ABS*	00000000 __DTOR_LIST__
0000b84c g     F .text	00000038 alt_irq_init
0000b5a0 g     F .text	00000064 alt_release_fd
0000c4f0 g     F .text	00000014 atexit
00009fdc g     F .text	00000060 _write_r
0000d2d4 g     O .rwdata	00000004 _impure_ptr
0000dd38 g     O .bss	00000004 alt_argc
0000a2e8 g     F .text	0000021c __sflush_r
0000bdd8 g     F .text	00000060 _do_dtors
000085d0 g     F .text	00000018 __fp_unlock_all
0000d2e0 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000d2fc g       *ABS*	00000000 _edata
0000dd6c g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00009efc g     F .text	0000007c __swrite
0000d2dc g     O .rwdata	00000004 __malloc_trim_threshold
0000c504 g     F .text	00000038 exit
00008b68 g     F .text	000000c4 _fwalk_reent
0000ad74 g     F .text	00000074 .hidden __modsi3
0000fd00 g       *ABS*	00000000 __alt_data_end
000085ac g     F .text	00000004 __sfp_lock_release
0000c850 g     F .text	00000034 _exit
0000aa24 g     F .text	000001bc __smakebuf_r
000081b0 g     F .text	00000098 strlen
0000c0ac g     F .text	00000154 open
0000be38 g     F .text	00000034 alt_icache_flush_all
0000bd78 g     F .text	00000060 _do_ctors
0000aee0 g     F .text	000000d0 close
0000b210 g     F .text	00000084 alt_load
000085b0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08600814 	ori	at,at,32800
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	deff4014 	ori	sp,sp,64768
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d694b414 	ori	gp,gp,21200
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10b74a14 	ori	r2,r2,56616

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18f75b14 	ori	r3,r3,56684

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	000b2100 	call	b210 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	000b3a40 	call	b3a4 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <alt_after_alt_main>

0000806c <main>:
//#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int main(void){
    806c:	defffc04 	addi	sp,sp,-16
    8070:	dfc00315 	stw	ra,12(sp)
    8074:	df000215 	stw	fp,8(sp)
    8078:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
    807c:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
    8080:	00800074 	movhi	r2,1
    8084:	10840004 	addi	r2,r2,4096
    8088:	e0bfff15 	stw	r2,-4(fp)

#ifndef SIM
  printf("Embarcados++ \n");
    808c:	01000074 	movhi	r4,1
    8090:	21322104 	addi	r4,r4,-14204
    8094:	000819c0 	call	819c <puts>
#endif

  while(1){
      if (led < 4){
    8098:	e0bffe17 	ldw	r2,-8(fp)
    809c:	10800128 	cmpgeui	r2,r2,4
    80a0:	10000c1e 	bne	r2,zero,80d4 <main+0x68>
          *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
    80a4:	e0bfff17 	ldw	r2,-4(fp)
    80a8:	10c00104 	addi	r3,r2,4
    80ac:	e0bffe17 	ldw	r2,-8(fp)
    80b0:	11000044 	addi	r4,r2,1
    80b4:	e13ffe15 	stw	r4,-8(fp)
    80b8:	01000044 	movi	r4,1
    80bc:	2084983a 	sll	r2,r4,r2
    80c0:	18800015 	stw	r2,0(r3)
#ifndef SIM
          usleep(500000); // remover durante a simulação
    80c4:	01000234 	movhi	r4,8
    80c8:	21284804 	addi	r4,r4,-24288
    80cc:	000b6b40 	call	b6b4 <usleep>
    80d0:	003ff106 	br	8098 <main+0x2c>
#endif
      }
      else{
          led = 0;
    80d4:	e03ffe15 	stw	zero,-8(fp)
      }
  };
    80d8:	003fef06 	br	8098 <main+0x2c>

000080dc <_puts_r>:
    80dc:	defff604 	addi	sp,sp,-40
    80e0:	dc000715 	stw	r16,28(sp)
    80e4:	2021883a 	mov	r16,r4
    80e8:	2809883a 	mov	r4,r5
    80ec:	dc400815 	stw	r17,32(sp)
    80f0:	dfc00915 	stw	ra,36(sp)
    80f4:	2823883a 	mov	r17,r5
    80f8:	00081b00 	call	81b0 <strlen>
    80fc:	10c00044 	addi	r3,r2,1
    8100:	d8800115 	stw	r2,4(sp)
    8104:	00800074 	movhi	r2,1
    8108:	10b22504 	addi	r2,r2,-14188
    810c:	d8800215 	stw	r2,8(sp)
    8110:	00800044 	movi	r2,1
    8114:	d8800315 	stw	r2,12(sp)
    8118:	00800084 	movi	r2,2
    811c:	dc400015 	stw	r17,0(sp)
    8120:	d8c00615 	stw	r3,24(sp)
    8124:	dec00415 	stw	sp,16(sp)
    8128:	d8800515 	stw	r2,20(sp)
    812c:	80000226 	beq	r16,zero,8138 <_puts_r+0x5c>
    8130:	80800e17 	ldw	r2,56(r16)
    8134:	10001426 	beq	r2,zero,8188 <_puts_r+0xac>
    8138:	81400217 	ldw	r5,8(r16)
    813c:	2880030b 	ldhu	r2,12(r5)
    8140:	10c8000c 	andi	r3,r2,8192
    8144:	1800061e 	bne	r3,zero,8160 <_puts_r+0x84>
    8148:	29001917 	ldw	r4,100(r5)
    814c:	00f7ffc4 	movi	r3,-8193
    8150:	10880014 	ori	r2,r2,8192
    8154:	20c6703a 	and	r3,r4,r3
    8158:	2880030d 	sth	r2,12(r5)
    815c:	28c01915 	stw	r3,100(r5)
    8160:	d9800404 	addi	r6,sp,16
    8164:	8009883a 	mov	r4,r16
    8168:	00085e80 	call	85e8 <__sfvwrite_r>
    816c:	1000091e 	bne	r2,zero,8194 <_puts_r+0xb8>
    8170:	00800284 	movi	r2,10
    8174:	dfc00917 	ldw	ra,36(sp)
    8178:	dc400817 	ldw	r17,32(sp)
    817c:	dc000717 	ldw	r16,28(sp)
    8180:	dec00a04 	addi	sp,sp,40
    8184:	f800283a 	ret
    8188:	8009883a 	mov	r4,r16
    818c:	00085980 	call	8598 <__sinit>
    8190:	003fe906 	br	8138 <_puts_r+0x5c>
    8194:	00bfffc4 	movi	r2,-1
    8198:	003ff606 	br	8174 <_puts_r+0x98>

0000819c <puts>:
    819c:	00800074 	movhi	r2,1
    81a0:	10b4b504 	addi	r2,r2,-11564
    81a4:	200b883a 	mov	r5,r4
    81a8:	11000017 	ldw	r4,0(r2)
    81ac:	00080dc1 	jmpi	80dc <_puts_r>

000081b0 <strlen>:
    81b0:	208000cc 	andi	r2,r4,3
    81b4:	10002026 	beq	r2,zero,8238 <strlen+0x88>
    81b8:	20800007 	ldb	r2,0(r4)
    81bc:	10002026 	beq	r2,zero,8240 <strlen+0x90>
    81c0:	2005883a 	mov	r2,r4
    81c4:	00000206 	br	81d0 <strlen+0x20>
    81c8:	10c00007 	ldb	r3,0(r2)
    81cc:	18001826 	beq	r3,zero,8230 <strlen+0x80>
    81d0:	10800044 	addi	r2,r2,1
    81d4:	10c000cc 	andi	r3,r2,3
    81d8:	183ffb1e 	bne	r3,zero,81c8 <strlen+0x18>
    81dc:	10c00017 	ldw	r3,0(r2)
    81e0:	01ffbff4 	movhi	r7,65279
    81e4:	39ffbfc4 	addi	r7,r7,-257
    81e8:	00ca303a 	nor	r5,zero,r3
    81ec:	01a02074 	movhi	r6,32897
    81f0:	19c7883a 	add	r3,r3,r7
    81f4:	31a02004 	addi	r6,r6,-32640
    81f8:	1946703a 	and	r3,r3,r5
    81fc:	1986703a 	and	r3,r3,r6
    8200:	1800091e 	bne	r3,zero,8228 <strlen+0x78>
    8204:	10800104 	addi	r2,r2,4
    8208:	10c00017 	ldw	r3,0(r2)
    820c:	19cb883a 	add	r5,r3,r7
    8210:	00c6303a 	nor	r3,zero,r3
    8214:	28c6703a 	and	r3,r5,r3
    8218:	1986703a 	and	r3,r3,r6
    821c:	183ff926 	beq	r3,zero,8204 <strlen+0x54>
    8220:	00000106 	br	8228 <strlen+0x78>
    8224:	10800044 	addi	r2,r2,1
    8228:	10c00007 	ldb	r3,0(r2)
    822c:	183ffd1e 	bne	r3,zero,8224 <strlen+0x74>
    8230:	1105c83a 	sub	r2,r2,r4
    8234:	f800283a 	ret
    8238:	2005883a 	mov	r2,r4
    823c:	003fe706 	br	81dc <strlen+0x2c>
    8240:	0005883a 	mov	r2,zero
    8244:	f800283a 	ret

00008248 <__fp_unlock>:
    8248:	0005883a 	mov	r2,zero
    824c:	f800283a 	ret

00008250 <_cleanup_r>:
    8250:	01400074 	movhi	r5,1
    8254:	29687904 	addi	r5,r5,-24092
    8258:	0008b681 	jmpi	8b68 <_fwalk_reent>

0000825c <__sinit.part.1>:
    825c:	defff704 	addi	sp,sp,-36
    8260:	00c00074 	movhi	r3,1
    8264:	dfc00815 	stw	ra,32(sp)
    8268:	ddc00715 	stw	r23,28(sp)
    826c:	dd800615 	stw	r22,24(sp)
    8270:	dd400515 	stw	r21,20(sp)
    8274:	dd000415 	stw	r20,16(sp)
    8278:	dcc00315 	stw	r19,12(sp)
    827c:	dc800215 	stw	r18,8(sp)
    8280:	dc400115 	stw	r17,4(sp)
    8284:	dc000015 	stw	r16,0(sp)
    8288:	18e09404 	addi	r3,r3,-32176
    828c:	24000117 	ldw	r16,4(r4)
    8290:	20c00f15 	stw	r3,60(r4)
    8294:	2080bb04 	addi	r2,r4,748
    8298:	00c000c4 	movi	r3,3
    829c:	20c0b915 	stw	r3,740(r4)
    82a0:	2080ba15 	stw	r2,744(r4)
    82a4:	2000b815 	stw	zero,736(r4)
    82a8:	05c00204 	movi	r23,8
    82ac:	00800104 	movi	r2,4
    82b0:	2025883a 	mov	r18,r4
    82b4:	b80d883a 	mov	r6,r23
    82b8:	81001704 	addi	r4,r16,92
    82bc:	000b883a 	mov	r5,zero
    82c0:	80000015 	stw	zero,0(r16)
    82c4:	80000115 	stw	zero,4(r16)
    82c8:	80000215 	stw	zero,8(r16)
    82cc:	8080030d 	sth	r2,12(r16)
    82d0:	80001915 	stw	zero,100(r16)
    82d4:	8000038d 	sth	zero,14(r16)
    82d8:	80000415 	stw	zero,16(r16)
    82dc:	80000515 	stw	zero,20(r16)
    82e0:	80000615 	stw	zero,24(r16)
    82e4:	00097c00 	call	97c0 <memset>
    82e8:	05800074 	movhi	r22,1
    82ec:	94400217 	ldw	r17,8(r18)
    82f0:	05400074 	movhi	r21,1
    82f4:	05000074 	movhi	r20,1
    82f8:	04c00074 	movhi	r19,1
    82fc:	b5a7a804 	addi	r22,r22,-24928
    8300:	ad67bf04 	addi	r21,r21,-24836
    8304:	a527de04 	addi	r20,r20,-24712
    8308:	9ce7f504 	addi	r19,r19,-24620
    830c:	85800815 	stw	r22,32(r16)
    8310:	85400915 	stw	r21,36(r16)
    8314:	85000a15 	stw	r20,40(r16)
    8318:	84c00b15 	stw	r19,44(r16)
    831c:	84000715 	stw	r16,28(r16)
    8320:	00800284 	movi	r2,10
    8324:	8880030d 	sth	r2,12(r17)
    8328:	00800044 	movi	r2,1
    832c:	b80d883a 	mov	r6,r23
    8330:	89001704 	addi	r4,r17,92
    8334:	000b883a 	mov	r5,zero
    8338:	88000015 	stw	zero,0(r17)
    833c:	88000115 	stw	zero,4(r17)
    8340:	88000215 	stw	zero,8(r17)
    8344:	88001915 	stw	zero,100(r17)
    8348:	8880038d 	sth	r2,14(r17)
    834c:	88000415 	stw	zero,16(r17)
    8350:	88000515 	stw	zero,20(r17)
    8354:	88000615 	stw	zero,24(r17)
    8358:	00097c00 	call	97c0 <memset>
    835c:	94000317 	ldw	r16,12(r18)
    8360:	00800484 	movi	r2,18
    8364:	8c400715 	stw	r17,28(r17)
    8368:	8d800815 	stw	r22,32(r17)
    836c:	8d400915 	stw	r21,36(r17)
    8370:	8d000a15 	stw	r20,40(r17)
    8374:	8cc00b15 	stw	r19,44(r17)
    8378:	8080030d 	sth	r2,12(r16)
    837c:	00800084 	movi	r2,2
    8380:	80000015 	stw	zero,0(r16)
    8384:	80000115 	stw	zero,4(r16)
    8388:	80000215 	stw	zero,8(r16)
    838c:	80001915 	stw	zero,100(r16)
    8390:	8080038d 	sth	r2,14(r16)
    8394:	80000415 	stw	zero,16(r16)
    8398:	80000515 	stw	zero,20(r16)
    839c:	80000615 	stw	zero,24(r16)
    83a0:	b80d883a 	mov	r6,r23
    83a4:	000b883a 	mov	r5,zero
    83a8:	81001704 	addi	r4,r16,92
    83ac:	00097c00 	call	97c0 <memset>
    83b0:	00800044 	movi	r2,1
    83b4:	84000715 	stw	r16,28(r16)
    83b8:	85800815 	stw	r22,32(r16)
    83bc:	85400915 	stw	r21,36(r16)
    83c0:	85000a15 	stw	r20,40(r16)
    83c4:	84c00b15 	stw	r19,44(r16)
    83c8:	90800e15 	stw	r2,56(r18)
    83cc:	dfc00817 	ldw	ra,32(sp)
    83d0:	ddc00717 	ldw	r23,28(sp)
    83d4:	dd800617 	ldw	r22,24(sp)
    83d8:	dd400517 	ldw	r21,20(sp)
    83dc:	dd000417 	ldw	r20,16(sp)
    83e0:	dcc00317 	ldw	r19,12(sp)
    83e4:	dc800217 	ldw	r18,8(sp)
    83e8:	dc400117 	ldw	r17,4(sp)
    83ec:	dc000017 	ldw	r16,0(sp)
    83f0:	dec00904 	addi	sp,sp,36
    83f4:	f800283a 	ret

000083f8 <__fp_lock>:
    83f8:	0005883a 	mov	r2,zero
    83fc:	f800283a 	ret

00008400 <__sfmoreglue>:
    8400:	defffc04 	addi	sp,sp,-16
    8404:	dc400115 	stw	r17,4(sp)
    8408:	2c7fffc4 	addi	r17,r5,-1
    840c:	8c401a24 	muli	r17,r17,104
    8410:	dc800215 	stw	r18,8(sp)
    8414:	2825883a 	mov	r18,r5
    8418:	89401d04 	addi	r5,r17,116
    841c:	dc000015 	stw	r16,0(sp)
    8420:	dfc00315 	stw	ra,12(sp)
    8424:	0008c2c0 	call	8c2c <_malloc_r>
    8428:	1021883a 	mov	r16,r2
    842c:	10000726 	beq	r2,zero,844c <__sfmoreglue+0x4c>
    8430:	11000304 	addi	r4,r2,12
    8434:	10000015 	stw	zero,0(r2)
    8438:	14800115 	stw	r18,4(r2)
    843c:	11000215 	stw	r4,8(r2)
    8440:	89801a04 	addi	r6,r17,104
    8444:	000b883a 	mov	r5,zero
    8448:	00097c00 	call	97c0 <memset>
    844c:	8005883a 	mov	r2,r16
    8450:	dfc00317 	ldw	ra,12(sp)
    8454:	dc800217 	ldw	r18,8(sp)
    8458:	dc400117 	ldw	r17,4(sp)
    845c:	dc000017 	ldw	r16,0(sp)
    8460:	dec00404 	addi	sp,sp,16
    8464:	f800283a 	ret

00008468 <__sfp>:
    8468:	defffb04 	addi	sp,sp,-20
    846c:	dc000015 	stw	r16,0(sp)
    8470:	04000074 	movhi	r16,1
    8474:	8434b404 	addi	r16,r16,-11568
    8478:	dcc00315 	stw	r19,12(sp)
    847c:	2027883a 	mov	r19,r4
    8480:	81000017 	ldw	r4,0(r16)
    8484:	dfc00415 	stw	ra,16(sp)
    8488:	dc800215 	stw	r18,8(sp)
    848c:	20800e17 	ldw	r2,56(r4)
    8490:	dc400115 	stw	r17,4(sp)
    8494:	1000021e 	bne	r2,zero,84a0 <__sfp+0x38>
    8498:	000825c0 	call	825c <__sinit.part.1>
    849c:	81000017 	ldw	r4,0(r16)
    84a0:	2480b804 	addi	r18,r4,736
    84a4:	047fffc4 	movi	r17,-1
    84a8:	91000117 	ldw	r4,4(r18)
    84ac:	94000217 	ldw	r16,8(r18)
    84b0:	213fffc4 	addi	r4,r4,-1
    84b4:	20000a16 	blt	r4,zero,84e0 <__sfp+0x78>
    84b8:	8080030f 	ldh	r2,12(r16)
    84bc:	10000c26 	beq	r2,zero,84f0 <__sfp+0x88>
    84c0:	80c01d04 	addi	r3,r16,116
    84c4:	00000206 	br	84d0 <__sfp+0x68>
    84c8:	18bfe60f 	ldh	r2,-104(r3)
    84cc:	10000826 	beq	r2,zero,84f0 <__sfp+0x88>
    84d0:	213fffc4 	addi	r4,r4,-1
    84d4:	1c3ffd04 	addi	r16,r3,-12
    84d8:	18c01a04 	addi	r3,r3,104
    84dc:	247ffa1e 	bne	r4,r17,84c8 <__sfp+0x60>
    84e0:	90800017 	ldw	r2,0(r18)
    84e4:	10001d26 	beq	r2,zero,855c <__sfp+0xf4>
    84e8:	1025883a 	mov	r18,r2
    84ec:	003fee06 	br	84a8 <__sfp+0x40>
    84f0:	00bfffc4 	movi	r2,-1
    84f4:	8080038d 	sth	r2,14(r16)
    84f8:	00800044 	movi	r2,1
    84fc:	8080030d 	sth	r2,12(r16)
    8500:	80001915 	stw	zero,100(r16)
    8504:	80000015 	stw	zero,0(r16)
    8508:	80000215 	stw	zero,8(r16)
    850c:	80000115 	stw	zero,4(r16)
    8510:	80000415 	stw	zero,16(r16)
    8514:	80000515 	stw	zero,20(r16)
    8518:	80000615 	stw	zero,24(r16)
    851c:	01800204 	movi	r6,8
    8520:	000b883a 	mov	r5,zero
    8524:	81001704 	addi	r4,r16,92
    8528:	00097c00 	call	97c0 <memset>
    852c:	8005883a 	mov	r2,r16
    8530:	80000c15 	stw	zero,48(r16)
    8534:	80000d15 	stw	zero,52(r16)
    8538:	80001115 	stw	zero,68(r16)
    853c:	80001215 	stw	zero,72(r16)
    8540:	dfc00417 	ldw	ra,16(sp)
    8544:	dcc00317 	ldw	r19,12(sp)
    8548:	dc800217 	ldw	r18,8(sp)
    854c:	dc400117 	ldw	r17,4(sp)
    8550:	dc000017 	ldw	r16,0(sp)
    8554:	dec00504 	addi	sp,sp,20
    8558:	f800283a 	ret
    855c:	01400104 	movi	r5,4
    8560:	9809883a 	mov	r4,r19
    8564:	00084000 	call	8400 <__sfmoreglue>
    8568:	90800015 	stw	r2,0(r18)
    856c:	103fde1e 	bne	r2,zero,84e8 <__sfp+0x80>
    8570:	00800304 	movi	r2,12
    8574:	98800015 	stw	r2,0(r19)
    8578:	0005883a 	mov	r2,zero
    857c:	003ff006 	br	8540 <__sfp+0xd8>

00008580 <_cleanup>:
    8580:	00800074 	movhi	r2,1
    8584:	10b4b404 	addi	r2,r2,-11568
    8588:	11000017 	ldw	r4,0(r2)
    858c:	01400074 	movhi	r5,1
    8590:	29687904 	addi	r5,r5,-24092
    8594:	0008b681 	jmpi	8b68 <_fwalk_reent>

00008598 <__sinit>:
    8598:	20800e17 	ldw	r2,56(r4)
    859c:	10000126 	beq	r2,zero,85a4 <__sinit+0xc>
    85a0:	f800283a 	ret
    85a4:	000825c1 	jmpi	825c <__sinit.part.1>

000085a8 <__sfp_lock_acquire>:
    85a8:	f800283a 	ret

000085ac <__sfp_lock_release>:
    85ac:	f800283a 	ret

000085b0 <__sinit_lock_acquire>:
    85b0:	f800283a 	ret

000085b4 <__sinit_lock_release>:
    85b4:	f800283a 	ret

000085b8 <__fp_lock_all>:
    85b8:	00800074 	movhi	r2,1
    85bc:	10b4b504 	addi	r2,r2,-11564
    85c0:	11000017 	ldw	r4,0(r2)
    85c4:	01400074 	movhi	r5,1
    85c8:	2960fe04 	addi	r5,r5,-31752
    85cc:	0008aa41 	jmpi	8aa4 <_fwalk>

000085d0 <__fp_unlock_all>:
    85d0:	00800074 	movhi	r2,1
    85d4:	10b4b504 	addi	r2,r2,-11564
    85d8:	11000017 	ldw	r4,0(r2)
    85dc:	01400074 	movhi	r5,1
    85e0:	29609204 	addi	r5,r5,-32184
    85e4:	0008aa41 	jmpi	8aa4 <_fwalk>

000085e8 <__sfvwrite_r>:
    85e8:	30800217 	ldw	r2,8(r6)
    85ec:	10006726 	beq	r2,zero,878c <__sfvwrite_r+0x1a4>
    85f0:	28c0030b 	ldhu	r3,12(r5)
    85f4:	defff404 	addi	sp,sp,-48
    85f8:	dd400715 	stw	r21,28(sp)
    85fc:	dd000615 	stw	r20,24(sp)
    8600:	dc000215 	stw	r16,8(sp)
    8604:	dfc00b15 	stw	ra,44(sp)
    8608:	df000a15 	stw	fp,40(sp)
    860c:	ddc00915 	stw	r23,36(sp)
    8610:	dd800815 	stw	r22,32(sp)
    8614:	dcc00515 	stw	r19,20(sp)
    8618:	dc800415 	stw	r18,16(sp)
    861c:	dc400315 	stw	r17,12(sp)
    8620:	1880020c 	andi	r2,r3,8
    8624:	2821883a 	mov	r16,r5
    8628:	202b883a 	mov	r21,r4
    862c:	3029883a 	mov	r20,r6
    8630:	10002726 	beq	r2,zero,86d0 <__sfvwrite_r+0xe8>
    8634:	28800417 	ldw	r2,16(r5)
    8638:	10002526 	beq	r2,zero,86d0 <__sfvwrite_r+0xe8>
    863c:	1880008c 	andi	r2,r3,2
    8640:	a4400017 	ldw	r17,0(r20)
    8644:	10002a26 	beq	r2,zero,86f0 <__sfvwrite_r+0x108>
    8648:	05a00034 	movhi	r22,32768
    864c:	0027883a 	mov	r19,zero
    8650:	0025883a 	mov	r18,zero
    8654:	b5bf0004 	addi	r22,r22,-1024
    8658:	980d883a 	mov	r6,r19
    865c:	a809883a 	mov	r4,r21
    8660:	90004626 	beq	r18,zero,877c <__sfvwrite_r+0x194>
    8664:	900f883a 	mov	r7,r18
    8668:	b480022e 	bgeu	r22,r18,8674 <__sfvwrite_r+0x8c>
    866c:	01e00034 	movhi	r7,32768
    8670:	39ff0004 	addi	r7,r7,-1024
    8674:	80800917 	ldw	r2,36(r16)
    8678:	81400717 	ldw	r5,28(r16)
    867c:	103ee83a 	callr	r2
    8680:	0080570e 	bge	zero,r2,87e0 <__sfvwrite_r+0x1f8>
    8684:	a0c00217 	ldw	r3,8(r20)
    8688:	98a7883a 	add	r19,r19,r2
    868c:	90a5c83a 	sub	r18,r18,r2
    8690:	1885c83a 	sub	r2,r3,r2
    8694:	a0800215 	stw	r2,8(r20)
    8698:	103fef1e 	bne	r2,zero,8658 <__sfvwrite_r+0x70>
    869c:	0005883a 	mov	r2,zero
    86a0:	dfc00b17 	ldw	ra,44(sp)
    86a4:	df000a17 	ldw	fp,40(sp)
    86a8:	ddc00917 	ldw	r23,36(sp)
    86ac:	dd800817 	ldw	r22,32(sp)
    86b0:	dd400717 	ldw	r21,28(sp)
    86b4:	dd000617 	ldw	r20,24(sp)
    86b8:	dcc00517 	ldw	r19,20(sp)
    86bc:	dc800417 	ldw	r18,16(sp)
    86c0:	dc400317 	ldw	r17,12(sp)
    86c4:	dc000217 	ldw	r16,8(sp)
    86c8:	dec00c04 	addi	sp,sp,48
    86cc:	f800283a 	ret
    86d0:	800b883a 	mov	r5,r16
    86d4:	a809883a 	mov	r4,r21
    86d8:	000a03c0 	call	a03c <__swsetup_r>
    86dc:	1000eb1e 	bne	r2,zero,8a8c <__sfvwrite_r+0x4a4>
    86e0:	80c0030b 	ldhu	r3,12(r16)
    86e4:	a4400017 	ldw	r17,0(r20)
    86e8:	1880008c 	andi	r2,r3,2
    86ec:	103fd61e 	bne	r2,zero,8648 <__sfvwrite_r+0x60>
    86f0:	1880004c 	andi	r2,r3,1
    86f4:	10003f1e 	bne	r2,zero,87f4 <__sfvwrite_r+0x20c>
    86f8:	0039883a 	mov	fp,zero
    86fc:	0025883a 	mov	r18,zero
    8700:	90001a26 	beq	r18,zero,876c <__sfvwrite_r+0x184>
    8704:	1880800c 	andi	r2,r3,512
    8708:	84c00217 	ldw	r19,8(r16)
    870c:	10002126 	beq	r2,zero,8794 <__sfvwrite_r+0x1ac>
    8710:	982f883a 	mov	r23,r19
    8714:	94c09336 	bltu	r18,r19,8964 <__sfvwrite_r+0x37c>
    8718:	1881200c 	andi	r2,r3,1152
    871c:	10009e1e 	bne	r2,zero,8998 <__sfvwrite_r+0x3b0>
    8720:	81000017 	ldw	r4,0(r16)
    8724:	b80d883a 	mov	r6,r23
    8728:	e00b883a 	mov	r5,fp
    872c:	00096640 	call	9664 <memmove>
    8730:	80c00217 	ldw	r3,8(r16)
    8734:	81000017 	ldw	r4,0(r16)
    8738:	9005883a 	mov	r2,r18
    873c:	1ce7c83a 	sub	r19,r3,r19
    8740:	25cf883a 	add	r7,r4,r23
    8744:	84c00215 	stw	r19,8(r16)
    8748:	81c00015 	stw	r7,0(r16)
    874c:	a0c00217 	ldw	r3,8(r20)
    8750:	e0b9883a 	add	fp,fp,r2
    8754:	90a5c83a 	sub	r18,r18,r2
    8758:	18a7c83a 	sub	r19,r3,r2
    875c:	a4c00215 	stw	r19,8(r20)
    8760:	983fce26 	beq	r19,zero,869c <__sfvwrite_r+0xb4>
    8764:	80c0030b 	ldhu	r3,12(r16)
    8768:	903fe61e 	bne	r18,zero,8704 <__sfvwrite_r+0x11c>
    876c:	8f000017 	ldw	fp,0(r17)
    8770:	8c800117 	ldw	r18,4(r17)
    8774:	8c400204 	addi	r17,r17,8
    8778:	003fe106 	br	8700 <__sfvwrite_r+0x118>
    877c:	8cc00017 	ldw	r19,0(r17)
    8780:	8c800117 	ldw	r18,4(r17)
    8784:	8c400204 	addi	r17,r17,8
    8788:	003fb306 	br	8658 <__sfvwrite_r+0x70>
    878c:	0005883a 	mov	r2,zero
    8790:	f800283a 	ret
    8794:	81000017 	ldw	r4,0(r16)
    8798:	80800417 	ldw	r2,16(r16)
    879c:	11005736 	bltu	r2,r4,88fc <__sfvwrite_r+0x314>
    87a0:	85c00517 	ldw	r23,20(r16)
    87a4:	95c05536 	bltu	r18,r23,88fc <__sfvwrite_r+0x314>
    87a8:	00a00034 	movhi	r2,32768
    87ac:	10bfffc4 	addi	r2,r2,-1
    87b0:	9009883a 	mov	r4,r18
    87b4:	1480012e 	bgeu	r2,r18,87bc <__sfvwrite_r+0x1d4>
    87b8:	1009883a 	mov	r4,r2
    87bc:	b80b883a 	mov	r5,r23
    87c0:	000acf00 	call	acf0 <__divsi3>
    87c4:	15cf383a 	mul	r7,r2,r23
    87c8:	81400717 	ldw	r5,28(r16)
    87cc:	80800917 	ldw	r2,36(r16)
    87d0:	e00d883a 	mov	r6,fp
    87d4:	a809883a 	mov	r4,r21
    87d8:	103ee83a 	callr	r2
    87dc:	00bfdb16 	blt	zero,r2,874c <__sfvwrite_r+0x164>
    87e0:	8080030b 	ldhu	r2,12(r16)
    87e4:	10801014 	ori	r2,r2,64
    87e8:	8080030d 	sth	r2,12(r16)
    87ec:	00bfffc4 	movi	r2,-1
    87f0:	003fab06 	br	86a0 <__sfvwrite_r+0xb8>
    87f4:	0027883a 	mov	r19,zero
    87f8:	0011883a 	mov	r8,zero
    87fc:	0039883a 	mov	fp,zero
    8800:	0025883a 	mov	r18,zero
    8804:	90001f26 	beq	r18,zero,8884 <__sfvwrite_r+0x29c>
    8808:	40005a26 	beq	r8,zero,8974 <__sfvwrite_r+0x38c>
    880c:	982d883a 	mov	r22,r19
    8810:	94c0012e 	bgeu	r18,r19,8818 <__sfvwrite_r+0x230>
    8814:	902d883a 	mov	r22,r18
    8818:	81000017 	ldw	r4,0(r16)
    881c:	80800417 	ldw	r2,16(r16)
    8820:	b02f883a 	mov	r23,r22
    8824:	81c00517 	ldw	r7,20(r16)
    8828:	1100032e 	bgeu	r2,r4,8838 <__sfvwrite_r+0x250>
    882c:	80c00217 	ldw	r3,8(r16)
    8830:	38c7883a 	add	r3,r7,r3
    8834:	1d801816 	blt	r3,r22,8898 <__sfvwrite_r+0x2b0>
    8838:	b1c03e16 	blt	r22,r7,8934 <__sfvwrite_r+0x34c>
    883c:	80800917 	ldw	r2,36(r16)
    8840:	81400717 	ldw	r5,28(r16)
    8844:	e00d883a 	mov	r6,fp
    8848:	da000115 	stw	r8,4(sp)
    884c:	a809883a 	mov	r4,r21
    8850:	103ee83a 	callr	r2
    8854:	102f883a 	mov	r23,r2
    8858:	da000117 	ldw	r8,4(sp)
    885c:	00bfe00e 	bge	zero,r2,87e0 <__sfvwrite_r+0x1f8>
    8860:	9de7c83a 	sub	r19,r19,r23
    8864:	98001f26 	beq	r19,zero,88e4 <__sfvwrite_r+0x2fc>
    8868:	a0800217 	ldw	r2,8(r20)
    886c:	e5f9883a 	add	fp,fp,r23
    8870:	95e5c83a 	sub	r18,r18,r23
    8874:	15efc83a 	sub	r23,r2,r23
    8878:	a5c00215 	stw	r23,8(r20)
    887c:	b83f8726 	beq	r23,zero,869c <__sfvwrite_r+0xb4>
    8880:	903fe11e 	bne	r18,zero,8808 <__sfvwrite_r+0x220>
    8884:	8f000017 	ldw	fp,0(r17)
    8888:	8c800117 	ldw	r18,4(r17)
    888c:	0011883a 	mov	r8,zero
    8890:	8c400204 	addi	r17,r17,8
    8894:	003fdb06 	br	8804 <__sfvwrite_r+0x21c>
    8898:	180d883a 	mov	r6,r3
    889c:	e00b883a 	mov	r5,fp
    88a0:	da000115 	stw	r8,4(sp)
    88a4:	d8c00015 	stw	r3,0(sp)
    88a8:	00096640 	call	9664 <memmove>
    88ac:	d8c00017 	ldw	r3,0(sp)
    88b0:	80800017 	ldw	r2,0(r16)
    88b4:	800b883a 	mov	r5,r16
    88b8:	a809883a 	mov	r4,r21
    88bc:	10c5883a 	add	r2,r2,r3
    88c0:	80800015 	stw	r2,0(r16)
    88c4:	d8c00015 	stw	r3,0(sp)
    88c8:	000a5040 	call	a504 <_fflush_r>
    88cc:	d8c00017 	ldw	r3,0(sp)
    88d0:	da000117 	ldw	r8,4(sp)
    88d4:	103fc21e 	bne	r2,zero,87e0 <__sfvwrite_r+0x1f8>
    88d8:	182f883a 	mov	r23,r3
    88dc:	9de7c83a 	sub	r19,r19,r23
    88e0:	983fe11e 	bne	r19,zero,8868 <__sfvwrite_r+0x280>
    88e4:	800b883a 	mov	r5,r16
    88e8:	a809883a 	mov	r4,r21
    88ec:	000a5040 	call	a504 <_fflush_r>
    88f0:	103fbb1e 	bne	r2,zero,87e0 <__sfvwrite_r+0x1f8>
    88f4:	0011883a 	mov	r8,zero
    88f8:	003fdb06 	br	8868 <__sfvwrite_r+0x280>
    88fc:	94c0012e 	bgeu	r18,r19,8904 <__sfvwrite_r+0x31c>
    8900:	9027883a 	mov	r19,r18
    8904:	980d883a 	mov	r6,r19
    8908:	e00b883a 	mov	r5,fp
    890c:	00096640 	call	9664 <memmove>
    8910:	80800217 	ldw	r2,8(r16)
    8914:	80c00017 	ldw	r3,0(r16)
    8918:	14c5c83a 	sub	r2,r2,r19
    891c:	1cc7883a 	add	r3,r3,r19
    8920:	80800215 	stw	r2,8(r16)
    8924:	80c00015 	stw	r3,0(r16)
    8928:	10004326 	beq	r2,zero,8a38 <__sfvwrite_r+0x450>
    892c:	9805883a 	mov	r2,r19
    8930:	003f8606 	br	874c <__sfvwrite_r+0x164>
    8934:	b00d883a 	mov	r6,r22
    8938:	e00b883a 	mov	r5,fp
    893c:	da000115 	stw	r8,4(sp)
    8940:	00096640 	call	9664 <memmove>
    8944:	80800217 	ldw	r2,8(r16)
    8948:	80c00017 	ldw	r3,0(r16)
    894c:	da000117 	ldw	r8,4(sp)
    8950:	1585c83a 	sub	r2,r2,r22
    8954:	1dad883a 	add	r22,r3,r22
    8958:	80800215 	stw	r2,8(r16)
    895c:	85800015 	stw	r22,0(r16)
    8960:	003fbf06 	br	8860 <__sfvwrite_r+0x278>
    8964:	81000017 	ldw	r4,0(r16)
    8968:	9027883a 	mov	r19,r18
    896c:	902f883a 	mov	r23,r18
    8970:	003f6c06 	br	8724 <__sfvwrite_r+0x13c>
    8974:	900d883a 	mov	r6,r18
    8978:	01400284 	movi	r5,10
    897c:	e009883a 	mov	r4,fp
    8980:	00094380 	call	9438 <memchr>
    8984:	10003e26 	beq	r2,zero,8a80 <__sfvwrite_r+0x498>
    8988:	10800044 	addi	r2,r2,1
    898c:	1727c83a 	sub	r19,r2,fp
    8990:	02000044 	movi	r8,1
    8994:	003f9d06 	br	880c <__sfvwrite_r+0x224>
    8998:	80800517 	ldw	r2,20(r16)
    899c:	81400417 	ldw	r5,16(r16)
    89a0:	81c00017 	ldw	r7,0(r16)
    89a4:	10a7883a 	add	r19,r2,r2
    89a8:	9885883a 	add	r2,r19,r2
    89ac:	1026d7fa 	srli	r19,r2,31
    89b0:	396dc83a 	sub	r22,r7,r5
    89b4:	b1000044 	addi	r4,r22,1
    89b8:	9885883a 	add	r2,r19,r2
    89bc:	1027d07a 	srai	r19,r2,1
    89c0:	2485883a 	add	r2,r4,r18
    89c4:	980d883a 	mov	r6,r19
    89c8:	9880022e 	bgeu	r19,r2,89d4 <__sfvwrite_r+0x3ec>
    89cc:	1027883a 	mov	r19,r2
    89d0:	100d883a 	mov	r6,r2
    89d4:	18c1000c 	andi	r3,r3,1024
    89d8:	18001c26 	beq	r3,zero,8a4c <__sfvwrite_r+0x464>
    89dc:	300b883a 	mov	r5,r6
    89e0:	a809883a 	mov	r4,r21
    89e4:	0008c2c0 	call	8c2c <_malloc_r>
    89e8:	102f883a 	mov	r23,r2
    89ec:	10002926 	beq	r2,zero,8a94 <__sfvwrite_r+0x4ac>
    89f0:	81400417 	ldw	r5,16(r16)
    89f4:	b00d883a 	mov	r6,r22
    89f8:	1009883a 	mov	r4,r2
    89fc:	000951c0 	call	951c <memcpy>
    8a00:	8080030b 	ldhu	r2,12(r16)
    8a04:	00fedfc4 	movi	r3,-1153
    8a08:	10c4703a 	and	r2,r2,r3
    8a0c:	10802014 	ori	r2,r2,128
    8a10:	8080030d 	sth	r2,12(r16)
    8a14:	bd89883a 	add	r4,r23,r22
    8a18:	9d8fc83a 	sub	r7,r19,r22
    8a1c:	85c00415 	stw	r23,16(r16)
    8a20:	84c00515 	stw	r19,20(r16)
    8a24:	81000015 	stw	r4,0(r16)
    8a28:	9027883a 	mov	r19,r18
    8a2c:	81c00215 	stw	r7,8(r16)
    8a30:	902f883a 	mov	r23,r18
    8a34:	003f3b06 	br	8724 <__sfvwrite_r+0x13c>
    8a38:	800b883a 	mov	r5,r16
    8a3c:	a809883a 	mov	r4,r21
    8a40:	000a5040 	call	a504 <_fflush_r>
    8a44:	103fb926 	beq	r2,zero,892c <__sfvwrite_r+0x344>
    8a48:	003f6506 	br	87e0 <__sfvwrite_r+0x1f8>
    8a4c:	a809883a 	mov	r4,r21
    8a50:	00098e80 	call	98e8 <_realloc_r>
    8a54:	102f883a 	mov	r23,r2
    8a58:	103fee1e 	bne	r2,zero,8a14 <__sfvwrite_r+0x42c>
    8a5c:	81400417 	ldw	r5,16(r16)
    8a60:	a809883a 	mov	r4,r21
    8a64:	000a6b40 	call	a6b4 <_free_r>
    8a68:	8080030b 	ldhu	r2,12(r16)
    8a6c:	00ffdfc4 	movi	r3,-129
    8a70:	1884703a 	and	r2,r3,r2
    8a74:	00c00304 	movi	r3,12
    8a78:	a8c00015 	stw	r3,0(r21)
    8a7c:	003f5906 	br	87e4 <__sfvwrite_r+0x1fc>
    8a80:	94c00044 	addi	r19,r18,1
    8a84:	02000044 	movi	r8,1
    8a88:	003f6006 	br	880c <__sfvwrite_r+0x224>
    8a8c:	00bfffc4 	movi	r2,-1
    8a90:	003f0306 	br	86a0 <__sfvwrite_r+0xb8>
    8a94:	00800304 	movi	r2,12
    8a98:	a8800015 	stw	r2,0(r21)
    8a9c:	8080030b 	ldhu	r2,12(r16)
    8aa0:	003f5006 	br	87e4 <__sfvwrite_r+0x1fc>

00008aa4 <_fwalk>:
    8aa4:	defff704 	addi	sp,sp,-36
    8aa8:	dd000415 	stw	r20,16(sp)
    8aac:	dfc00815 	stw	ra,32(sp)
    8ab0:	ddc00715 	stw	r23,28(sp)
    8ab4:	dd800615 	stw	r22,24(sp)
    8ab8:	dd400515 	stw	r21,20(sp)
    8abc:	dcc00315 	stw	r19,12(sp)
    8ac0:	dc800215 	stw	r18,8(sp)
    8ac4:	dc400115 	stw	r17,4(sp)
    8ac8:	dc000015 	stw	r16,0(sp)
    8acc:	2500b804 	addi	r20,r4,736
    8ad0:	a0002326 	beq	r20,zero,8b60 <_fwalk+0xbc>
    8ad4:	282b883a 	mov	r21,r5
    8ad8:	002f883a 	mov	r23,zero
    8adc:	05800044 	movi	r22,1
    8ae0:	04ffffc4 	movi	r19,-1
    8ae4:	a4400117 	ldw	r17,4(r20)
    8ae8:	a4800217 	ldw	r18,8(r20)
    8aec:	8c7fffc4 	addi	r17,r17,-1
    8af0:	88000d16 	blt	r17,zero,8b28 <_fwalk+0x84>
    8af4:	94000304 	addi	r16,r18,12
    8af8:	94800384 	addi	r18,r18,14
    8afc:	8080000b 	ldhu	r2,0(r16)
    8b00:	8c7fffc4 	addi	r17,r17,-1
    8b04:	813ffd04 	addi	r4,r16,-12
    8b08:	b080042e 	bgeu	r22,r2,8b1c <_fwalk+0x78>
    8b0c:	9080000f 	ldh	r2,0(r18)
    8b10:	14c00226 	beq	r2,r19,8b1c <_fwalk+0x78>
    8b14:	a83ee83a 	callr	r21
    8b18:	b8aeb03a 	or	r23,r23,r2
    8b1c:	84001a04 	addi	r16,r16,104
    8b20:	94801a04 	addi	r18,r18,104
    8b24:	8cfff51e 	bne	r17,r19,8afc <_fwalk+0x58>
    8b28:	a5000017 	ldw	r20,0(r20)
    8b2c:	a03fed1e 	bne	r20,zero,8ae4 <_fwalk+0x40>
    8b30:	b805883a 	mov	r2,r23
    8b34:	dfc00817 	ldw	ra,32(sp)
    8b38:	ddc00717 	ldw	r23,28(sp)
    8b3c:	dd800617 	ldw	r22,24(sp)
    8b40:	dd400517 	ldw	r21,20(sp)
    8b44:	dd000417 	ldw	r20,16(sp)
    8b48:	dcc00317 	ldw	r19,12(sp)
    8b4c:	dc800217 	ldw	r18,8(sp)
    8b50:	dc400117 	ldw	r17,4(sp)
    8b54:	dc000017 	ldw	r16,0(sp)
    8b58:	dec00904 	addi	sp,sp,36
    8b5c:	f800283a 	ret
    8b60:	002f883a 	mov	r23,zero
    8b64:	003ff206 	br	8b30 <_fwalk+0x8c>

00008b68 <_fwalk_reent>:
    8b68:	defff704 	addi	sp,sp,-36
    8b6c:	dd000415 	stw	r20,16(sp)
    8b70:	dfc00815 	stw	ra,32(sp)
    8b74:	ddc00715 	stw	r23,28(sp)
    8b78:	dd800615 	stw	r22,24(sp)
    8b7c:	dd400515 	stw	r21,20(sp)
    8b80:	dcc00315 	stw	r19,12(sp)
    8b84:	dc800215 	stw	r18,8(sp)
    8b88:	dc400115 	stw	r17,4(sp)
    8b8c:	dc000015 	stw	r16,0(sp)
    8b90:	2500b804 	addi	r20,r4,736
    8b94:	a0002326 	beq	r20,zero,8c24 <_fwalk_reent+0xbc>
    8b98:	282b883a 	mov	r21,r5
    8b9c:	2027883a 	mov	r19,r4
    8ba0:	002f883a 	mov	r23,zero
    8ba4:	05800044 	movi	r22,1
    8ba8:	04bfffc4 	movi	r18,-1
    8bac:	a4400117 	ldw	r17,4(r20)
    8bb0:	a4000217 	ldw	r16,8(r20)
    8bb4:	8c7fffc4 	addi	r17,r17,-1
    8bb8:	88000c16 	blt	r17,zero,8bec <_fwalk_reent+0x84>
    8bbc:	84000304 	addi	r16,r16,12
    8bc0:	8080000b 	ldhu	r2,0(r16)
    8bc4:	8c7fffc4 	addi	r17,r17,-1
    8bc8:	817ffd04 	addi	r5,r16,-12
    8bcc:	b080052e 	bgeu	r22,r2,8be4 <_fwalk_reent+0x7c>
    8bd0:	8080008f 	ldh	r2,2(r16)
    8bd4:	9809883a 	mov	r4,r19
    8bd8:	14800226 	beq	r2,r18,8be4 <_fwalk_reent+0x7c>
    8bdc:	a83ee83a 	callr	r21
    8be0:	b8aeb03a 	or	r23,r23,r2
    8be4:	84001a04 	addi	r16,r16,104
    8be8:	8cbff51e 	bne	r17,r18,8bc0 <_fwalk_reent+0x58>
    8bec:	a5000017 	ldw	r20,0(r20)
    8bf0:	a03fee1e 	bne	r20,zero,8bac <_fwalk_reent+0x44>
    8bf4:	b805883a 	mov	r2,r23
    8bf8:	dfc00817 	ldw	ra,32(sp)
    8bfc:	ddc00717 	ldw	r23,28(sp)
    8c00:	dd800617 	ldw	r22,24(sp)
    8c04:	dd400517 	ldw	r21,20(sp)
    8c08:	dd000417 	ldw	r20,16(sp)
    8c0c:	dcc00317 	ldw	r19,12(sp)
    8c10:	dc800217 	ldw	r18,8(sp)
    8c14:	dc400117 	ldw	r17,4(sp)
    8c18:	dc000017 	ldw	r16,0(sp)
    8c1c:	dec00904 	addi	sp,sp,36
    8c20:	f800283a 	ret
    8c24:	002f883a 	mov	r23,zero
    8c28:	003ff206 	br	8bf4 <_fwalk_reent+0x8c>

00008c2c <_malloc_r>:
    8c2c:	defff504 	addi	sp,sp,-44
    8c30:	dc800315 	stw	r18,12(sp)
    8c34:	dfc00a15 	stw	ra,40(sp)
    8c38:	df000915 	stw	fp,36(sp)
    8c3c:	ddc00815 	stw	r23,32(sp)
    8c40:	dd800715 	stw	r22,28(sp)
    8c44:	dd400615 	stw	r21,24(sp)
    8c48:	dd000515 	stw	r20,20(sp)
    8c4c:	dcc00415 	stw	r19,16(sp)
    8c50:	dc400215 	stw	r17,8(sp)
    8c54:	dc000115 	stw	r16,4(sp)
    8c58:	288002c4 	addi	r2,r5,11
    8c5c:	00c00584 	movi	r3,22
    8c60:	2025883a 	mov	r18,r4
    8c64:	18807f2e 	bgeu	r3,r2,8e64 <_malloc_r+0x238>
    8c68:	047ffe04 	movi	r17,-8
    8c6c:	1462703a 	and	r17,r2,r17
    8c70:	8800a316 	blt	r17,zero,8f00 <_malloc_r+0x2d4>
    8c74:	8940a236 	bltu	r17,r5,8f00 <_malloc_r+0x2d4>
    8c78:	000b4200 	call	b420 <__malloc_lock>
    8c7c:	00807dc4 	movi	r2,503
    8c80:	1441e92e 	bgeu	r2,r17,9428 <_malloc_r+0x7fc>
    8c84:	8804d27a 	srli	r2,r17,9
    8c88:	1000a126 	beq	r2,zero,8f10 <_malloc_r+0x2e4>
    8c8c:	00c00104 	movi	r3,4
    8c90:	18811e36 	bltu	r3,r2,910c <_malloc_r+0x4e0>
    8c94:	8804d1ba 	srli	r2,r17,6
    8c98:	12000e44 	addi	r8,r2,57
    8c9c:	11c00e04 	addi	r7,r2,56
    8ca0:	4209883a 	add	r4,r8,r8
    8ca4:	04c00074 	movhi	r19,1
    8ca8:	2109883a 	add	r4,r4,r4
    8cac:	9cf33d04 	addi	r19,r19,-13068
    8cb0:	2109883a 	add	r4,r4,r4
    8cb4:	9909883a 	add	r4,r19,r4
    8cb8:	24000117 	ldw	r16,4(r4)
    8cbc:	213ffe04 	addi	r4,r4,-8
    8cc0:	24009726 	beq	r4,r16,8f20 <_malloc_r+0x2f4>
    8cc4:	80800117 	ldw	r2,4(r16)
    8cc8:	01bfff04 	movi	r6,-4
    8ccc:	014003c4 	movi	r5,15
    8cd0:	1184703a 	and	r2,r2,r6
    8cd4:	1447c83a 	sub	r3,r2,r17
    8cd8:	28c00716 	blt	r5,r3,8cf8 <_malloc_r+0xcc>
    8cdc:	1800920e 	bge	r3,zero,8f28 <_malloc_r+0x2fc>
    8ce0:	84000317 	ldw	r16,12(r16)
    8ce4:	24008e26 	beq	r4,r16,8f20 <_malloc_r+0x2f4>
    8ce8:	80800117 	ldw	r2,4(r16)
    8cec:	1184703a 	and	r2,r2,r6
    8cf0:	1447c83a 	sub	r3,r2,r17
    8cf4:	28fff90e 	bge	r5,r3,8cdc <_malloc_r+0xb0>
    8cf8:	3809883a 	mov	r4,r7
    8cfc:	01800074 	movhi	r6,1
    8d00:	9c000417 	ldw	r16,16(r19)
    8d04:	31b33d04 	addi	r6,r6,-13068
    8d08:	32000204 	addi	r8,r6,8
    8d0c:	82013426 	beq	r16,r8,91e0 <_malloc_r+0x5b4>
    8d10:	80c00117 	ldw	r3,4(r16)
    8d14:	00bfff04 	movi	r2,-4
    8d18:	188e703a 	and	r7,r3,r2
    8d1c:	3c45c83a 	sub	r2,r7,r17
    8d20:	00c003c4 	movi	r3,15
    8d24:	18811f16 	blt	r3,r2,91a4 <_malloc_r+0x578>
    8d28:	32000515 	stw	r8,20(r6)
    8d2c:	32000415 	stw	r8,16(r6)
    8d30:	10007f0e 	bge	r2,zero,8f30 <_malloc_r+0x304>
    8d34:	00807fc4 	movi	r2,511
    8d38:	11c0fd36 	bltu	r2,r7,9130 <_malloc_r+0x504>
    8d3c:	3806d0fa 	srli	r3,r7,3
    8d40:	01c00044 	movi	r7,1
    8d44:	30800117 	ldw	r2,4(r6)
    8d48:	19400044 	addi	r5,r3,1
    8d4c:	294b883a 	add	r5,r5,r5
    8d50:	1807d0ba 	srai	r3,r3,2
    8d54:	294b883a 	add	r5,r5,r5
    8d58:	294b883a 	add	r5,r5,r5
    8d5c:	298b883a 	add	r5,r5,r6
    8d60:	38c6983a 	sll	r3,r7,r3
    8d64:	29c00017 	ldw	r7,0(r5)
    8d68:	2a7ffe04 	addi	r9,r5,-8
    8d6c:	1886b03a 	or	r3,r3,r2
    8d70:	82400315 	stw	r9,12(r16)
    8d74:	81c00215 	stw	r7,8(r16)
    8d78:	30c00115 	stw	r3,4(r6)
    8d7c:	2c000015 	stw	r16,0(r5)
    8d80:	3c000315 	stw	r16,12(r7)
    8d84:	2005d0ba 	srai	r2,r4,2
    8d88:	01400044 	movi	r5,1
    8d8c:	288a983a 	sll	r5,r5,r2
    8d90:	19406f36 	bltu	r3,r5,8f50 <_malloc_r+0x324>
    8d94:	28c4703a 	and	r2,r5,r3
    8d98:	10000a1e 	bne	r2,zero,8dc4 <_malloc_r+0x198>
    8d9c:	00bfff04 	movi	r2,-4
    8da0:	294b883a 	add	r5,r5,r5
    8da4:	2088703a 	and	r4,r4,r2
    8da8:	28c4703a 	and	r2,r5,r3
    8dac:	21000104 	addi	r4,r4,4
    8db0:	1000041e 	bne	r2,zero,8dc4 <_malloc_r+0x198>
    8db4:	294b883a 	add	r5,r5,r5
    8db8:	28c4703a 	and	r2,r5,r3
    8dbc:	21000104 	addi	r4,r4,4
    8dc0:	103ffc26 	beq	r2,zero,8db4 <_malloc_r+0x188>
    8dc4:	02bfff04 	movi	r10,-4
    8dc8:	024003c4 	movi	r9,15
    8dcc:	21800044 	addi	r6,r4,1
    8dd0:	318d883a 	add	r6,r6,r6
    8dd4:	318d883a 	add	r6,r6,r6
    8dd8:	318d883a 	add	r6,r6,r6
    8ddc:	998d883a 	add	r6,r19,r6
    8de0:	333ffe04 	addi	r12,r6,-8
    8de4:	2017883a 	mov	r11,r4
    8de8:	31800104 	addi	r6,r6,4
    8dec:	34000017 	ldw	r16,0(r6)
    8df0:	31fffd04 	addi	r7,r6,-12
    8df4:	81c0041e 	bne	r16,r7,8e08 <_malloc_r+0x1dc>
    8df8:	0000fb06 	br	91e8 <_malloc_r+0x5bc>
    8dfc:	1801030e 	bge	r3,zero,920c <_malloc_r+0x5e0>
    8e00:	84000317 	ldw	r16,12(r16)
    8e04:	81c0f826 	beq	r16,r7,91e8 <_malloc_r+0x5bc>
    8e08:	80800117 	ldw	r2,4(r16)
    8e0c:	1284703a 	and	r2,r2,r10
    8e10:	1447c83a 	sub	r3,r2,r17
    8e14:	48fff90e 	bge	r9,r3,8dfc <_malloc_r+0x1d0>
    8e18:	80800317 	ldw	r2,12(r16)
    8e1c:	81000217 	ldw	r4,8(r16)
    8e20:	89400054 	ori	r5,r17,1
    8e24:	81400115 	stw	r5,4(r16)
    8e28:	20800315 	stw	r2,12(r4)
    8e2c:	11000215 	stw	r4,8(r2)
    8e30:	8463883a 	add	r17,r16,r17
    8e34:	9c400515 	stw	r17,20(r19)
    8e38:	9c400415 	stw	r17,16(r19)
    8e3c:	18800054 	ori	r2,r3,1
    8e40:	88800115 	stw	r2,4(r17)
    8e44:	8a000315 	stw	r8,12(r17)
    8e48:	8a000215 	stw	r8,8(r17)
    8e4c:	88e3883a 	add	r17,r17,r3
    8e50:	88c00015 	stw	r3,0(r17)
    8e54:	9009883a 	mov	r4,r18
    8e58:	000b4440 	call	b444 <__malloc_unlock>
    8e5c:	80800204 	addi	r2,r16,8
    8e60:	00001b06 	br	8ed0 <_malloc_r+0x2a4>
    8e64:	04400404 	movi	r17,16
    8e68:	89402536 	bltu	r17,r5,8f00 <_malloc_r+0x2d4>
    8e6c:	000b4200 	call	b420 <__malloc_lock>
    8e70:	00800184 	movi	r2,6
    8e74:	01000084 	movi	r4,2
    8e78:	04c00074 	movhi	r19,1
    8e7c:	1085883a 	add	r2,r2,r2
    8e80:	9cf33d04 	addi	r19,r19,-13068
    8e84:	1085883a 	add	r2,r2,r2
    8e88:	9885883a 	add	r2,r19,r2
    8e8c:	14000117 	ldw	r16,4(r2)
    8e90:	10fffe04 	addi	r3,r2,-8
    8e94:	80c0d926 	beq	r16,r3,91fc <_malloc_r+0x5d0>
    8e98:	80c00117 	ldw	r3,4(r16)
    8e9c:	81000317 	ldw	r4,12(r16)
    8ea0:	00bfff04 	movi	r2,-4
    8ea4:	1884703a 	and	r2,r3,r2
    8ea8:	81400217 	ldw	r5,8(r16)
    8eac:	8085883a 	add	r2,r16,r2
    8eb0:	10c00117 	ldw	r3,4(r2)
    8eb4:	29000315 	stw	r4,12(r5)
    8eb8:	21400215 	stw	r5,8(r4)
    8ebc:	18c00054 	ori	r3,r3,1
    8ec0:	10c00115 	stw	r3,4(r2)
    8ec4:	9009883a 	mov	r4,r18
    8ec8:	000b4440 	call	b444 <__malloc_unlock>
    8ecc:	80800204 	addi	r2,r16,8
    8ed0:	dfc00a17 	ldw	ra,40(sp)
    8ed4:	df000917 	ldw	fp,36(sp)
    8ed8:	ddc00817 	ldw	r23,32(sp)
    8edc:	dd800717 	ldw	r22,28(sp)
    8ee0:	dd400617 	ldw	r21,24(sp)
    8ee4:	dd000517 	ldw	r20,20(sp)
    8ee8:	dcc00417 	ldw	r19,16(sp)
    8eec:	dc800317 	ldw	r18,12(sp)
    8ef0:	dc400217 	ldw	r17,8(sp)
    8ef4:	dc000117 	ldw	r16,4(sp)
    8ef8:	dec00b04 	addi	sp,sp,44
    8efc:	f800283a 	ret
    8f00:	00800304 	movi	r2,12
    8f04:	90800015 	stw	r2,0(r18)
    8f08:	0005883a 	mov	r2,zero
    8f0c:	003ff006 	br	8ed0 <_malloc_r+0x2a4>
    8f10:	01002004 	movi	r4,128
    8f14:	02001004 	movi	r8,64
    8f18:	01c00fc4 	movi	r7,63
    8f1c:	003f6106 	br	8ca4 <_malloc_r+0x78>
    8f20:	4009883a 	mov	r4,r8
    8f24:	003f7506 	br	8cfc <_malloc_r+0xd0>
    8f28:	81000317 	ldw	r4,12(r16)
    8f2c:	003fde06 	br	8ea8 <_malloc_r+0x27c>
    8f30:	81c5883a 	add	r2,r16,r7
    8f34:	11400117 	ldw	r5,4(r2)
    8f38:	9009883a 	mov	r4,r18
    8f3c:	29400054 	ori	r5,r5,1
    8f40:	11400115 	stw	r5,4(r2)
    8f44:	000b4440 	call	b444 <__malloc_unlock>
    8f48:	80800204 	addi	r2,r16,8
    8f4c:	003fe006 	br	8ed0 <_malloc_r+0x2a4>
    8f50:	9c000217 	ldw	r16,8(r19)
    8f54:	00bfff04 	movi	r2,-4
    8f58:	85800117 	ldw	r22,4(r16)
    8f5c:	b0ac703a 	and	r22,r22,r2
    8f60:	b4400336 	bltu	r22,r17,8f70 <_malloc_r+0x344>
    8f64:	b445c83a 	sub	r2,r22,r17
    8f68:	00c003c4 	movi	r3,15
    8f6c:	18805d16 	blt	r3,r2,90e4 <_malloc_r+0x4b8>
    8f70:	05c00074 	movhi	r23,1
    8f74:	00800074 	movhi	r2,1
    8f78:	10b74c04 	addi	r2,r2,-8912
    8f7c:	bdf4b604 	addi	r23,r23,-11560
    8f80:	15400017 	ldw	r21,0(r2)
    8f84:	b8c00017 	ldw	r3,0(r23)
    8f88:	00bfffc4 	movi	r2,-1
    8f8c:	858d883a 	add	r6,r16,r22
    8f90:	8d6b883a 	add	r21,r17,r21
    8f94:	1880ea26 	beq	r3,r2,9340 <_malloc_r+0x714>
    8f98:	ad4403c4 	addi	r21,r21,4111
    8f9c:	00bc0004 	movi	r2,-4096
    8fa0:	a8aa703a 	and	r21,r21,r2
    8fa4:	a80b883a 	mov	r5,r21
    8fa8:	9009883a 	mov	r4,r18
    8fac:	d9800015 	stw	r6,0(sp)
    8fb0:	0009e4c0 	call	9e4c <_sbrk_r>
    8fb4:	1029883a 	mov	r20,r2
    8fb8:	00bfffc4 	movi	r2,-1
    8fbc:	d9800017 	ldw	r6,0(sp)
    8fc0:	a080e826 	beq	r20,r2,9364 <_malloc_r+0x738>
    8fc4:	a180a636 	bltu	r20,r6,9260 <_malloc_r+0x634>
    8fc8:	07000074 	movhi	fp,1
    8fcc:	e7375104 	addi	fp,fp,-8892
    8fd0:	e0800017 	ldw	r2,0(fp)
    8fd4:	a887883a 	add	r3,r21,r2
    8fd8:	e0c00015 	stw	r3,0(fp)
    8fdc:	3500e626 	beq	r6,r20,9378 <_malloc_r+0x74c>
    8fe0:	b9000017 	ldw	r4,0(r23)
    8fe4:	00bfffc4 	movi	r2,-1
    8fe8:	2080ee26 	beq	r4,r2,93a4 <_malloc_r+0x778>
    8fec:	a185c83a 	sub	r2,r20,r6
    8ff0:	10c5883a 	add	r2,r2,r3
    8ff4:	e0800015 	stw	r2,0(fp)
    8ff8:	a0c001cc 	andi	r3,r20,7
    8ffc:	1800bc26 	beq	r3,zero,92f0 <_malloc_r+0x6c4>
    9000:	a0e9c83a 	sub	r20,r20,r3
    9004:	00840204 	movi	r2,4104
    9008:	a5000204 	addi	r20,r20,8
    900c:	10c7c83a 	sub	r3,r2,r3
    9010:	a545883a 	add	r2,r20,r21
    9014:	1083ffcc 	andi	r2,r2,4095
    9018:	18abc83a 	sub	r21,r3,r2
    901c:	a80b883a 	mov	r5,r21
    9020:	9009883a 	mov	r4,r18
    9024:	0009e4c0 	call	9e4c <_sbrk_r>
    9028:	00ffffc4 	movi	r3,-1
    902c:	10c0e126 	beq	r2,r3,93b4 <_malloc_r+0x788>
    9030:	1505c83a 	sub	r2,r2,r20
    9034:	1545883a 	add	r2,r2,r21
    9038:	10800054 	ori	r2,r2,1
    903c:	e0c00017 	ldw	r3,0(fp)
    9040:	9d000215 	stw	r20,8(r19)
    9044:	a0800115 	stw	r2,4(r20)
    9048:	a8c7883a 	add	r3,r21,r3
    904c:	e0c00015 	stw	r3,0(fp)
    9050:	84c00e26 	beq	r16,r19,908c <_malloc_r+0x460>
    9054:	018003c4 	movi	r6,15
    9058:	3580a72e 	bgeu	r6,r22,92f8 <_malloc_r+0x6cc>
    905c:	81400117 	ldw	r5,4(r16)
    9060:	013ffe04 	movi	r4,-8
    9064:	b0bffd04 	addi	r2,r22,-12
    9068:	1104703a 	and	r2,r2,r4
    906c:	2900004c 	andi	r4,r5,1
    9070:	2088b03a 	or	r4,r4,r2
    9074:	81000115 	stw	r4,4(r16)
    9078:	01400144 	movi	r5,5
    907c:	8089883a 	add	r4,r16,r2
    9080:	21400115 	stw	r5,4(r4)
    9084:	21400215 	stw	r5,8(r4)
    9088:	3080cd36 	bltu	r6,r2,93c0 <_malloc_r+0x794>
    908c:	00800074 	movhi	r2,1
    9090:	10b74b04 	addi	r2,r2,-8916
    9094:	11000017 	ldw	r4,0(r2)
    9098:	20c0012e 	bgeu	r4,r3,90a0 <_malloc_r+0x474>
    909c:	10c00015 	stw	r3,0(r2)
    90a0:	00800074 	movhi	r2,1
    90a4:	10b74a04 	addi	r2,r2,-8920
    90a8:	11000017 	ldw	r4,0(r2)
    90ac:	9c000217 	ldw	r16,8(r19)
    90b0:	20c0012e 	bgeu	r4,r3,90b8 <_malloc_r+0x48c>
    90b4:	10c00015 	stw	r3,0(r2)
    90b8:	80c00117 	ldw	r3,4(r16)
    90bc:	00bfff04 	movi	r2,-4
    90c0:	1886703a 	and	r3,r3,r2
    90c4:	1c45c83a 	sub	r2,r3,r17
    90c8:	1c400236 	bltu	r3,r17,90d4 <_malloc_r+0x4a8>
    90cc:	00c003c4 	movi	r3,15
    90d0:	18800416 	blt	r3,r2,90e4 <_malloc_r+0x4b8>
    90d4:	9009883a 	mov	r4,r18
    90d8:	000b4440 	call	b444 <__malloc_unlock>
    90dc:	0005883a 	mov	r2,zero
    90e0:	003f7b06 	br	8ed0 <_malloc_r+0x2a4>
    90e4:	88c00054 	ori	r3,r17,1
    90e8:	80c00115 	stw	r3,4(r16)
    90ec:	8463883a 	add	r17,r16,r17
    90f0:	10800054 	ori	r2,r2,1
    90f4:	9c400215 	stw	r17,8(r19)
    90f8:	88800115 	stw	r2,4(r17)
    90fc:	9009883a 	mov	r4,r18
    9100:	000b4440 	call	b444 <__malloc_unlock>
    9104:	80800204 	addi	r2,r16,8
    9108:	003f7106 	br	8ed0 <_malloc_r+0x2a4>
    910c:	00c00504 	movi	r3,20
    9110:	18804a2e 	bgeu	r3,r2,923c <_malloc_r+0x610>
    9114:	00c01504 	movi	r3,84
    9118:	18806e36 	bltu	r3,r2,92d4 <_malloc_r+0x6a8>
    911c:	8804d33a 	srli	r2,r17,12
    9120:	12001bc4 	addi	r8,r2,111
    9124:	11c01b84 	addi	r7,r2,110
    9128:	4209883a 	add	r4,r8,r8
    912c:	003edd06 	br	8ca4 <_malloc_r+0x78>
    9130:	3804d27a 	srli	r2,r7,9
    9134:	00c00104 	movi	r3,4
    9138:	1880442e 	bgeu	r3,r2,924c <_malloc_r+0x620>
    913c:	00c00504 	movi	r3,20
    9140:	18808136 	bltu	r3,r2,9348 <_malloc_r+0x71c>
    9144:	11401704 	addi	r5,r2,92
    9148:	10c016c4 	addi	r3,r2,91
    914c:	294b883a 	add	r5,r5,r5
    9150:	294b883a 	add	r5,r5,r5
    9154:	294b883a 	add	r5,r5,r5
    9158:	994b883a 	add	r5,r19,r5
    915c:	28800017 	ldw	r2,0(r5)
    9160:	01800074 	movhi	r6,1
    9164:	297ffe04 	addi	r5,r5,-8
    9168:	31b33d04 	addi	r6,r6,-13068
    916c:	28806526 	beq	r5,r2,9304 <_malloc_r+0x6d8>
    9170:	01bfff04 	movi	r6,-4
    9174:	10c00117 	ldw	r3,4(r2)
    9178:	1986703a 	and	r3,r3,r6
    917c:	38c0022e 	bgeu	r7,r3,9188 <_malloc_r+0x55c>
    9180:	10800217 	ldw	r2,8(r2)
    9184:	28bffb1e 	bne	r5,r2,9174 <_malloc_r+0x548>
    9188:	11400317 	ldw	r5,12(r2)
    918c:	98c00117 	ldw	r3,4(r19)
    9190:	81400315 	stw	r5,12(r16)
    9194:	80800215 	stw	r2,8(r16)
    9198:	2c000215 	stw	r16,8(r5)
    919c:	14000315 	stw	r16,12(r2)
    91a0:	003ef806 	br	8d84 <_malloc_r+0x158>
    91a4:	88c00054 	ori	r3,r17,1
    91a8:	80c00115 	stw	r3,4(r16)
    91ac:	8463883a 	add	r17,r16,r17
    91b0:	34400515 	stw	r17,20(r6)
    91b4:	34400415 	stw	r17,16(r6)
    91b8:	10c00054 	ori	r3,r2,1
    91bc:	8a000315 	stw	r8,12(r17)
    91c0:	8a000215 	stw	r8,8(r17)
    91c4:	88c00115 	stw	r3,4(r17)
    91c8:	88a3883a 	add	r17,r17,r2
    91cc:	88800015 	stw	r2,0(r17)
    91d0:	9009883a 	mov	r4,r18
    91d4:	000b4440 	call	b444 <__malloc_unlock>
    91d8:	80800204 	addi	r2,r16,8
    91dc:	003f3c06 	br	8ed0 <_malloc_r+0x2a4>
    91e0:	30c00117 	ldw	r3,4(r6)
    91e4:	003ee706 	br	8d84 <_malloc_r+0x158>
    91e8:	5ac00044 	addi	r11,r11,1
    91ec:	588000cc 	andi	r2,r11,3
    91f0:	31800204 	addi	r6,r6,8
    91f4:	103efd1e 	bne	r2,zero,8dec <_malloc_r+0x1c0>
    91f8:	00002406 	br	928c <_malloc_r+0x660>
    91fc:	14000317 	ldw	r16,12(r2)
    9200:	143f251e 	bne	r2,r16,8e98 <_malloc_r+0x26c>
    9204:	21000084 	addi	r4,r4,2
    9208:	003ebc06 	br	8cfc <_malloc_r+0xd0>
    920c:	8085883a 	add	r2,r16,r2
    9210:	10c00117 	ldw	r3,4(r2)
    9214:	81000317 	ldw	r4,12(r16)
    9218:	81400217 	ldw	r5,8(r16)
    921c:	18c00054 	ori	r3,r3,1
    9220:	10c00115 	stw	r3,4(r2)
    9224:	29000315 	stw	r4,12(r5)
    9228:	21400215 	stw	r5,8(r4)
    922c:	9009883a 	mov	r4,r18
    9230:	000b4440 	call	b444 <__malloc_unlock>
    9234:	80800204 	addi	r2,r16,8
    9238:	003f2506 	br	8ed0 <_malloc_r+0x2a4>
    923c:	12001704 	addi	r8,r2,92
    9240:	11c016c4 	addi	r7,r2,91
    9244:	4209883a 	add	r4,r8,r8
    9248:	003e9606 	br	8ca4 <_malloc_r+0x78>
    924c:	3804d1ba 	srli	r2,r7,6
    9250:	11400e44 	addi	r5,r2,57
    9254:	10c00e04 	addi	r3,r2,56
    9258:	294b883a 	add	r5,r5,r5
    925c:	003fbc06 	br	9150 <_malloc_r+0x524>
    9260:	84ff5926 	beq	r16,r19,8fc8 <_malloc_r+0x39c>
    9264:	00800074 	movhi	r2,1
    9268:	10b33d04 	addi	r2,r2,-13068
    926c:	14000217 	ldw	r16,8(r2)
    9270:	00bfff04 	movi	r2,-4
    9274:	80c00117 	ldw	r3,4(r16)
    9278:	1886703a 	and	r3,r3,r2
    927c:	003f9106 	br	90c4 <_malloc_r+0x498>
    9280:	60800217 	ldw	r2,8(r12)
    9284:	213fffc4 	addi	r4,r4,-1
    9288:	1300651e 	bne	r2,r12,9420 <_malloc_r+0x7f4>
    928c:	208000cc 	andi	r2,r4,3
    9290:	633ffe04 	addi	r12,r12,-8
    9294:	103ffa1e 	bne	r2,zero,9280 <_malloc_r+0x654>
    9298:	98800117 	ldw	r2,4(r19)
    929c:	0146303a 	nor	r3,zero,r5
    92a0:	1884703a 	and	r2,r3,r2
    92a4:	98800115 	stw	r2,4(r19)
    92a8:	294b883a 	add	r5,r5,r5
    92ac:	117f2836 	bltu	r2,r5,8f50 <_malloc_r+0x324>
    92b0:	283f2726 	beq	r5,zero,8f50 <_malloc_r+0x324>
    92b4:	2886703a 	and	r3,r5,r2
    92b8:	5809883a 	mov	r4,r11
    92bc:	183ec31e 	bne	r3,zero,8dcc <_malloc_r+0x1a0>
    92c0:	294b883a 	add	r5,r5,r5
    92c4:	2886703a 	and	r3,r5,r2
    92c8:	21000104 	addi	r4,r4,4
    92cc:	183ffc26 	beq	r3,zero,92c0 <_malloc_r+0x694>
    92d0:	003ebe06 	br	8dcc <_malloc_r+0x1a0>
    92d4:	00c05504 	movi	r3,340
    92d8:	18801236 	bltu	r3,r2,9324 <_malloc_r+0x6f8>
    92dc:	8804d3fa 	srli	r2,r17,15
    92e0:	12001e04 	addi	r8,r2,120
    92e4:	11c01dc4 	addi	r7,r2,119
    92e8:	4209883a 	add	r4,r8,r8
    92ec:	003e6d06 	br	8ca4 <_malloc_r+0x78>
    92f0:	00c40004 	movi	r3,4096
    92f4:	003f4606 	br	9010 <_malloc_r+0x3e4>
    92f8:	00800044 	movi	r2,1
    92fc:	a0800115 	stw	r2,4(r20)
    9300:	003f7406 	br	90d4 <_malloc_r+0x4a8>
    9304:	1805d0ba 	srai	r2,r3,2
    9308:	01c00044 	movi	r7,1
    930c:	30c00117 	ldw	r3,4(r6)
    9310:	388e983a 	sll	r7,r7,r2
    9314:	2805883a 	mov	r2,r5
    9318:	38c6b03a 	or	r3,r7,r3
    931c:	30c00115 	stw	r3,4(r6)
    9320:	003f9b06 	br	9190 <_malloc_r+0x564>
    9324:	00c15504 	movi	r3,1364
    9328:	18801a36 	bltu	r3,r2,9394 <_malloc_r+0x768>
    932c:	8804d4ba 	srli	r2,r17,18
    9330:	12001f44 	addi	r8,r2,125
    9334:	11c01f04 	addi	r7,r2,124
    9338:	4209883a 	add	r4,r8,r8
    933c:	003e5906 	br	8ca4 <_malloc_r+0x78>
    9340:	ad400404 	addi	r21,r21,16
    9344:	003f1706 	br	8fa4 <_malloc_r+0x378>
    9348:	00c01504 	movi	r3,84
    934c:	18802336 	bltu	r3,r2,93dc <_malloc_r+0x7b0>
    9350:	3804d33a 	srli	r2,r7,12
    9354:	11401bc4 	addi	r5,r2,111
    9358:	10c01b84 	addi	r3,r2,110
    935c:	294b883a 	add	r5,r5,r5
    9360:	003f7b06 	br	9150 <_malloc_r+0x524>
    9364:	9c000217 	ldw	r16,8(r19)
    9368:	00bfff04 	movi	r2,-4
    936c:	80c00117 	ldw	r3,4(r16)
    9370:	1886703a 	and	r3,r3,r2
    9374:	003f5306 	br	90c4 <_malloc_r+0x498>
    9378:	3083ffcc 	andi	r2,r6,4095
    937c:	103f181e 	bne	r2,zero,8fe0 <_malloc_r+0x3b4>
    9380:	99000217 	ldw	r4,8(r19)
    9384:	b545883a 	add	r2,r22,r21
    9388:	10800054 	ori	r2,r2,1
    938c:	20800115 	stw	r2,4(r4)
    9390:	003f3e06 	br	908c <_malloc_r+0x460>
    9394:	01003f84 	movi	r4,254
    9398:	02001fc4 	movi	r8,127
    939c:	01c01f84 	movi	r7,126
    93a0:	003e4006 	br	8ca4 <_malloc_r+0x78>
    93a4:	00800074 	movhi	r2,1
    93a8:	10b4b604 	addi	r2,r2,-11560
    93ac:	15000015 	stw	r20,0(r2)
    93b0:	003f1106 	br	8ff8 <_malloc_r+0x3cc>
    93b4:	00800044 	movi	r2,1
    93b8:	002b883a 	mov	r21,zero
    93bc:	003f1f06 	br	903c <_malloc_r+0x410>
    93c0:	81400204 	addi	r5,r16,8
    93c4:	9009883a 	mov	r4,r18
    93c8:	000a6b40 	call	a6b4 <_free_r>
    93cc:	00800074 	movhi	r2,1
    93d0:	10b75104 	addi	r2,r2,-8892
    93d4:	10c00017 	ldw	r3,0(r2)
    93d8:	003f2c06 	br	908c <_malloc_r+0x460>
    93dc:	00c05504 	movi	r3,340
    93e0:	18800536 	bltu	r3,r2,93f8 <_malloc_r+0x7cc>
    93e4:	3804d3fa 	srli	r2,r7,15
    93e8:	11401e04 	addi	r5,r2,120
    93ec:	10c01dc4 	addi	r3,r2,119
    93f0:	294b883a 	add	r5,r5,r5
    93f4:	003f5606 	br	9150 <_malloc_r+0x524>
    93f8:	00c15504 	movi	r3,1364
    93fc:	18800536 	bltu	r3,r2,9414 <_malloc_r+0x7e8>
    9400:	3804d4ba 	srli	r2,r7,18
    9404:	11401f44 	addi	r5,r2,125
    9408:	10c01f04 	addi	r3,r2,124
    940c:	294b883a 	add	r5,r5,r5
    9410:	003f4f06 	br	9150 <_malloc_r+0x524>
    9414:	01403f84 	movi	r5,254
    9418:	00c01f84 	movi	r3,126
    941c:	003f4c06 	br	9150 <_malloc_r+0x524>
    9420:	98800117 	ldw	r2,4(r19)
    9424:	003fa006 	br	92a8 <_malloc_r+0x67c>
    9428:	8808d0fa 	srli	r4,r17,3
    942c:	20800044 	addi	r2,r4,1
    9430:	1085883a 	add	r2,r2,r2
    9434:	003e9006 	br	8e78 <_malloc_r+0x24c>

00009438 <memchr>:
    9438:	208000cc 	andi	r2,r4,3
    943c:	280f883a 	mov	r7,r5
    9440:	10003426 	beq	r2,zero,9514 <memchr+0xdc>
    9444:	30bfffc4 	addi	r2,r6,-1
    9448:	30001a26 	beq	r6,zero,94b4 <memchr+0x7c>
    944c:	20c00003 	ldbu	r3,0(r4)
    9450:	29803fcc 	andi	r6,r5,255
    9454:	30c0051e 	bne	r6,r3,946c <memchr+0x34>
    9458:	00001806 	br	94bc <memchr+0x84>
    945c:	10001526 	beq	r2,zero,94b4 <memchr+0x7c>
    9460:	20c00003 	ldbu	r3,0(r4)
    9464:	10bfffc4 	addi	r2,r2,-1
    9468:	30c01426 	beq	r6,r3,94bc <memchr+0x84>
    946c:	21000044 	addi	r4,r4,1
    9470:	20c000cc 	andi	r3,r4,3
    9474:	183ff91e 	bne	r3,zero,945c <memchr+0x24>
    9478:	020000c4 	movi	r8,3
    947c:	40801136 	bltu	r8,r2,94c4 <memchr+0x8c>
    9480:	10000c26 	beq	r2,zero,94b4 <memchr+0x7c>
    9484:	20c00003 	ldbu	r3,0(r4)
    9488:	29403fcc 	andi	r5,r5,255
    948c:	28c00b26 	beq	r5,r3,94bc <memchr+0x84>
    9490:	20c00044 	addi	r3,r4,1
    9494:	39803fcc 	andi	r6,r7,255
    9498:	2089883a 	add	r4,r4,r2
    949c:	00000306 	br	94ac <memchr+0x74>
    94a0:	18c00044 	addi	r3,r3,1
    94a4:	197fffc3 	ldbu	r5,-1(r3)
    94a8:	31400526 	beq	r6,r5,94c0 <memchr+0x88>
    94ac:	1805883a 	mov	r2,r3
    94b0:	20fffb1e 	bne	r4,r3,94a0 <memchr+0x68>
    94b4:	0005883a 	mov	r2,zero
    94b8:	f800283a 	ret
    94bc:	2005883a 	mov	r2,r4
    94c0:	f800283a 	ret
    94c4:	28c03fcc 	andi	r3,r5,255
    94c8:	1812923a 	slli	r9,r3,8
    94cc:	02ffbff4 	movhi	r11,65279
    94d0:	02a02074 	movhi	r10,32897
    94d4:	48d2b03a 	or	r9,r9,r3
    94d8:	4806943a 	slli	r3,r9,16
    94dc:	5affbfc4 	addi	r11,r11,-257
    94e0:	52a02004 	addi	r10,r10,-32640
    94e4:	48d2b03a 	or	r9,r9,r3
    94e8:	20c00017 	ldw	r3,0(r4)
    94ec:	48c6f03a 	xor	r3,r9,r3
    94f0:	1acd883a 	add	r6,r3,r11
    94f4:	00c6303a 	nor	r3,zero,r3
    94f8:	30c6703a 	and	r3,r6,r3
    94fc:	1a86703a 	and	r3,r3,r10
    9500:	183fe01e 	bne	r3,zero,9484 <memchr+0x4c>
    9504:	10bfff04 	addi	r2,r2,-4
    9508:	21000104 	addi	r4,r4,4
    950c:	40bff636 	bltu	r8,r2,94e8 <memchr+0xb0>
    9510:	003fdb06 	br	9480 <memchr+0x48>
    9514:	3005883a 	mov	r2,r6
    9518:	003fd706 	br	9478 <memchr+0x40>

0000951c <memcpy>:
    951c:	defffd04 	addi	sp,sp,-12
    9520:	dfc00215 	stw	ra,8(sp)
    9524:	dc400115 	stw	r17,4(sp)
    9528:	dc000015 	stw	r16,0(sp)
    952c:	00c003c4 	movi	r3,15
    9530:	2005883a 	mov	r2,r4
    9534:	1980452e 	bgeu	r3,r6,964c <memcpy+0x130>
    9538:	2906b03a 	or	r3,r5,r4
    953c:	18c000cc 	andi	r3,r3,3
    9540:	1800441e 	bne	r3,zero,9654 <memcpy+0x138>
    9544:	347ffc04 	addi	r17,r6,-16
    9548:	8822d13a 	srli	r17,r17,4
    954c:	28c00104 	addi	r3,r5,4
    9550:	23400104 	addi	r13,r4,4
    9554:	8820913a 	slli	r16,r17,4
    9558:	2b000204 	addi	r12,r5,8
    955c:	22c00204 	addi	r11,r4,8
    9560:	84000504 	addi	r16,r16,20
    9564:	2a800304 	addi	r10,r5,12
    9568:	22400304 	addi	r9,r4,12
    956c:	2c21883a 	add	r16,r5,r16
    9570:	2811883a 	mov	r8,r5
    9574:	200f883a 	mov	r7,r4
    9578:	41000017 	ldw	r4,0(r8)
    957c:	1fc00017 	ldw	ra,0(r3)
    9580:	63c00017 	ldw	r15,0(r12)
    9584:	39000015 	stw	r4,0(r7)
    9588:	53800017 	ldw	r14,0(r10)
    958c:	6fc00015 	stw	ra,0(r13)
    9590:	5bc00015 	stw	r15,0(r11)
    9594:	4b800015 	stw	r14,0(r9)
    9598:	18c00404 	addi	r3,r3,16
    959c:	39c00404 	addi	r7,r7,16
    95a0:	42000404 	addi	r8,r8,16
    95a4:	6b400404 	addi	r13,r13,16
    95a8:	63000404 	addi	r12,r12,16
    95ac:	5ac00404 	addi	r11,r11,16
    95b0:	52800404 	addi	r10,r10,16
    95b4:	4a400404 	addi	r9,r9,16
    95b8:	1c3fef1e 	bne	r3,r16,9578 <memcpy+0x5c>
    95bc:	89c00044 	addi	r7,r17,1
    95c0:	380e913a 	slli	r7,r7,4
    95c4:	310003cc 	andi	r4,r6,15
    95c8:	02c000c4 	movi	r11,3
    95cc:	11c7883a 	add	r3,r2,r7
    95d0:	29cb883a 	add	r5,r5,r7
    95d4:	5900212e 	bgeu	r11,r4,965c <memcpy+0x140>
    95d8:	1813883a 	mov	r9,r3
    95dc:	2811883a 	mov	r8,r5
    95e0:	200f883a 	mov	r7,r4
    95e4:	42800017 	ldw	r10,0(r8)
    95e8:	4a400104 	addi	r9,r9,4
    95ec:	39ffff04 	addi	r7,r7,-4
    95f0:	4abfff15 	stw	r10,-4(r9)
    95f4:	42000104 	addi	r8,r8,4
    95f8:	59fffa36 	bltu	r11,r7,95e4 <memcpy+0xc8>
    95fc:	213fff04 	addi	r4,r4,-4
    9600:	2008d0ba 	srli	r4,r4,2
    9604:	318000cc 	andi	r6,r6,3
    9608:	21000044 	addi	r4,r4,1
    960c:	2109883a 	add	r4,r4,r4
    9610:	2109883a 	add	r4,r4,r4
    9614:	1907883a 	add	r3,r3,r4
    9618:	290b883a 	add	r5,r5,r4
    961c:	30000626 	beq	r6,zero,9638 <memcpy+0x11c>
    9620:	198d883a 	add	r6,r3,r6
    9624:	29c00003 	ldbu	r7,0(r5)
    9628:	18c00044 	addi	r3,r3,1
    962c:	29400044 	addi	r5,r5,1
    9630:	19ffffc5 	stb	r7,-1(r3)
    9634:	19bffb1e 	bne	r3,r6,9624 <memcpy+0x108>
    9638:	dfc00217 	ldw	ra,8(sp)
    963c:	dc400117 	ldw	r17,4(sp)
    9640:	dc000017 	ldw	r16,0(sp)
    9644:	dec00304 	addi	sp,sp,12
    9648:	f800283a 	ret
    964c:	2007883a 	mov	r3,r4
    9650:	003ff206 	br	961c <memcpy+0x100>
    9654:	2007883a 	mov	r3,r4
    9658:	003ff106 	br	9620 <memcpy+0x104>
    965c:	200d883a 	mov	r6,r4
    9660:	003fee06 	br	961c <memcpy+0x100>

00009664 <memmove>:
    9664:	2005883a 	mov	r2,r4
    9668:	29000b2e 	bgeu	r5,r4,9698 <memmove+0x34>
    966c:	298f883a 	add	r7,r5,r6
    9670:	21c0092e 	bgeu	r4,r7,9698 <memmove+0x34>
    9674:	2187883a 	add	r3,r4,r6
    9678:	198bc83a 	sub	r5,r3,r6
    967c:	30004826 	beq	r6,zero,97a0 <memmove+0x13c>
    9680:	39ffffc4 	addi	r7,r7,-1
    9684:	39000003 	ldbu	r4,0(r7)
    9688:	18ffffc4 	addi	r3,r3,-1
    968c:	19000005 	stb	r4,0(r3)
    9690:	28fffb1e 	bne	r5,r3,9680 <memmove+0x1c>
    9694:	f800283a 	ret
    9698:	00c003c4 	movi	r3,15
    969c:	1980412e 	bgeu	r3,r6,97a4 <memmove+0x140>
    96a0:	2886b03a 	or	r3,r5,r2
    96a4:	18c000cc 	andi	r3,r3,3
    96a8:	1800401e 	bne	r3,zero,97ac <memmove+0x148>
    96ac:	33fffc04 	addi	r15,r6,-16
    96b0:	781ed13a 	srli	r15,r15,4
    96b4:	28c00104 	addi	r3,r5,4
    96b8:	13400104 	addi	r13,r2,4
    96bc:	781c913a 	slli	r14,r15,4
    96c0:	2b000204 	addi	r12,r5,8
    96c4:	12c00204 	addi	r11,r2,8
    96c8:	73800504 	addi	r14,r14,20
    96cc:	2a800304 	addi	r10,r5,12
    96d0:	12400304 	addi	r9,r2,12
    96d4:	2b9d883a 	add	r14,r5,r14
    96d8:	2811883a 	mov	r8,r5
    96dc:	100f883a 	mov	r7,r2
    96e0:	41000017 	ldw	r4,0(r8)
    96e4:	39c00404 	addi	r7,r7,16
    96e8:	18c00404 	addi	r3,r3,16
    96ec:	393ffc15 	stw	r4,-16(r7)
    96f0:	193ffc17 	ldw	r4,-16(r3)
    96f4:	6b400404 	addi	r13,r13,16
    96f8:	5ac00404 	addi	r11,r11,16
    96fc:	693ffc15 	stw	r4,-16(r13)
    9700:	61000017 	ldw	r4,0(r12)
    9704:	4a400404 	addi	r9,r9,16
    9708:	42000404 	addi	r8,r8,16
    970c:	593ffc15 	stw	r4,-16(r11)
    9710:	51000017 	ldw	r4,0(r10)
    9714:	63000404 	addi	r12,r12,16
    9718:	52800404 	addi	r10,r10,16
    971c:	493ffc15 	stw	r4,-16(r9)
    9720:	1bbfef1e 	bne	r3,r14,96e0 <memmove+0x7c>
    9724:	79000044 	addi	r4,r15,1
    9728:	2008913a 	slli	r4,r4,4
    972c:	328003cc 	andi	r10,r6,15
    9730:	02c000c4 	movi	r11,3
    9734:	1107883a 	add	r3,r2,r4
    9738:	290b883a 	add	r5,r5,r4
    973c:	5a801e2e 	bgeu	r11,r10,97b8 <memmove+0x154>
    9740:	1813883a 	mov	r9,r3
    9744:	2811883a 	mov	r8,r5
    9748:	500f883a 	mov	r7,r10
    974c:	41000017 	ldw	r4,0(r8)
    9750:	4a400104 	addi	r9,r9,4
    9754:	39ffff04 	addi	r7,r7,-4
    9758:	493fff15 	stw	r4,-4(r9)
    975c:	42000104 	addi	r8,r8,4
    9760:	59fffa36 	bltu	r11,r7,974c <memmove+0xe8>
    9764:	513fff04 	addi	r4,r10,-4
    9768:	2008d0ba 	srli	r4,r4,2
    976c:	318000cc 	andi	r6,r6,3
    9770:	21000044 	addi	r4,r4,1
    9774:	2109883a 	add	r4,r4,r4
    9778:	2109883a 	add	r4,r4,r4
    977c:	1907883a 	add	r3,r3,r4
    9780:	290b883a 	add	r5,r5,r4
    9784:	30000b26 	beq	r6,zero,97b4 <memmove+0x150>
    9788:	198d883a 	add	r6,r3,r6
    978c:	29c00003 	ldbu	r7,0(r5)
    9790:	18c00044 	addi	r3,r3,1
    9794:	29400044 	addi	r5,r5,1
    9798:	19ffffc5 	stb	r7,-1(r3)
    979c:	19bffb1e 	bne	r3,r6,978c <memmove+0x128>
    97a0:	f800283a 	ret
    97a4:	1007883a 	mov	r3,r2
    97a8:	003ff606 	br	9784 <memmove+0x120>
    97ac:	1007883a 	mov	r3,r2
    97b0:	003ff506 	br	9788 <memmove+0x124>
    97b4:	f800283a 	ret
    97b8:	500d883a 	mov	r6,r10
    97bc:	003ff106 	br	9784 <memmove+0x120>

000097c0 <memset>:
    97c0:	20c000cc 	andi	r3,r4,3
    97c4:	2005883a 	mov	r2,r4
    97c8:	18004426 	beq	r3,zero,98dc <memset+0x11c>
    97cc:	31ffffc4 	addi	r7,r6,-1
    97d0:	30004026 	beq	r6,zero,98d4 <memset+0x114>
    97d4:	2813883a 	mov	r9,r5
    97d8:	200d883a 	mov	r6,r4
    97dc:	2007883a 	mov	r3,r4
    97e0:	00000406 	br	97f4 <memset+0x34>
    97e4:	3a3fffc4 	addi	r8,r7,-1
    97e8:	31800044 	addi	r6,r6,1
    97ec:	38003926 	beq	r7,zero,98d4 <memset+0x114>
    97f0:	400f883a 	mov	r7,r8
    97f4:	18c00044 	addi	r3,r3,1
    97f8:	32400005 	stb	r9,0(r6)
    97fc:	1a0000cc 	andi	r8,r3,3
    9800:	403ff81e 	bne	r8,zero,97e4 <memset+0x24>
    9804:	010000c4 	movi	r4,3
    9808:	21c02d2e 	bgeu	r4,r7,98c0 <memset+0x100>
    980c:	29003fcc 	andi	r4,r5,255
    9810:	200c923a 	slli	r6,r4,8
    9814:	3108b03a 	or	r4,r6,r4
    9818:	200c943a 	slli	r6,r4,16
    981c:	218cb03a 	or	r6,r4,r6
    9820:	010003c4 	movi	r4,15
    9824:	21c0182e 	bgeu	r4,r7,9888 <memset+0xc8>
    9828:	3b3ffc04 	addi	r12,r7,-16
    982c:	6018d13a 	srli	r12,r12,4
    9830:	1a000104 	addi	r8,r3,4
    9834:	1ac00204 	addi	r11,r3,8
    9838:	6008913a 	slli	r4,r12,4
    983c:	1a800304 	addi	r10,r3,12
    9840:	1813883a 	mov	r9,r3
    9844:	21000504 	addi	r4,r4,20
    9848:	1909883a 	add	r4,r3,r4
    984c:	49800015 	stw	r6,0(r9)
    9850:	41800015 	stw	r6,0(r8)
    9854:	59800015 	stw	r6,0(r11)
    9858:	51800015 	stw	r6,0(r10)
    985c:	42000404 	addi	r8,r8,16
    9860:	4a400404 	addi	r9,r9,16
    9864:	5ac00404 	addi	r11,r11,16
    9868:	52800404 	addi	r10,r10,16
    986c:	413ff71e 	bne	r8,r4,984c <memset+0x8c>
    9870:	63000044 	addi	r12,r12,1
    9874:	6018913a 	slli	r12,r12,4
    9878:	39c003cc 	andi	r7,r7,15
    987c:	010000c4 	movi	r4,3
    9880:	1b07883a 	add	r3,r3,r12
    9884:	21c00e2e 	bgeu	r4,r7,98c0 <memset+0x100>
    9888:	1813883a 	mov	r9,r3
    988c:	3811883a 	mov	r8,r7
    9890:	010000c4 	movi	r4,3
    9894:	49800015 	stw	r6,0(r9)
    9898:	423fff04 	addi	r8,r8,-4
    989c:	4a400104 	addi	r9,r9,4
    98a0:	223ffc36 	bltu	r4,r8,9894 <memset+0xd4>
    98a4:	393fff04 	addi	r4,r7,-4
    98a8:	2008d0ba 	srli	r4,r4,2
    98ac:	39c000cc 	andi	r7,r7,3
    98b0:	21000044 	addi	r4,r4,1
    98b4:	2109883a 	add	r4,r4,r4
    98b8:	2109883a 	add	r4,r4,r4
    98bc:	1907883a 	add	r3,r3,r4
    98c0:	38000526 	beq	r7,zero,98d8 <memset+0x118>
    98c4:	19cf883a 	add	r7,r3,r7
    98c8:	19400005 	stb	r5,0(r3)
    98cc:	18c00044 	addi	r3,r3,1
    98d0:	38fffd1e 	bne	r7,r3,98c8 <memset+0x108>
    98d4:	f800283a 	ret
    98d8:	f800283a 	ret
    98dc:	2007883a 	mov	r3,r4
    98e0:	300f883a 	mov	r7,r6
    98e4:	003fc706 	br	9804 <memset+0x44>

000098e8 <_realloc_r>:
    98e8:	defff604 	addi	sp,sp,-40
    98ec:	dc800215 	stw	r18,8(sp)
    98f0:	dfc00915 	stw	ra,36(sp)
    98f4:	df000815 	stw	fp,32(sp)
    98f8:	ddc00715 	stw	r23,28(sp)
    98fc:	dd800615 	stw	r22,24(sp)
    9900:	dd400515 	stw	r21,20(sp)
    9904:	dd000415 	stw	r20,16(sp)
    9908:	dcc00315 	stw	r19,12(sp)
    990c:	dc400115 	stw	r17,4(sp)
    9910:	dc000015 	stw	r16,0(sp)
    9914:	3025883a 	mov	r18,r6
    9918:	2800b726 	beq	r5,zero,9bf8 <_realloc_r+0x310>
    991c:	282b883a 	mov	r21,r5
    9920:	2029883a 	mov	r20,r4
    9924:	000b4200 	call	b420 <__malloc_lock>
    9928:	a8bfff17 	ldw	r2,-4(r21)
    992c:	043fff04 	movi	r16,-4
    9930:	90c002c4 	addi	r3,r18,11
    9934:	01000584 	movi	r4,22
    9938:	acfffe04 	addi	r19,r21,-8
    993c:	1420703a 	and	r16,r2,r16
    9940:	20c0332e 	bgeu	r4,r3,9a10 <_realloc_r+0x128>
    9944:	047ffe04 	movi	r17,-8
    9948:	1c62703a 	and	r17,r3,r17
    994c:	8807883a 	mov	r3,r17
    9950:	88005816 	blt	r17,zero,9ab4 <_realloc_r+0x1cc>
    9954:	8c805736 	bltu	r17,r18,9ab4 <_realloc_r+0x1cc>
    9958:	80c0300e 	bge	r16,r3,9a1c <_realloc_r+0x134>
    995c:	07000074 	movhi	fp,1
    9960:	e7333d04 	addi	fp,fp,-13068
    9964:	e1c00217 	ldw	r7,8(fp)
    9968:	9c09883a 	add	r4,r19,r16
    996c:	22000117 	ldw	r8,4(r4)
    9970:	21c06326 	beq	r4,r7,9b00 <_realloc_r+0x218>
    9974:	017fff84 	movi	r5,-2
    9978:	414a703a 	and	r5,r8,r5
    997c:	214b883a 	add	r5,r4,r5
    9980:	29800117 	ldw	r6,4(r5)
    9984:	3180004c 	andi	r6,r6,1
    9988:	30003f26 	beq	r6,zero,9a88 <_realloc_r+0x1a0>
    998c:	1080004c 	andi	r2,r2,1
    9990:	10008326 	beq	r2,zero,9ba0 <_realloc_r+0x2b8>
    9994:	900b883a 	mov	r5,r18
    9998:	a009883a 	mov	r4,r20
    999c:	0008c2c0 	call	8c2c <_malloc_r>
    99a0:	1025883a 	mov	r18,r2
    99a4:	10011e26 	beq	r2,zero,9e20 <_realloc_r+0x538>
    99a8:	a93fff17 	ldw	r4,-4(r21)
    99ac:	10fffe04 	addi	r3,r2,-8
    99b0:	00bfff84 	movi	r2,-2
    99b4:	2084703a 	and	r2,r4,r2
    99b8:	9885883a 	add	r2,r19,r2
    99bc:	1880ee26 	beq	r3,r2,9d78 <_realloc_r+0x490>
    99c0:	81bfff04 	addi	r6,r16,-4
    99c4:	00800904 	movi	r2,36
    99c8:	1180b836 	bltu	r2,r6,9cac <_realloc_r+0x3c4>
    99cc:	00c004c4 	movi	r3,19
    99d0:	19809636 	bltu	r3,r6,9c2c <_realloc_r+0x344>
    99d4:	9005883a 	mov	r2,r18
    99d8:	a807883a 	mov	r3,r21
    99dc:	19000017 	ldw	r4,0(r3)
    99e0:	11000015 	stw	r4,0(r2)
    99e4:	19000117 	ldw	r4,4(r3)
    99e8:	11000115 	stw	r4,4(r2)
    99ec:	18c00217 	ldw	r3,8(r3)
    99f0:	10c00215 	stw	r3,8(r2)
    99f4:	a80b883a 	mov	r5,r21
    99f8:	a009883a 	mov	r4,r20
    99fc:	000a6b40 	call	a6b4 <_free_r>
    9a00:	a009883a 	mov	r4,r20
    9a04:	000b4440 	call	b444 <__malloc_unlock>
    9a08:	9005883a 	mov	r2,r18
    9a0c:	00001206 	br	9a58 <_realloc_r+0x170>
    9a10:	00c00404 	movi	r3,16
    9a14:	1823883a 	mov	r17,r3
    9a18:	003fce06 	br	9954 <_realloc_r+0x6c>
    9a1c:	a825883a 	mov	r18,r21
    9a20:	8445c83a 	sub	r2,r16,r17
    9a24:	00c003c4 	movi	r3,15
    9a28:	18802636 	bltu	r3,r2,9ac4 <_realloc_r+0x1dc>
    9a2c:	99800117 	ldw	r6,4(r19)
    9a30:	9c07883a 	add	r3,r19,r16
    9a34:	3180004c 	andi	r6,r6,1
    9a38:	3420b03a 	or	r16,r6,r16
    9a3c:	9c000115 	stw	r16,4(r19)
    9a40:	18800117 	ldw	r2,4(r3)
    9a44:	10800054 	ori	r2,r2,1
    9a48:	18800115 	stw	r2,4(r3)
    9a4c:	a009883a 	mov	r4,r20
    9a50:	000b4440 	call	b444 <__malloc_unlock>
    9a54:	9005883a 	mov	r2,r18
    9a58:	dfc00917 	ldw	ra,36(sp)
    9a5c:	df000817 	ldw	fp,32(sp)
    9a60:	ddc00717 	ldw	r23,28(sp)
    9a64:	dd800617 	ldw	r22,24(sp)
    9a68:	dd400517 	ldw	r21,20(sp)
    9a6c:	dd000417 	ldw	r20,16(sp)
    9a70:	dcc00317 	ldw	r19,12(sp)
    9a74:	dc800217 	ldw	r18,8(sp)
    9a78:	dc400117 	ldw	r17,4(sp)
    9a7c:	dc000017 	ldw	r16,0(sp)
    9a80:	dec00a04 	addi	sp,sp,40
    9a84:	f800283a 	ret
    9a88:	017fff04 	movi	r5,-4
    9a8c:	414a703a 	and	r5,r8,r5
    9a90:	814d883a 	add	r6,r16,r5
    9a94:	30c01f16 	blt	r6,r3,9b14 <_realloc_r+0x22c>
    9a98:	20800317 	ldw	r2,12(r4)
    9a9c:	20c00217 	ldw	r3,8(r4)
    9aa0:	a825883a 	mov	r18,r21
    9aa4:	3021883a 	mov	r16,r6
    9aa8:	18800315 	stw	r2,12(r3)
    9aac:	10c00215 	stw	r3,8(r2)
    9ab0:	003fdb06 	br	9a20 <_realloc_r+0x138>
    9ab4:	00800304 	movi	r2,12
    9ab8:	a0800015 	stw	r2,0(r20)
    9abc:	0005883a 	mov	r2,zero
    9ac0:	003fe506 	br	9a58 <_realloc_r+0x170>
    9ac4:	98c00117 	ldw	r3,4(r19)
    9ac8:	9c4b883a 	add	r5,r19,r17
    9acc:	11000054 	ori	r4,r2,1
    9ad0:	18c0004c 	andi	r3,r3,1
    9ad4:	1c62b03a 	or	r17,r3,r17
    9ad8:	9c400115 	stw	r17,4(r19)
    9adc:	29000115 	stw	r4,4(r5)
    9ae0:	2885883a 	add	r2,r5,r2
    9ae4:	10c00117 	ldw	r3,4(r2)
    9ae8:	29400204 	addi	r5,r5,8
    9aec:	a009883a 	mov	r4,r20
    9af0:	18c00054 	ori	r3,r3,1
    9af4:	10c00115 	stw	r3,4(r2)
    9af8:	000a6b40 	call	a6b4 <_free_r>
    9afc:	003fd306 	br	9a4c <_realloc_r+0x164>
    9b00:	017fff04 	movi	r5,-4
    9b04:	414a703a 	and	r5,r8,r5
    9b08:	89800404 	addi	r6,r17,16
    9b0c:	8151883a 	add	r8,r16,r5
    9b10:	4180590e 	bge	r8,r6,9c78 <_realloc_r+0x390>
    9b14:	1080004c 	andi	r2,r2,1
    9b18:	103f9e1e 	bne	r2,zero,9994 <_realloc_r+0xac>
    9b1c:	adbffe17 	ldw	r22,-8(r21)
    9b20:	00bfff04 	movi	r2,-4
    9b24:	9dadc83a 	sub	r22,r19,r22
    9b28:	b1800117 	ldw	r6,4(r22)
    9b2c:	3084703a 	and	r2,r6,r2
    9b30:	20002026 	beq	r4,zero,9bb4 <_realloc_r+0x2cc>
    9b34:	80af883a 	add	r23,r16,r2
    9b38:	b96f883a 	add	r23,r23,r5
    9b3c:	21c05f26 	beq	r4,r7,9cbc <_realloc_r+0x3d4>
    9b40:	b8c01c16 	blt	r23,r3,9bb4 <_realloc_r+0x2cc>
    9b44:	20800317 	ldw	r2,12(r4)
    9b48:	20c00217 	ldw	r3,8(r4)
    9b4c:	81bfff04 	addi	r6,r16,-4
    9b50:	01000904 	movi	r4,36
    9b54:	18800315 	stw	r2,12(r3)
    9b58:	10c00215 	stw	r3,8(r2)
    9b5c:	b0c00217 	ldw	r3,8(r22)
    9b60:	b0800317 	ldw	r2,12(r22)
    9b64:	b4800204 	addi	r18,r22,8
    9b68:	18800315 	stw	r2,12(r3)
    9b6c:	10c00215 	stw	r3,8(r2)
    9b70:	21801b36 	bltu	r4,r6,9be0 <_realloc_r+0x2f8>
    9b74:	008004c4 	movi	r2,19
    9b78:	1180352e 	bgeu	r2,r6,9c50 <_realloc_r+0x368>
    9b7c:	a8800017 	ldw	r2,0(r21)
    9b80:	b0800215 	stw	r2,8(r22)
    9b84:	a8800117 	ldw	r2,4(r21)
    9b88:	b0800315 	stw	r2,12(r22)
    9b8c:	008006c4 	movi	r2,27
    9b90:	11807f36 	bltu	r2,r6,9d90 <_realloc_r+0x4a8>
    9b94:	b0800404 	addi	r2,r22,16
    9b98:	ad400204 	addi	r21,r21,8
    9b9c:	00002d06 	br	9c54 <_realloc_r+0x36c>
    9ba0:	adbffe17 	ldw	r22,-8(r21)
    9ba4:	00bfff04 	movi	r2,-4
    9ba8:	9dadc83a 	sub	r22,r19,r22
    9bac:	b1000117 	ldw	r4,4(r22)
    9bb0:	2084703a 	and	r2,r4,r2
    9bb4:	b03f7726 	beq	r22,zero,9994 <_realloc_r+0xac>
    9bb8:	80af883a 	add	r23,r16,r2
    9bbc:	b8ff7516 	blt	r23,r3,9994 <_realloc_r+0xac>
    9bc0:	b0800317 	ldw	r2,12(r22)
    9bc4:	b0c00217 	ldw	r3,8(r22)
    9bc8:	81bfff04 	addi	r6,r16,-4
    9bcc:	01000904 	movi	r4,36
    9bd0:	18800315 	stw	r2,12(r3)
    9bd4:	10c00215 	stw	r3,8(r2)
    9bd8:	b4800204 	addi	r18,r22,8
    9bdc:	21bfe52e 	bgeu	r4,r6,9b74 <_realloc_r+0x28c>
    9be0:	a80b883a 	mov	r5,r21
    9be4:	9009883a 	mov	r4,r18
    9be8:	00096640 	call	9664 <memmove>
    9bec:	b821883a 	mov	r16,r23
    9bf0:	b027883a 	mov	r19,r22
    9bf4:	003f8a06 	br	9a20 <_realloc_r+0x138>
    9bf8:	300b883a 	mov	r5,r6
    9bfc:	dfc00917 	ldw	ra,36(sp)
    9c00:	df000817 	ldw	fp,32(sp)
    9c04:	ddc00717 	ldw	r23,28(sp)
    9c08:	dd800617 	ldw	r22,24(sp)
    9c0c:	dd400517 	ldw	r21,20(sp)
    9c10:	dd000417 	ldw	r20,16(sp)
    9c14:	dcc00317 	ldw	r19,12(sp)
    9c18:	dc800217 	ldw	r18,8(sp)
    9c1c:	dc400117 	ldw	r17,4(sp)
    9c20:	dc000017 	ldw	r16,0(sp)
    9c24:	dec00a04 	addi	sp,sp,40
    9c28:	0008c2c1 	jmpi	8c2c <_malloc_r>
    9c2c:	a8c00017 	ldw	r3,0(r21)
    9c30:	90c00015 	stw	r3,0(r18)
    9c34:	a8c00117 	ldw	r3,4(r21)
    9c38:	90c00115 	stw	r3,4(r18)
    9c3c:	00c006c4 	movi	r3,27
    9c40:	19804536 	bltu	r3,r6,9d58 <_realloc_r+0x470>
    9c44:	90800204 	addi	r2,r18,8
    9c48:	a8c00204 	addi	r3,r21,8
    9c4c:	003f6306 	br	99dc <_realloc_r+0xf4>
    9c50:	9005883a 	mov	r2,r18
    9c54:	a8c00017 	ldw	r3,0(r21)
    9c58:	b821883a 	mov	r16,r23
    9c5c:	b027883a 	mov	r19,r22
    9c60:	10c00015 	stw	r3,0(r2)
    9c64:	a8c00117 	ldw	r3,4(r21)
    9c68:	10c00115 	stw	r3,4(r2)
    9c6c:	a8c00217 	ldw	r3,8(r21)
    9c70:	10c00215 	stw	r3,8(r2)
    9c74:	003f6a06 	br	9a20 <_realloc_r+0x138>
    9c78:	9c67883a 	add	r19,r19,r17
    9c7c:	4445c83a 	sub	r2,r8,r17
    9c80:	e4c00215 	stw	r19,8(fp)
    9c84:	10800054 	ori	r2,r2,1
    9c88:	98800115 	stw	r2,4(r19)
    9c8c:	a8bfff17 	ldw	r2,-4(r21)
    9c90:	a009883a 	mov	r4,r20
    9c94:	1080004c 	andi	r2,r2,1
    9c98:	1462b03a 	or	r17,r2,r17
    9c9c:	ac7fff15 	stw	r17,-4(r21)
    9ca0:	000b4440 	call	b444 <__malloc_unlock>
    9ca4:	a805883a 	mov	r2,r21
    9ca8:	003f6b06 	br	9a58 <_realloc_r+0x170>
    9cac:	a80b883a 	mov	r5,r21
    9cb0:	9009883a 	mov	r4,r18
    9cb4:	00096640 	call	9664 <memmove>
    9cb8:	003f4e06 	br	99f4 <_realloc_r+0x10c>
    9cbc:	89000404 	addi	r4,r17,16
    9cc0:	b93fbc16 	blt	r23,r4,9bb4 <_realloc_r+0x2cc>
    9cc4:	b0800317 	ldw	r2,12(r22)
    9cc8:	b0c00217 	ldw	r3,8(r22)
    9ccc:	81bfff04 	addi	r6,r16,-4
    9cd0:	01000904 	movi	r4,36
    9cd4:	18800315 	stw	r2,12(r3)
    9cd8:	10c00215 	stw	r3,8(r2)
    9cdc:	b4800204 	addi	r18,r22,8
    9ce0:	21804336 	bltu	r4,r6,9df0 <_realloc_r+0x508>
    9ce4:	008004c4 	movi	r2,19
    9ce8:	11803f2e 	bgeu	r2,r6,9de8 <_realloc_r+0x500>
    9cec:	a8800017 	ldw	r2,0(r21)
    9cf0:	b0800215 	stw	r2,8(r22)
    9cf4:	a8800117 	ldw	r2,4(r21)
    9cf8:	b0800315 	stw	r2,12(r22)
    9cfc:	008006c4 	movi	r2,27
    9d00:	11803f36 	bltu	r2,r6,9e00 <_realloc_r+0x518>
    9d04:	b0800404 	addi	r2,r22,16
    9d08:	ad400204 	addi	r21,r21,8
    9d0c:	a8c00017 	ldw	r3,0(r21)
    9d10:	10c00015 	stw	r3,0(r2)
    9d14:	a8c00117 	ldw	r3,4(r21)
    9d18:	10c00115 	stw	r3,4(r2)
    9d1c:	a8c00217 	ldw	r3,8(r21)
    9d20:	10c00215 	stw	r3,8(r2)
    9d24:	b447883a 	add	r3,r22,r17
    9d28:	bc45c83a 	sub	r2,r23,r17
    9d2c:	e0c00215 	stw	r3,8(fp)
    9d30:	10800054 	ori	r2,r2,1
    9d34:	18800115 	stw	r2,4(r3)
    9d38:	b0800117 	ldw	r2,4(r22)
    9d3c:	a009883a 	mov	r4,r20
    9d40:	1080004c 	andi	r2,r2,1
    9d44:	1462b03a 	or	r17,r2,r17
    9d48:	b4400115 	stw	r17,4(r22)
    9d4c:	000b4440 	call	b444 <__malloc_unlock>
    9d50:	9005883a 	mov	r2,r18
    9d54:	003f4006 	br	9a58 <_realloc_r+0x170>
    9d58:	a8c00217 	ldw	r3,8(r21)
    9d5c:	90c00215 	stw	r3,8(r18)
    9d60:	a8c00317 	ldw	r3,12(r21)
    9d64:	90c00315 	stw	r3,12(r18)
    9d68:	30801126 	beq	r6,r2,9db0 <_realloc_r+0x4c8>
    9d6c:	90800404 	addi	r2,r18,16
    9d70:	a8c00404 	addi	r3,r21,16
    9d74:	003f1906 	br	99dc <_realloc_r+0xf4>
    9d78:	90ffff17 	ldw	r3,-4(r18)
    9d7c:	00bfff04 	movi	r2,-4
    9d80:	a825883a 	mov	r18,r21
    9d84:	1884703a 	and	r2,r3,r2
    9d88:	80a1883a 	add	r16,r16,r2
    9d8c:	003f2406 	br	9a20 <_realloc_r+0x138>
    9d90:	a8800217 	ldw	r2,8(r21)
    9d94:	b0800415 	stw	r2,16(r22)
    9d98:	a8800317 	ldw	r2,12(r21)
    9d9c:	b0800515 	stw	r2,20(r22)
    9da0:	31000a26 	beq	r6,r4,9dcc <_realloc_r+0x4e4>
    9da4:	b0800604 	addi	r2,r22,24
    9da8:	ad400404 	addi	r21,r21,16
    9dac:	003fa906 	br	9c54 <_realloc_r+0x36c>
    9db0:	a9000417 	ldw	r4,16(r21)
    9db4:	90800604 	addi	r2,r18,24
    9db8:	a8c00604 	addi	r3,r21,24
    9dbc:	91000415 	stw	r4,16(r18)
    9dc0:	a9000517 	ldw	r4,20(r21)
    9dc4:	91000515 	stw	r4,20(r18)
    9dc8:	003f0406 	br	99dc <_realloc_r+0xf4>
    9dcc:	a8c00417 	ldw	r3,16(r21)
    9dd0:	ad400604 	addi	r21,r21,24
    9dd4:	b0800804 	addi	r2,r22,32
    9dd8:	b0c00615 	stw	r3,24(r22)
    9ddc:	a8ffff17 	ldw	r3,-4(r21)
    9de0:	b0c00715 	stw	r3,28(r22)
    9de4:	003f9b06 	br	9c54 <_realloc_r+0x36c>
    9de8:	9005883a 	mov	r2,r18
    9dec:	003fc706 	br	9d0c <_realloc_r+0x424>
    9df0:	a80b883a 	mov	r5,r21
    9df4:	9009883a 	mov	r4,r18
    9df8:	00096640 	call	9664 <memmove>
    9dfc:	003fc906 	br	9d24 <_realloc_r+0x43c>
    9e00:	a8800217 	ldw	r2,8(r21)
    9e04:	b0800415 	stw	r2,16(r22)
    9e08:	a8800317 	ldw	r2,12(r21)
    9e0c:	b0800515 	stw	r2,20(r22)
    9e10:	31000726 	beq	r6,r4,9e30 <_realloc_r+0x548>
    9e14:	b0800604 	addi	r2,r22,24
    9e18:	ad400404 	addi	r21,r21,16
    9e1c:	003fbb06 	br	9d0c <_realloc_r+0x424>
    9e20:	a009883a 	mov	r4,r20
    9e24:	000b4440 	call	b444 <__malloc_unlock>
    9e28:	0005883a 	mov	r2,zero
    9e2c:	003f0a06 	br	9a58 <_realloc_r+0x170>
    9e30:	a8c00417 	ldw	r3,16(r21)
    9e34:	ad400604 	addi	r21,r21,24
    9e38:	b0800804 	addi	r2,r22,32
    9e3c:	b0c00615 	stw	r3,24(r22)
    9e40:	a8ffff17 	ldw	r3,-4(r21)
    9e44:	b0c00715 	stw	r3,28(r22)
    9e48:	003fb006 	br	9d0c <_realloc_r+0x424>

00009e4c <_sbrk_r>:
    9e4c:	defffd04 	addi	sp,sp,-12
    9e50:	dc000015 	stw	r16,0(sp)
    9e54:	04000074 	movhi	r16,1
    9e58:	dc400115 	stw	r17,4(sp)
    9e5c:	84374d04 	addi	r16,r16,-8908
    9e60:	2023883a 	mov	r17,r4
    9e64:	2809883a 	mov	r4,r5
    9e68:	dfc00215 	stw	ra,8(sp)
    9e6c:	80000015 	stw	zero,0(r16)
    9e70:	000b6040 	call	b604 <sbrk>
    9e74:	00ffffc4 	movi	r3,-1
    9e78:	10c00526 	beq	r2,r3,9e90 <_sbrk_r+0x44>
    9e7c:	dfc00217 	ldw	ra,8(sp)
    9e80:	dc400117 	ldw	r17,4(sp)
    9e84:	dc000017 	ldw	r16,0(sp)
    9e88:	dec00304 	addi	sp,sp,12
    9e8c:	f800283a 	ret
    9e90:	80c00017 	ldw	r3,0(r16)
    9e94:	183ff926 	beq	r3,zero,9e7c <_sbrk_r+0x30>
    9e98:	88c00015 	stw	r3,0(r17)
    9e9c:	003ff706 	br	9e7c <_sbrk_r+0x30>

00009ea0 <__sread>:
    9ea0:	defffe04 	addi	sp,sp,-8
    9ea4:	dc000015 	stw	r16,0(sp)
    9ea8:	2821883a 	mov	r16,r5
    9eac:	2940038f 	ldh	r5,14(r5)
    9eb0:	dfc00115 	stw	ra,4(sp)
    9eb4:	000abe00 	call	abe0 <_read_r>
    9eb8:	10000716 	blt	r2,zero,9ed8 <__sread+0x38>
    9ebc:	80c01417 	ldw	r3,80(r16)
    9ec0:	1887883a 	add	r3,r3,r2
    9ec4:	80c01415 	stw	r3,80(r16)
    9ec8:	dfc00117 	ldw	ra,4(sp)
    9ecc:	dc000017 	ldw	r16,0(sp)
    9ed0:	dec00204 	addi	sp,sp,8
    9ed4:	f800283a 	ret
    9ed8:	80c0030b 	ldhu	r3,12(r16)
    9edc:	18fbffcc 	andi	r3,r3,61439
    9ee0:	80c0030d 	sth	r3,12(r16)
    9ee4:	dfc00117 	ldw	ra,4(sp)
    9ee8:	dc000017 	ldw	r16,0(sp)
    9eec:	dec00204 	addi	sp,sp,8
    9ef0:	f800283a 	ret

00009ef4 <__seofread>:
    9ef4:	0005883a 	mov	r2,zero
    9ef8:	f800283a 	ret

00009efc <__swrite>:
    9efc:	2880030b 	ldhu	r2,12(r5)
    9f00:	defffb04 	addi	sp,sp,-20
    9f04:	dcc00315 	stw	r19,12(sp)
    9f08:	dc800215 	stw	r18,8(sp)
    9f0c:	dc400115 	stw	r17,4(sp)
    9f10:	dc000015 	stw	r16,0(sp)
    9f14:	dfc00415 	stw	ra,16(sp)
    9f18:	10c0400c 	andi	r3,r2,256
    9f1c:	2821883a 	mov	r16,r5
    9f20:	2023883a 	mov	r17,r4
    9f24:	3025883a 	mov	r18,r6
    9f28:	3827883a 	mov	r19,r7
    9f2c:	18000526 	beq	r3,zero,9f44 <__swrite+0x48>
    9f30:	2940038f 	ldh	r5,14(r5)
    9f34:	01c00084 	movi	r7,2
    9f38:	000d883a 	mov	r6,zero
    9f3c:	000a9c40 	call	a9c4 <_lseek_r>
    9f40:	8080030b 	ldhu	r2,12(r16)
    9f44:	8140038f 	ldh	r5,14(r16)
    9f48:	10bbffcc 	andi	r2,r2,61439
    9f4c:	980f883a 	mov	r7,r19
    9f50:	900d883a 	mov	r6,r18
    9f54:	8809883a 	mov	r4,r17
    9f58:	8080030d 	sth	r2,12(r16)
    9f5c:	dfc00417 	ldw	ra,16(sp)
    9f60:	dcc00317 	ldw	r19,12(sp)
    9f64:	dc800217 	ldw	r18,8(sp)
    9f68:	dc400117 	ldw	r17,4(sp)
    9f6c:	dc000017 	ldw	r16,0(sp)
    9f70:	dec00504 	addi	sp,sp,20
    9f74:	0009fdc1 	jmpi	9fdc <_write_r>

00009f78 <__sseek>:
    9f78:	defffe04 	addi	sp,sp,-8
    9f7c:	dc000015 	stw	r16,0(sp)
    9f80:	2821883a 	mov	r16,r5
    9f84:	2940038f 	ldh	r5,14(r5)
    9f88:	dfc00115 	stw	ra,4(sp)
    9f8c:	000a9c40 	call	a9c4 <_lseek_r>
    9f90:	00ffffc4 	movi	r3,-1
    9f94:	10c00826 	beq	r2,r3,9fb8 <__sseek+0x40>
    9f98:	80c0030b 	ldhu	r3,12(r16)
    9f9c:	80801415 	stw	r2,80(r16)
    9fa0:	18c40014 	ori	r3,r3,4096
    9fa4:	80c0030d 	sth	r3,12(r16)
    9fa8:	dfc00117 	ldw	ra,4(sp)
    9fac:	dc000017 	ldw	r16,0(sp)
    9fb0:	dec00204 	addi	sp,sp,8
    9fb4:	f800283a 	ret
    9fb8:	80c0030b 	ldhu	r3,12(r16)
    9fbc:	18fbffcc 	andi	r3,r3,61439
    9fc0:	80c0030d 	sth	r3,12(r16)
    9fc4:	dfc00117 	ldw	ra,4(sp)
    9fc8:	dc000017 	ldw	r16,0(sp)
    9fcc:	dec00204 	addi	sp,sp,8
    9fd0:	f800283a 	ret

00009fd4 <__sclose>:
    9fd4:	2940038f 	ldh	r5,14(r5)
    9fd8:	000a1901 	jmpi	a190 <_close_r>

00009fdc <_write_r>:
    9fdc:	defffd04 	addi	sp,sp,-12
    9fe0:	2805883a 	mov	r2,r5
    9fe4:	dc000015 	stw	r16,0(sp)
    9fe8:	04000074 	movhi	r16,1
    9fec:	dc400115 	stw	r17,4(sp)
    9ff0:	300b883a 	mov	r5,r6
    9ff4:	84374d04 	addi	r16,r16,-8908
    9ff8:	2023883a 	mov	r17,r4
    9ffc:	380d883a 	mov	r6,r7
    a000:	1009883a 	mov	r4,r2
    a004:	dfc00215 	stw	ra,8(sp)
    a008:	80000015 	stw	zero,0(r16)
    a00c:	000b7200 	call	b720 <write>
    a010:	00ffffc4 	movi	r3,-1
    a014:	10c00526 	beq	r2,r3,a02c <_write_r+0x50>
    a018:	dfc00217 	ldw	ra,8(sp)
    a01c:	dc400117 	ldw	r17,4(sp)
    a020:	dc000017 	ldw	r16,0(sp)
    a024:	dec00304 	addi	sp,sp,12
    a028:	f800283a 	ret
    a02c:	80c00017 	ldw	r3,0(r16)
    a030:	183ff926 	beq	r3,zero,a018 <_write_r+0x3c>
    a034:	88c00015 	stw	r3,0(r17)
    a038:	003ff706 	br	a018 <_write_r+0x3c>

0000a03c <__swsetup_r>:
    a03c:	00800074 	movhi	r2,1
    a040:	defffd04 	addi	sp,sp,-12
    a044:	10b4b504 	addi	r2,r2,-11564
    a048:	dc400115 	stw	r17,4(sp)
    a04c:	2023883a 	mov	r17,r4
    a050:	11000017 	ldw	r4,0(r2)
    a054:	dc000015 	stw	r16,0(sp)
    a058:	dfc00215 	stw	ra,8(sp)
    a05c:	2821883a 	mov	r16,r5
    a060:	20000226 	beq	r4,zero,a06c <__swsetup_r+0x30>
    a064:	20800e17 	ldw	r2,56(r4)
    a068:	10003126 	beq	r2,zero,a130 <__swsetup_r+0xf4>
    a06c:	8080030b 	ldhu	r2,12(r16)
    a070:	10c0020c 	andi	r3,r2,8
    a074:	1009883a 	mov	r4,r2
    a078:	18000f26 	beq	r3,zero,a0b8 <__swsetup_r+0x7c>
    a07c:	80c00417 	ldw	r3,16(r16)
    a080:	18001526 	beq	r3,zero,a0d8 <__swsetup_r+0x9c>
    a084:	1100004c 	andi	r4,r2,1
    a088:	20001c1e 	bne	r4,zero,a0fc <__swsetup_r+0xc0>
    a08c:	1080008c 	andi	r2,r2,2
    a090:	1000291e 	bne	r2,zero,a138 <__swsetup_r+0xfc>
    a094:	80800517 	ldw	r2,20(r16)
    a098:	80800215 	stw	r2,8(r16)
    a09c:	18001c26 	beq	r3,zero,a110 <__swsetup_r+0xd4>
    a0a0:	0005883a 	mov	r2,zero
    a0a4:	dfc00217 	ldw	ra,8(sp)
    a0a8:	dc400117 	ldw	r17,4(sp)
    a0ac:	dc000017 	ldw	r16,0(sp)
    a0b0:	dec00304 	addi	sp,sp,12
    a0b4:	f800283a 	ret
    a0b8:	2080040c 	andi	r2,r4,16
    a0bc:	10002e26 	beq	r2,zero,a178 <__swsetup_r+0x13c>
    a0c0:	2080010c 	andi	r2,r4,4
    a0c4:	10001e1e 	bne	r2,zero,a140 <__swsetup_r+0x104>
    a0c8:	80c00417 	ldw	r3,16(r16)
    a0cc:	20800214 	ori	r2,r4,8
    a0d0:	8080030d 	sth	r2,12(r16)
    a0d4:	183feb1e 	bne	r3,zero,a084 <__swsetup_r+0x48>
    a0d8:	1100a00c 	andi	r4,r2,640
    a0dc:	01408004 	movi	r5,512
    a0e0:	217fe826 	beq	r4,r5,a084 <__swsetup_r+0x48>
    a0e4:	800b883a 	mov	r5,r16
    a0e8:	8809883a 	mov	r4,r17
    a0ec:	000aa240 	call	aa24 <__smakebuf_r>
    a0f0:	8080030b 	ldhu	r2,12(r16)
    a0f4:	80c00417 	ldw	r3,16(r16)
    a0f8:	003fe206 	br	a084 <__swsetup_r+0x48>
    a0fc:	80800517 	ldw	r2,20(r16)
    a100:	80000215 	stw	zero,8(r16)
    a104:	0085c83a 	sub	r2,zero,r2
    a108:	80800615 	stw	r2,24(r16)
    a10c:	183fe41e 	bne	r3,zero,a0a0 <__swsetup_r+0x64>
    a110:	80c0030b 	ldhu	r3,12(r16)
    a114:	0005883a 	mov	r2,zero
    a118:	1900200c 	andi	r4,r3,128
    a11c:	203fe126 	beq	r4,zero,a0a4 <__swsetup_r+0x68>
    a120:	18c01014 	ori	r3,r3,64
    a124:	80c0030d 	sth	r3,12(r16)
    a128:	00bfffc4 	movi	r2,-1
    a12c:	003fdd06 	br	a0a4 <__swsetup_r+0x68>
    a130:	00085980 	call	8598 <__sinit>
    a134:	003fcd06 	br	a06c <__swsetup_r+0x30>
    a138:	0005883a 	mov	r2,zero
    a13c:	003fd606 	br	a098 <__swsetup_r+0x5c>
    a140:	81400c17 	ldw	r5,48(r16)
    a144:	28000626 	beq	r5,zero,a160 <__swsetup_r+0x124>
    a148:	80801004 	addi	r2,r16,64
    a14c:	28800326 	beq	r5,r2,a15c <__swsetup_r+0x120>
    a150:	8809883a 	mov	r4,r17
    a154:	000a6b40 	call	a6b4 <_free_r>
    a158:	8100030b 	ldhu	r4,12(r16)
    a15c:	80000c15 	stw	zero,48(r16)
    a160:	80c00417 	ldw	r3,16(r16)
    a164:	00bff6c4 	movi	r2,-37
    a168:	1108703a 	and	r4,r2,r4
    a16c:	80000115 	stw	zero,4(r16)
    a170:	80c00015 	stw	r3,0(r16)
    a174:	003fd506 	br	a0cc <__swsetup_r+0x90>
    a178:	00800244 	movi	r2,9
    a17c:	88800015 	stw	r2,0(r17)
    a180:	20801014 	ori	r2,r4,64
    a184:	8080030d 	sth	r2,12(r16)
    a188:	00bfffc4 	movi	r2,-1
    a18c:	003fc506 	br	a0a4 <__swsetup_r+0x68>

0000a190 <_close_r>:
    a190:	defffd04 	addi	sp,sp,-12
    a194:	dc000015 	stw	r16,0(sp)
    a198:	04000074 	movhi	r16,1
    a19c:	dc400115 	stw	r17,4(sp)
    a1a0:	84374d04 	addi	r16,r16,-8908
    a1a4:	2023883a 	mov	r17,r4
    a1a8:	2809883a 	mov	r4,r5
    a1ac:	dfc00215 	stw	ra,8(sp)
    a1b0:	80000015 	stw	zero,0(r16)
    a1b4:	000aee00 	call	aee0 <close>
    a1b8:	00ffffc4 	movi	r3,-1
    a1bc:	10c00526 	beq	r2,r3,a1d4 <_close_r+0x44>
    a1c0:	dfc00217 	ldw	ra,8(sp)
    a1c4:	dc400117 	ldw	r17,4(sp)
    a1c8:	dc000017 	ldw	r16,0(sp)
    a1cc:	dec00304 	addi	sp,sp,12
    a1d0:	f800283a 	ret
    a1d4:	80c00017 	ldw	r3,0(r16)
    a1d8:	183ff926 	beq	r3,zero,a1c0 <_close_r+0x30>
    a1dc:	88c00015 	stw	r3,0(r17)
    a1e0:	003ff706 	br	a1c0 <_close_r+0x30>

0000a1e4 <_fclose_r>:
    a1e4:	28003926 	beq	r5,zero,a2cc <_fclose_r+0xe8>
    a1e8:	defffc04 	addi	sp,sp,-16
    a1ec:	dc400115 	stw	r17,4(sp)
    a1f0:	dc000015 	stw	r16,0(sp)
    a1f4:	dfc00315 	stw	ra,12(sp)
    a1f8:	dc800215 	stw	r18,8(sp)
    a1fc:	2023883a 	mov	r17,r4
    a200:	2821883a 	mov	r16,r5
    a204:	20000226 	beq	r4,zero,a210 <_fclose_r+0x2c>
    a208:	20800e17 	ldw	r2,56(r4)
    a20c:	10002726 	beq	r2,zero,a2ac <_fclose_r+0xc8>
    a210:	8080030f 	ldh	r2,12(r16)
    a214:	1000071e 	bne	r2,zero,a234 <_fclose_r+0x50>
    a218:	0005883a 	mov	r2,zero
    a21c:	dfc00317 	ldw	ra,12(sp)
    a220:	dc800217 	ldw	r18,8(sp)
    a224:	dc400117 	ldw	r17,4(sp)
    a228:	dc000017 	ldw	r16,0(sp)
    a22c:	dec00404 	addi	sp,sp,16
    a230:	f800283a 	ret
    a234:	800b883a 	mov	r5,r16
    a238:	8809883a 	mov	r4,r17
    a23c:	000a2e80 	call	a2e8 <__sflush_r>
    a240:	1025883a 	mov	r18,r2
    a244:	80800b17 	ldw	r2,44(r16)
    a248:	10000426 	beq	r2,zero,a25c <_fclose_r+0x78>
    a24c:	81400717 	ldw	r5,28(r16)
    a250:	8809883a 	mov	r4,r17
    a254:	103ee83a 	callr	r2
    a258:	10001616 	blt	r2,zero,a2b4 <_fclose_r+0xd0>
    a25c:	8080030b 	ldhu	r2,12(r16)
    a260:	1080200c 	andi	r2,r2,128
    a264:	1000151e 	bne	r2,zero,a2bc <_fclose_r+0xd8>
    a268:	81400c17 	ldw	r5,48(r16)
    a26c:	28000526 	beq	r5,zero,a284 <_fclose_r+0xa0>
    a270:	80801004 	addi	r2,r16,64
    a274:	28800226 	beq	r5,r2,a280 <_fclose_r+0x9c>
    a278:	8809883a 	mov	r4,r17
    a27c:	000a6b40 	call	a6b4 <_free_r>
    a280:	80000c15 	stw	zero,48(r16)
    a284:	81401117 	ldw	r5,68(r16)
    a288:	28000326 	beq	r5,zero,a298 <_fclose_r+0xb4>
    a28c:	8809883a 	mov	r4,r17
    a290:	000a6b40 	call	a6b4 <_free_r>
    a294:	80001115 	stw	zero,68(r16)
    a298:	00085a80 	call	85a8 <__sfp_lock_acquire>
    a29c:	8000030d 	sth	zero,12(r16)
    a2a0:	00085ac0 	call	85ac <__sfp_lock_release>
    a2a4:	9005883a 	mov	r2,r18
    a2a8:	003fdc06 	br	a21c <_fclose_r+0x38>
    a2ac:	00085980 	call	8598 <__sinit>
    a2b0:	003fd706 	br	a210 <_fclose_r+0x2c>
    a2b4:	04bfffc4 	movi	r18,-1
    a2b8:	003fe806 	br	a25c <_fclose_r+0x78>
    a2bc:	81400417 	ldw	r5,16(r16)
    a2c0:	8809883a 	mov	r4,r17
    a2c4:	000a6b40 	call	a6b4 <_free_r>
    a2c8:	003fe706 	br	a268 <_fclose_r+0x84>
    a2cc:	0005883a 	mov	r2,zero
    a2d0:	f800283a 	ret

0000a2d4 <fclose>:
    a2d4:	00800074 	movhi	r2,1
    a2d8:	10b4b504 	addi	r2,r2,-11564
    a2dc:	200b883a 	mov	r5,r4
    a2e0:	11000017 	ldw	r4,0(r2)
    a2e4:	000a1e41 	jmpi	a1e4 <_fclose_r>

0000a2e8 <__sflush_r>:
    a2e8:	2880030b 	ldhu	r2,12(r5)
    a2ec:	defffb04 	addi	sp,sp,-20
    a2f0:	dcc00315 	stw	r19,12(sp)
    a2f4:	dc400115 	stw	r17,4(sp)
    a2f8:	dfc00415 	stw	ra,16(sp)
    a2fc:	dc800215 	stw	r18,8(sp)
    a300:	dc000015 	stw	r16,0(sp)
    a304:	10c0020c 	andi	r3,r2,8
    a308:	2823883a 	mov	r17,r5
    a30c:	2027883a 	mov	r19,r4
    a310:	1800311e 	bne	r3,zero,a3d8 <__sflush_r+0xf0>
    a314:	28c00117 	ldw	r3,4(r5)
    a318:	10820014 	ori	r2,r2,2048
    a31c:	2880030d 	sth	r2,12(r5)
    a320:	00c04b0e 	bge	zero,r3,a450 <__sflush_r+0x168>
    a324:	8a000a17 	ldw	r8,40(r17)
    a328:	40002326 	beq	r8,zero,a3b8 <__sflush_r+0xd0>
    a32c:	9c000017 	ldw	r16,0(r19)
    a330:	10c4000c 	andi	r3,r2,4096
    a334:	98000015 	stw	zero,0(r19)
    a338:	18004826 	beq	r3,zero,a45c <__sflush_r+0x174>
    a33c:	89801417 	ldw	r6,80(r17)
    a340:	10c0010c 	andi	r3,r2,4
    a344:	18000626 	beq	r3,zero,a360 <__sflush_r+0x78>
    a348:	88c00117 	ldw	r3,4(r17)
    a34c:	88800c17 	ldw	r2,48(r17)
    a350:	30cdc83a 	sub	r6,r6,r3
    a354:	10000226 	beq	r2,zero,a360 <__sflush_r+0x78>
    a358:	88800f17 	ldw	r2,60(r17)
    a35c:	308dc83a 	sub	r6,r6,r2
    a360:	89400717 	ldw	r5,28(r17)
    a364:	000f883a 	mov	r7,zero
    a368:	9809883a 	mov	r4,r19
    a36c:	403ee83a 	callr	r8
    a370:	00ffffc4 	movi	r3,-1
    a374:	10c04426 	beq	r2,r3,a488 <__sflush_r+0x1a0>
    a378:	88c0030b 	ldhu	r3,12(r17)
    a37c:	89000417 	ldw	r4,16(r17)
    a380:	88000115 	stw	zero,4(r17)
    a384:	197dffcc 	andi	r5,r3,63487
    a388:	8940030d 	sth	r5,12(r17)
    a38c:	89000015 	stw	r4,0(r17)
    a390:	18c4000c 	andi	r3,r3,4096
    a394:	18002c1e 	bne	r3,zero,a448 <__sflush_r+0x160>
    a398:	89400c17 	ldw	r5,48(r17)
    a39c:	9c000015 	stw	r16,0(r19)
    a3a0:	28000526 	beq	r5,zero,a3b8 <__sflush_r+0xd0>
    a3a4:	88801004 	addi	r2,r17,64
    a3a8:	28800226 	beq	r5,r2,a3b4 <__sflush_r+0xcc>
    a3ac:	9809883a 	mov	r4,r19
    a3b0:	000a6b40 	call	a6b4 <_free_r>
    a3b4:	88000c15 	stw	zero,48(r17)
    a3b8:	0005883a 	mov	r2,zero
    a3bc:	dfc00417 	ldw	ra,16(sp)
    a3c0:	dcc00317 	ldw	r19,12(sp)
    a3c4:	dc800217 	ldw	r18,8(sp)
    a3c8:	dc400117 	ldw	r17,4(sp)
    a3cc:	dc000017 	ldw	r16,0(sp)
    a3d0:	dec00504 	addi	sp,sp,20
    a3d4:	f800283a 	ret
    a3d8:	2c800417 	ldw	r18,16(r5)
    a3dc:	903ff626 	beq	r18,zero,a3b8 <__sflush_r+0xd0>
    a3e0:	2c000017 	ldw	r16,0(r5)
    a3e4:	108000cc 	andi	r2,r2,3
    a3e8:	2c800015 	stw	r18,0(r5)
    a3ec:	84a1c83a 	sub	r16,r16,r18
    a3f0:	1000131e 	bne	r2,zero,a440 <__sflush_r+0x158>
    a3f4:	28800517 	ldw	r2,20(r5)
    a3f8:	88800215 	stw	r2,8(r17)
    a3fc:	04000316 	blt	zero,r16,a40c <__sflush_r+0x124>
    a400:	003fed06 	br	a3b8 <__sflush_r+0xd0>
    a404:	90a5883a 	add	r18,r18,r2
    a408:	043feb0e 	bge	zero,r16,a3b8 <__sflush_r+0xd0>
    a40c:	88800917 	ldw	r2,36(r17)
    a410:	89400717 	ldw	r5,28(r17)
    a414:	800f883a 	mov	r7,r16
    a418:	900d883a 	mov	r6,r18
    a41c:	9809883a 	mov	r4,r19
    a420:	103ee83a 	callr	r2
    a424:	80a1c83a 	sub	r16,r16,r2
    a428:	00bff616 	blt	zero,r2,a404 <__sflush_r+0x11c>
    a42c:	88c0030b 	ldhu	r3,12(r17)
    a430:	00bfffc4 	movi	r2,-1
    a434:	18c01014 	ori	r3,r3,64
    a438:	88c0030d 	sth	r3,12(r17)
    a43c:	003fdf06 	br	a3bc <__sflush_r+0xd4>
    a440:	0005883a 	mov	r2,zero
    a444:	003fec06 	br	a3f8 <__sflush_r+0x110>
    a448:	88801415 	stw	r2,80(r17)
    a44c:	003fd206 	br	a398 <__sflush_r+0xb0>
    a450:	28c00f17 	ldw	r3,60(r5)
    a454:	00ffb316 	blt	zero,r3,a324 <__sflush_r+0x3c>
    a458:	003fd706 	br	a3b8 <__sflush_r+0xd0>
    a45c:	89400717 	ldw	r5,28(r17)
    a460:	000d883a 	mov	r6,zero
    a464:	01c00044 	movi	r7,1
    a468:	9809883a 	mov	r4,r19
    a46c:	403ee83a 	callr	r8
    a470:	100d883a 	mov	r6,r2
    a474:	00bfffc4 	movi	r2,-1
    a478:	30801426 	beq	r6,r2,a4cc <__sflush_r+0x1e4>
    a47c:	8880030b 	ldhu	r2,12(r17)
    a480:	8a000a17 	ldw	r8,40(r17)
    a484:	003fae06 	br	a340 <__sflush_r+0x58>
    a488:	98c00017 	ldw	r3,0(r19)
    a48c:	183fba26 	beq	r3,zero,a378 <__sflush_r+0x90>
    a490:	01000744 	movi	r4,29
    a494:	19000626 	beq	r3,r4,a4b0 <__sflush_r+0x1c8>
    a498:	01000584 	movi	r4,22
    a49c:	19000426 	beq	r3,r4,a4b0 <__sflush_r+0x1c8>
    a4a0:	88c0030b 	ldhu	r3,12(r17)
    a4a4:	18c01014 	ori	r3,r3,64
    a4a8:	88c0030d 	sth	r3,12(r17)
    a4ac:	003fc306 	br	a3bc <__sflush_r+0xd4>
    a4b0:	8880030b 	ldhu	r2,12(r17)
    a4b4:	88c00417 	ldw	r3,16(r17)
    a4b8:	88000115 	stw	zero,4(r17)
    a4bc:	10bdffcc 	andi	r2,r2,63487
    a4c0:	8880030d 	sth	r2,12(r17)
    a4c4:	88c00015 	stw	r3,0(r17)
    a4c8:	003fb306 	br	a398 <__sflush_r+0xb0>
    a4cc:	98800017 	ldw	r2,0(r19)
    a4d0:	103fea26 	beq	r2,zero,a47c <__sflush_r+0x194>
    a4d4:	00c00744 	movi	r3,29
    a4d8:	10c00226 	beq	r2,r3,a4e4 <__sflush_r+0x1fc>
    a4dc:	00c00584 	movi	r3,22
    a4e0:	10c0031e 	bne	r2,r3,a4f0 <__sflush_r+0x208>
    a4e4:	9c000015 	stw	r16,0(r19)
    a4e8:	0005883a 	mov	r2,zero
    a4ec:	003fb306 	br	a3bc <__sflush_r+0xd4>
    a4f0:	88c0030b 	ldhu	r3,12(r17)
    a4f4:	3005883a 	mov	r2,r6
    a4f8:	18c01014 	ori	r3,r3,64
    a4fc:	88c0030d 	sth	r3,12(r17)
    a500:	003fae06 	br	a3bc <__sflush_r+0xd4>

0000a504 <_fflush_r>:
    a504:	defffd04 	addi	sp,sp,-12
    a508:	dc000115 	stw	r16,4(sp)
    a50c:	dfc00215 	stw	ra,8(sp)
    a510:	2021883a 	mov	r16,r4
    a514:	20000226 	beq	r4,zero,a520 <_fflush_r+0x1c>
    a518:	20800e17 	ldw	r2,56(r4)
    a51c:	10000c26 	beq	r2,zero,a550 <_fflush_r+0x4c>
    a520:	2880030f 	ldh	r2,12(r5)
    a524:	1000051e 	bne	r2,zero,a53c <_fflush_r+0x38>
    a528:	0005883a 	mov	r2,zero
    a52c:	dfc00217 	ldw	ra,8(sp)
    a530:	dc000117 	ldw	r16,4(sp)
    a534:	dec00304 	addi	sp,sp,12
    a538:	f800283a 	ret
    a53c:	8009883a 	mov	r4,r16
    a540:	dfc00217 	ldw	ra,8(sp)
    a544:	dc000117 	ldw	r16,4(sp)
    a548:	dec00304 	addi	sp,sp,12
    a54c:	000a2e81 	jmpi	a2e8 <__sflush_r>
    a550:	d9400015 	stw	r5,0(sp)
    a554:	00085980 	call	8598 <__sinit>
    a558:	d9400017 	ldw	r5,0(sp)
    a55c:	003ff006 	br	a520 <_fflush_r+0x1c>

0000a560 <fflush>:
    a560:	20000526 	beq	r4,zero,a578 <fflush+0x18>
    a564:	00800074 	movhi	r2,1
    a568:	10b4b504 	addi	r2,r2,-11564
    a56c:	200b883a 	mov	r5,r4
    a570:	11000017 	ldw	r4,0(r2)
    a574:	000a5041 	jmpi	a504 <_fflush_r>
    a578:	00800074 	movhi	r2,1
    a57c:	10b4b404 	addi	r2,r2,-11568
    a580:	11000017 	ldw	r4,0(r2)
    a584:	01400074 	movhi	r5,1
    a588:	29694104 	addi	r5,r5,-23292
    a58c:	0008b681 	jmpi	8b68 <_fwalk_reent>

0000a590 <_malloc_trim_r>:
    a590:	defffb04 	addi	sp,sp,-20
    a594:	dcc00315 	stw	r19,12(sp)
    a598:	04c00074 	movhi	r19,1
    a59c:	dc800215 	stw	r18,8(sp)
    a5a0:	dc400115 	stw	r17,4(sp)
    a5a4:	dc000015 	stw	r16,0(sp)
    a5a8:	dfc00415 	stw	ra,16(sp)
    a5ac:	2821883a 	mov	r16,r5
    a5b0:	9cf33d04 	addi	r19,r19,-13068
    a5b4:	2025883a 	mov	r18,r4
    a5b8:	000b4200 	call	b420 <__malloc_lock>
    a5bc:	98800217 	ldw	r2,8(r19)
    a5c0:	14400117 	ldw	r17,4(r2)
    a5c4:	00bfff04 	movi	r2,-4
    a5c8:	88a2703a 	and	r17,r17,r2
    a5cc:	8c21c83a 	sub	r16,r17,r16
    a5d0:	8403fbc4 	addi	r16,r16,4079
    a5d4:	8020d33a 	srli	r16,r16,12
    a5d8:	0083ffc4 	movi	r2,4095
    a5dc:	843fffc4 	addi	r16,r16,-1
    a5e0:	8020933a 	slli	r16,r16,12
    a5e4:	1400060e 	bge	r2,r16,a600 <_malloc_trim_r+0x70>
    a5e8:	000b883a 	mov	r5,zero
    a5ec:	9009883a 	mov	r4,r18
    a5f0:	0009e4c0 	call	9e4c <_sbrk_r>
    a5f4:	98c00217 	ldw	r3,8(r19)
    a5f8:	1c47883a 	add	r3,r3,r17
    a5fc:	10c00a26 	beq	r2,r3,a628 <_malloc_trim_r+0x98>
    a600:	9009883a 	mov	r4,r18
    a604:	000b4440 	call	b444 <__malloc_unlock>
    a608:	0005883a 	mov	r2,zero
    a60c:	dfc00417 	ldw	ra,16(sp)
    a610:	dcc00317 	ldw	r19,12(sp)
    a614:	dc800217 	ldw	r18,8(sp)
    a618:	dc400117 	ldw	r17,4(sp)
    a61c:	dc000017 	ldw	r16,0(sp)
    a620:	dec00504 	addi	sp,sp,20
    a624:	f800283a 	ret
    a628:	040bc83a 	sub	r5,zero,r16
    a62c:	9009883a 	mov	r4,r18
    a630:	0009e4c0 	call	9e4c <_sbrk_r>
    a634:	00ffffc4 	movi	r3,-1
    a638:	10c00d26 	beq	r2,r3,a670 <_malloc_trim_r+0xe0>
    a63c:	00c00074 	movhi	r3,1
    a640:	18f75104 	addi	r3,r3,-8892
    a644:	18800017 	ldw	r2,0(r3)
    a648:	99000217 	ldw	r4,8(r19)
    a64c:	8c23c83a 	sub	r17,r17,r16
    a650:	8c400054 	ori	r17,r17,1
    a654:	1421c83a 	sub	r16,r2,r16
    a658:	24400115 	stw	r17,4(r4)
    a65c:	9009883a 	mov	r4,r18
    a660:	1c000015 	stw	r16,0(r3)
    a664:	000b4440 	call	b444 <__malloc_unlock>
    a668:	00800044 	movi	r2,1
    a66c:	003fe706 	br	a60c <_malloc_trim_r+0x7c>
    a670:	000b883a 	mov	r5,zero
    a674:	9009883a 	mov	r4,r18
    a678:	0009e4c0 	call	9e4c <_sbrk_r>
    a67c:	99000217 	ldw	r4,8(r19)
    a680:	014003c4 	movi	r5,15
    a684:	1107c83a 	sub	r3,r2,r4
    a688:	28ffdd0e 	bge	r5,r3,a600 <_malloc_trim_r+0x70>
    a68c:	01400074 	movhi	r5,1
    a690:	2974b604 	addi	r5,r5,-11560
    a694:	29400017 	ldw	r5,0(r5)
    a698:	18c00054 	ori	r3,r3,1
    a69c:	20c00115 	stw	r3,4(r4)
    a6a0:	00c00074 	movhi	r3,1
    a6a4:	1145c83a 	sub	r2,r2,r5
    a6a8:	18f75104 	addi	r3,r3,-8892
    a6ac:	18800015 	stw	r2,0(r3)
    a6b0:	003fd306 	br	a600 <_malloc_trim_r+0x70>

0000a6b4 <_free_r>:
    a6b4:	28004126 	beq	r5,zero,a7bc <_free_r+0x108>
    a6b8:	defffd04 	addi	sp,sp,-12
    a6bc:	dc400115 	stw	r17,4(sp)
    a6c0:	dc000015 	stw	r16,0(sp)
    a6c4:	2023883a 	mov	r17,r4
    a6c8:	2821883a 	mov	r16,r5
    a6cc:	dfc00215 	stw	ra,8(sp)
    a6d0:	000b4200 	call	b420 <__malloc_lock>
    a6d4:	81ffff17 	ldw	r7,-4(r16)
    a6d8:	00bfff84 	movi	r2,-2
    a6dc:	01000074 	movhi	r4,1
    a6e0:	81bffe04 	addi	r6,r16,-8
    a6e4:	3884703a 	and	r2,r7,r2
    a6e8:	21333d04 	addi	r4,r4,-13068
    a6ec:	308b883a 	add	r5,r6,r2
    a6f0:	2a400117 	ldw	r9,4(r5)
    a6f4:	22000217 	ldw	r8,8(r4)
    a6f8:	00ffff04 	movi	r3,-4
    a6fc:	48c6703a 	and	r3,r9,r3
    a700:	2a005726 	beq	r5,r8,a860 <_free_r+0x1ac>
    a704:	28c00115 	stw	r3,4(r5)
    a708:	39c0004c 	andi	r7,r7,1
    a70c:	3800091e 	bne	r7,zero,a734 <_free_r+0x80>
    a710:	823ffe17 	ldw	r8,-8(r16)
    a714:	22400204 	addi	r9,r4,8
    a718:	320dc83a 	sub	r6,r6,r8
    a71c:	31c00217 	ldw	r7,8(r6)
    a720:	1205883a 	add	r2,r2,r8
    a724:	3a406526 	beq	r7,r9,a8bc <_free_r+0x208>
    a728:	32000317 	ldw	r8,12(r6)
    a72c:	3a000315 	stw	r8,12(r7)
    a730:	41c00215 	stw	r7,8(r8)
    a734:	28cf883a 	add	r7,r5,r3
    a738:	39c00117 	ldw	r7,4(r7)
    a73c:	39c0004c 	andi	r7,r7,1
    a740:	38003a26 	beq	r7,zero,a82c <_free_r+0x178>
    a744:	10c00054 	ori	r3,r2,1
    a748:	30c00115 	stw	r3,4(r6)
    a74c:	3087883a 	add	r3,r6,r2
    a750:	18800015 	stw	r2,0(r3)
    a754:	00c07fc4 	movi	r3,511
    a758:	18801936 	bltu	r3,r2,a7c0 <_free_r+0x10c>
    a75c:	1004d0fa 	srli	r2,r2,3
    a760:	01c00044 	movi	r7,1
    a764:	21400117 	ldw	r5,4(r4)
    a768:	10c00044 	addi	r3,r2,1
    a76c:	18c7883a 	add	r3,r3,r3
    a770:	1005d0ba 	srai	r2,r2,2
    a774:	18c7883a 	add	r3,r3,r3
    a778:	18c7883a 	add	r3,r3,r3
    a77c:	1907883a 	add	r3,r3,r4
    a780:	3884983a 	sll	r2,r7,r2
    a784:	19c00017 	ldw	r7,0(r3)
    a788:	1a3ffe04 	addi	r8,r3,-8
    a78c:	1144b03a 	or	r2,r2,r5
    a790:	32000315 	stw	r8,12(r6)
    a794:	31c00215 	stw	r7,8(r6)
    a798:	20800115 	stw	r2,4(r4)
    a79c:	19800015 	stw	r6,0(r3)
    a7a0:	39800315 	stw	r6,12(r7)
    a7a4:	8809883a 	mov	r4,r17
    a7a8:	dfc00217 	ldw	ra,8(sp)
    a7ac:	dc400117 	ldw	r17,4(sp)
    a7b0:	dc000017 	ldw	r16,0(sp)
    a7b4:	dec00304 	addi	sp,sp,12
    a7b8:	000b4441 	jmpi	b444 <__malloc_unlock>
    a7bc:	f800283a 	ret
    a7c0:	100ad27a 	srli	r5,r2,9
    a7c4:	00c00104 	movi	r3,4
    a7c8:	19404a36 	bltu	r3,r5,a8f4 <_free_r+0x240>
    a7cc:	100ad1ba 	srli	r5,r2,6
    a7d0:	28c00e44 	addi	r3,r5,57
    a7d4:	18c7883a 	add	r3,r3,r3
    a7d8:	29400e04 	addi	r5,r5,56
    a7dc:	18c7883a 	add	r3,r3,r3
    a7e0:	18c7883a 	add	r3,r3,r3
    a7e4:	1909883a 	add	r4,r3,r4
    a7e8:	20c00017 	ldw	r3,0(r4)
    a7ec:	01c00074 	movhi	r7,1
    a7f0:	213ffe04 	addi	r4,r4,-8
    a7f4:	39f33d04 	addi	r7,r7,-13068
    a7f8:	20c04426 	beq	r4,r3,a90c <_free_r+0x258>
    a7fc:	01ffff04 	movi	r7,-4
    a800:	19400117 	ldw	r5,4(r3)
    a804:	29ca703a 	and	r5,r5,r7
    a808:	1140022e 	bgeu	r2,r5,a814 <_free_r+0x160>
    a80c:	18c00217 	ldw	r3,8(r3)
    a810:	20fffb1e 	bne	r4,r3,a800 <_free_r+0x14c>
    a814:	19000317 	ldw	r4,12(r3)
    a818:	31000315 	stw	r4,12(r6)
    a81c:	30c00215 	stw	r3,8(r6)
    a820:	21800215 	stw	r6,8(r4)
    a824:	19800315 	stw	r6,12(r3)
    a828:	003fde06 	br	a7a4 <_free_r+0xf0>
    a82c:	29c00217 	ldw	r7,8(r5)
    a830:	10c5883a 	add	r2,r2,r3
    a834:	00c00074 	movhi	r3,1
    a838:	18f33f04 	addi	r3,r3,-13060
    a83c:	38c03b26 	beq	r7,r3,a92c <_free_r+0x278>
    a840:	2a000317 	ldw	r8,12(r5)
    a844:	11400054 	ori	r5,r2,1
    a848:	3087883a 	add	r3,r6,r2
    a84c:	3a000315 	stw	r8,12(r7)
    a850:	41c00215 	stw	r7,8(r8)
    a854:	31400115 	stw	r5,4(r6)
    a858:	18800015 	stw	r2,0(r3)
    a85c:	003fbd06 	br	a754 <_free_r+0xa0>
    a860:	39c0004c 	andi	r7,r7,1
    a864:	10c5883a 	add	r2,r2,r3
    a868:	3800071e 	bne	r7,zero,a888 <_free_r+0x1d4>
    a86c:	81fffe17 	ldw	r7,-8(r16)
    a870:	31cdc83a 	sub	r6,r6,r7
    a874:	30c00317 	ldw	r3,12(r6)
    a878:	31400217 	ldw	r5,8(r6)
    a87c:	11c5883a 	add	r2,r2,r7
    a880:	28c00315 	stw	r3,12(r5)
    a884:	19400215 	stw	r5,8(r3)
    a888:	10c00054 	ori	r3,r2,1
    a88c:	30c00115 	stw	r3,4(r6)
    a890:	00c00074 	movhi	r3,1
    a894:	18f4b704 	addi	r3,r3,-11556
    a898:	18c00017 	ldw	r3,0(r3)
    a89c:	21800215 	stw	r6,8(r4)
    a8a0:	10ffc036 	bltu	r2,r3,a7a4 <_free_r+0xf0>
    a8a4:	00800074 	movhi	r2,1
    a8a8:	10b74c04 	addi	r2,r2,-8912
    a8ac:	11400017 	ldw	r5,0(r2)
    a8b0:	8809883a 	mov	r4,r17
    a8b4:	000a5900 	call	a590 <_malloc_trim_r>
    a8b8:	003fba06 	br	a7a4 <_free_r+0xf0>
    a8bc:	28c9883a 	add	r4,r5,r3
    a8c0:	21000117 	ldw	r4,4(r4)
    a8c4:	2100004c 	andi	r4,r4,1
    a8c8:	2000391e 	bne	r4,zero,a9b0 <_free_r+0x2fc>
    a8cc:	29c00217 	ldw	r7,8(r5)
    a8d0:	29000317 	ldw	r4,12(r5)
    a8d4:	1885883a 	add	r2,r3,r2
    a8d8:	10c00054 	ori	r3,r2,1
    a8dc:	39000315 	stw	r4,12(r7)
    a8e0:	21c00215 	stw	r7,8(r4)
    a8e4:	30c00115 	stw	r3,4(r6)
    a8e8:	308d883a 	add	r6,r6,r2
    a8ec:	30800015 	stw	r2,0(r6)
    a8f0:	003fac06 	br	a7a4 <_free_r+0xf0>
    a8f4:	00c00504 	movi	r3,20
    a8f8:	19401536 	bltu	r3,r5,a950 <_free_r+0x29c>
    a8fc:	28c01704 	addi	r3,r5,92
    a900:	18c7883a 	add	r3,r3,r3
    a904:	294016c4 	addi	r5,r5,91
    a908:	003fb406 	br	a7dc <_free_r+0x128>
    a90c:	280bd0ba 	srai	r5,r5,2
    a910:	00c00044 	movi	r3,1
    a914:	38800117 	ldw	r2,4(r7)
    a918:	194a983a 	sll	r5,r3,r5
    a91c:	2007883a 	mov	r3,r4
    a920:	2884b03a 	or	r2,r5,r2
    a924:	38800115 	stw	r2,4(r7)
    a928:	003fbb06 	br	a818 <_free_r+0x164>
    a92c:	21800515 	stw	r6,20(r4)
    a930:	21800415 	stw	r6,16(r4)
    a934:	10c00054 	ori	r3,r2,1
    a938:	31c00315 	stw	r7,12(r6)
    a93c:	31c00215 	stw	r7,8(r6)
    a940:	30c00115 	stw	r3,4(r6)
    a944:	308d883a 	add	r6,r6,r2
    a948:	30800015 	stw	r2,0(r6)
    a94c:	003f9506 	br	a7a4 <_free_r+0xf0>
    a950:	00c01504 	movi	r3,84
    a954:	19400536 	bltu	r3,r5,a96c <_free_r+0x2b8>
    a958:	100ad33a 	srli	r5,r2,12
    a95c:	28c01bc4 	addi	r3,r5,111
    a960:	18c7883a 	add	r3,r3,r3
    a964:	29401b84 	addi	r5,r5,110
    a968:	003f9c06 	br	a7dc <_free_r+0x128>
    a96c:	00c05504 	movi	r3,340
    a970:	19400536 	bltu	r3,r5,a988 <_free_r+0x2d4>
    a974:	100ad3fa 	srli	r5,r2,15
    a978:	28c01e04 	addi	r3,r5,120
    a97c:	18c7883a 	add	r3,r3,r3
    a980:	29401dc4 	addi	r5,r5,119
    a984:	003f9506 	br	a7dc <_free_r+0x128>
    a988:	00c15504 	movi	r3,1364
    a98c:	19400536 	bltu	r3,r5,a9a4 <_free_r+0x2f0>
    a990:	100ad4ba 	srli	r5,r2,18
    a994:	28c01f44 	addi	r3,r5,125
    a998:	18c7883a 	add	r3,r3,r3
    a99c:	29401f04 	addi	r5,r5,124
    a9a0:	003f8e06 	br	a7dc <_free_r+0x128>
    a9a4:	00c03f84 	movi	r3,254
    a9a8:	01401f84 	movi	r5,126
    a9ac:	003f8b06 	br	a7dc <_free_r+0x128>
    a9b0:	10c00054 	ori	r3,r2,1
    a9b4:	30c00115 	stw	r3,4(r6)
    a9b8:	308d883a 	add	r6,r6,r2
    a9bc:	30800015 	stw	r2,0(r6)
    a9c0:	003f7806 	br	a7a4 <_free_r+0xf0>

0000a9c4 <_lseek_r>:
    a9c4:	defffd04 	addi	sp,sp,-12
    a9c8:	2805883a 	mov	r2,r5
    a9cc:	dc000015 	stw	r16,0(sp)
    a9d0:	04000074 	movhi	r16,1
    a9d4:	dc400115 	stw	r17,4(sp)
    a9d8:	300b883a 	mov	r5,r6
    a9dc:	84374d04 	addi	r16,r16,-8908
    a9e0:	2023883a 	mov	r17,r4
    a9e4:	380d883a 	mov	r6,r7
    a9e8:	1009883a 	mov	r4,r2
    a9ec:	dfc00215 	stw	ra,8(sp)
    a9f0:	80000015 	stw	zero,0(r16)
    a9f4:	000b2d00 	call	b2d0 <lseek>
    a9f8:	00ffffc4 	movi	r3,-1
    a9fc:	10c00526 	beq	r2,r3,aa14 <_lseek_r+0x50>
    aa00:	dfc00217 	ldw	ra,8(sp)
    aa04:	dc400117 	ldw	r17,4(sp)
    aa08:	dc000017 	ldw	r16,0(sp)
    aa0c:	dec00304 	addi	sp,sp,12
    aa10:	f800283a 	ret
    aa14:	80c00017 	ldw	r3,0(r16)
    aa18:	183ff926 	beq	r3,zero,aa00 <_lseek_r+0x3c>
    aa1c:	88c00015 	stw	r3,0(r17)
    aa20:	003ff706 	br	aa00 <_lseek_r+0x3c>

0000aa24 <__smakebuf_r>:
    aa24:	2880030b 	ldhu	r2,12(r5)
    aa28:	10c0008c 	andi	r3,r2,2
    aa2c:	1800411e 	bne	r3,zero,ab34 <__smakebuf_r+0x110>
    aa30:	deffec04 	addi	sp,sp,-80
    aa34:	dc000f15 	stw	r16,60(sp)
    aa38:	2821883a 	mov	r16,r5
    aa3c:	2940038f 	ldh	r5,14(r5)
    aa40:	dc401015 	stw	r17,64(sp)
    aa44:	dfc01315 	stw	ra,76(sp)
    aa48:	dcc01215 	stw	r19,72(sp)
    aa4c:	dc801115 	stw	r18,68(sp)
    aa50:	2023883a 	mov	r17,r4
    aa54:	28001c16 	blt	r5,zero,aac8 <__smakebuf_r+0xa4>
    aa58:	d80d883a 	mov	r6,sp
    aa5c:	000ac400 	call	ac40 <_fstat_r>
    aa60:	10001816 	blt	r2,zero,aac4 <__smakebuf_r+0xa0>
    aa64:	d8800117 	ldw	r2,4(sp)
    aa68:	00e00014 	movui	r3,32768
    aa6c:	10bc000c 	andi	r2,r2,61440
    aa70:	14c80020 	cmpeqi	r19,r2,8192
    aa74:	10c03726 	beq	r2,r3,ab54 <__smakebuf_r+0x130>
    aa78:	80c0030b 	ldhu	r3,12(r16)
    aa7c:	18c20014 	ori	r3,r3,2048
    aa80:	80c0030d 	sth	r3,12(r16)
    aa84:	00c80004 	movi	r3,8192
    aa88:	10c0521e 	bne	r2,r3,abd4 <__smakebuf_r+0x1b0>
    aa8c:	8140038f 	ldh	r5,14(r16)
    aa90:	8809883a 	mov	r4,r17
    aa94:	000ac9c0 	call	ac9c <_isatty_r>
    aa98:	10004c26 	beq	r2,zero,abcc <__smakebuf_r+0x1a8>
    aa9c:	8080030b 	ldhu	r2,12(r16)
    aaa0:	80c010c4 	addi	r3,r16,67
    aaa4:	80c00015 	stw	r3,0(r16)
    aaa8:	10800054 	ori	r2,r2,1
    aaac:	8080030d 	sth	r2,12(r16)
    aab0:	00800044 	movi	r2,1
    aab4:	80c00415 	stw	r3,16(r16)
    aab8:	80800515 	stw	r2,20(r16)
    aabc:	04810004 	movi	r18,1024
    aac0:	00000706 	br	aae0 <__smakebuf_r+0xbc>
    aac4:	8080030b 	ldhu	r2,12(r16)
    aac8:	10c0200c 	andi	r3,r2,128
    aacc:	18001f1e 	bne	r3,zero,ab4c <__smakebuf_r+0x128>
    aad0:	04810004 	movi	r18,1024
    aad4:	10820014 	ori	r2,r2,2048
    aad8:	8080030d 	sth	r2,12(r16)
    aadc:	0027883a 	mov	r19,zero
    aae0:	900b883a 	mov	r5,r18
    aae4:	8809883a 	mov	r4,r17
    aae8:	0008c2c0 	call	8c2c <_malloc_r>
    aaec:	10002c26 	beq	r2,zero,aba0 <__smakebuf_r+0x17c>
    aaf0:	80c0030b 	ldhu	r3,12(r16)
    aaf4:	01000074 	movhi	r4,1
    aaf8:	21209404 	addi	r4,r4,-32176
    aafc:	89000f15 	stw	r4,60(r17)
    ab00:	18c02014 	ori	r3,r3,128
    ab04:	80c0030d 	sth	r3,12(r16)
    ab08:	80800015 	stw	r2,0(r16)
    ab0c:	80800415 	stw	r2,16(r16)
    ab10:	84800515 	stw	r18,20(r16)
    ab14:	98001a1e 	bne	r19,zero,ab80 <__smakebuf_r+0x15c>
    ab18:	dfc01317 	ldw	ra,76(sp)
    ab1c:	dcc01217 	ldw	r19,72(sp)
    ab20:	dc801117 	ldw	r18,68(sp)
    ab24:	dc401017 	ldw	r17,64(sp)
    ab28:	dc000f17 	ldw	r16,60(sp)
    ab2c:	dec01404 	addi	sp,sp,80
    ab30:	f800283a 	ret
    ab34:	288010c4 	addi	r2,r5,67
    ab38:	28800015 	stw	r2,0(r5)
    ab3c:	28800415 	stw	r2,16(r5)
    ab40:	00800044 	movi	r2,1
    ab44:	28800515 	stw	r2,20(r5)
    ab48:	f800283a 	ret
    ab4c:	04801004 	movi	r18,64
    ab50:	003fe006 	br	aad4 <__smakebuf_r+0xb0>
    ab54:	81000a17 	ldw	r4,40(r16)
    ab58:	00c00074 	movhi	r3,1
    ab5c:	18e7de04 	addi	r3,r3,-24712
    ab60:	20ffc51e 	bne	r4,r3,aa78 <__smakebuf_r+0x54>
    ab64:	8080030b 	ldhu	r2,12(r16)
    ab68:	04810004 	movi	r18,1024
    ab6c:	84801315 	stw	r18,76(r16)
    ab70:	1484b03a 	or	r2,r2,r18
    ab74:	8080030d 	sth	r2,12(r16)
    ab78:	0027883a 	mov	r19,zero
    ab7c:	003fd806 	br	aae0 <__smakebuf_r+0xbc>
    ab80:	8140038f 	ldh	r5,14(r16)
    ab84:	8809883a 	mov	r4,r17
    ab88:	000ac9c0 	call	ac9c <_isatty_r>
    ab8c:	103fe226 	beq	r2,zero,ab18 <__smakebuf_r+0xf4>
    ab90:	8080030b 	ldhu	r2,12(r16)
    ab94:	10800054 	ori	r2,r2,1
    ab98:	8080030d 	sth	r2,12(r16)
    ab9c:	003fde06 	br	ab18 <__smakebuf_r+0xf4>
    aba0:	8080030b 	ldhu	r2,12(r16)
    aba4:	10c0800c 	andi	r3,r2,512
    aba8:	183fdb1e 	bne	r3,zero,ab18 <__smakebuf_r+0xf4>
    abac:	10800094 	ori	r2,r2,2
    abb0:	80c010c4 	addi	r3,r16,67
    abb4:	8080030d 	sth	r2,12(r16)
    abb8:	00800044 	movi	r2,1
    abbc:	80c00015 	stw	r3,0(r16)
    abc0:	80c00415 	stw	r3,16(r16)
    abc4:	80800515 	stw	r2,20(r16)
    abc8:	003fd306 	br	ab18 <__smakebuf_r+0xf4>
    abcc:	04810004 	movi	r18,1024
    abd0:	003fc306 	br	aae0 <__smakebuf_r+0xbc>
    abd4:	0027883a 	mov	r19,zero
    abd8:	04810004 	movi	r18,1024
    abdc:	003fc006 	br	aae0 <__smakebuf_r+0xbc>

0000abe0 <_read_r>:
    abe0:	defffd04 	addi	sp,sp,-12
    abe4:	2805883a 	mov	r2,r5
    abe8:	dc000015 	stw	r16,0(sp)
    abec:	04000074 	movhi	r16,1
    abf0:	dc400115 	stw	r17,4(sp)
    abf4:	300b883a 	mov	r5,r6
    abf8:	84374d04 	addi	r16,r16,-8908
    abfc:	2023883a 	mov	r17,r4
    ac00:	380d883a 	mov	r6,r7
    ac04:	1009883a 	mov	r4,r2
    ac08:	dfc00215 	stw	ra,8(sp)
    ac0c:	80000015 	stw	zero,0(r16)
    ac10:	000b4a40 	call	b4a4 <read>
    ac14:	00ffffc4 	movi	r3,-1
    ac18:	10c00526 	beq	r2,r3,ac30 <_read_r+0x50>
    ac1c:	dfc00217 	ldw	ra,8(sp)
    ac20:	dc400117 	ldw	r17,4(sp)
    ac24:	dc000017 	ldw	r16,0(sp)
    ac28:	dec00304 	addi	sp,sp,12
    ac2c:	f800283a 	ret
    ac30:	80c00017 	ldw	r3,0(r16)
    ac34:	183ff926 	beq	r3,zero,ac1c <_read_r+0x3c>
    ac38:	88c00015 	stw	r3,0(r17)
    ac3c:	003ff706 	br	ac1c <_read_r+0x3c>

0000ac40 <_fstat_r>:
    ac40:	defffd04 	addi	sp,sp,-12
    ac44:	2805883a 	mov	r2,r5
    ac48:	dc000015 	stw	r16,0(sp)
    ac4c:	04000074 	movhi	r16,1
    ac50:	dc400115 	stw	r17,4(sp)
    ac54:	84374d04 	addi	r16,r16,-8908
    ac58:	2023883a 	mov	r17,r4
    ac5c:	300b883a 	mov	r5,r6
    ac60:	1009883a 	mov	r4,r2
    ac64:	dfc00215 	stw	ra,8(sp)
    ac68:	80000015 	stw	zero,0(r16)
    ac6c:	000b0180 	call	b018 <fstat>
    ac70:	00ffffc4 	movi	r3,-1
    ac74:	10c00526 	beq	r2,r3,ac8c <_fstat_r+0x4c>
    ac78:	dfc00217 	ldw	ra,8(sp)
    ac7c:	dc400117 	ldw	r17,4(sp)
    ac80:	dc000017 	ldw	r16,0(sp)
    ac84:	dec00304 	addi	sp,sp,12
    ac88:	f800283a 	ret
    ac8c:	80c00017 	ldw	r3,0(r16)
    ac90:	183ff926 	beq	r3,zero,ac78 <_fstat_r+0x38>
    ac94:	88c00015 	stw	r3,0(r17)
    ac98:	003ff706 	br	ac78 <_fstat_r+0x38>

0000ac9c <_isatty_r>:
    ac9c:	defffd04 	addi	sp,sp,-12
    aca0:	dc000015 	stw	r16,0(sp)
    aca4:	04000074 	movhi	r16,1
    aca8:	dc400115 	stw	r17,4(sp)
    acac:	84374d04 	addi	r16,r16,-8908
    acb0:	2023883a 	mov	r17,r4
    acb4:	2809883a 	mov	r4,r5
    acb8:	dfc00215 	stw	ra,8(sp)
    acbc:	80000015 	stw	zero,0(r16)
    acc0:	000b1040 	call	b104 <isatty>
    acc4:	00ffffc4 	movi	r3,-1
    acc8:	10c00526 	beq	r2,r3,ace0 <_isatty_r+0x44>
    accc:	dfc00217 	ldw	ra,8(sp)
    acd0:	dc400117 	ldw	r17,4(sp)
    acd4:	dc000017 	ldw	r16,0(sp)
    acd8:	dec00304 	addi	sp,sp,12
    acdc:	f800283a 	ret
    ace0:	80c00017 	ldw	r3,0(r16)
    ace4:	183ff926 	beq	r3,zero,accc <_isatty_r+0x30>
    ace8:	88c00015 	stw	r3,0(r17)
    acec:	003ff706 	br	accc <_isatty_r+0x30>

0000acf0 <__divsi3>:
    acf0:	20001b16 	blt	r4,zero,ad60 <__divsi3+0x70>
    acf4:	000f883a 	mov	r7,zero
    acf8:	28001616 	blt	r5,zero,ad54 <__divsi3+0x64>
    acfc:	200d883a 	mov	r6,r4
    ad00:	29001a2e 	bgeu	r5,r4,ad6c <__divsi3+0x7c>
    ad04:	00800804 	movi	r2,32
    ad08:	00c00044 	movi	r3,1
    ad0c:	00000106 	br	ad14 <__divsi3+0x24>
    ad10:	10000d26 	beq	r2,zero,ad48 <__divsi3+0x58>
    ad14:	294b883a 	add	r5,r5,r5
    ad18:	10bfffc4 	addi	r2,r2,-1
    ad1c:	18c7883a 	add	r3,r3,r3
    ad20:	293ffb36 	bltu	r5,r4,ad10 <__divsi3+0x20>
    ad24:	0005883a 	mov	r2,zero
    ad28:	18000726 	beq	r3,zero,ad48 <__divsi3+0x58>
    ad2c:	0005883a 	mov	r2,zero
    ad30:	31400236 	bltu	r6,r5,ad3c <__divsi3+0x4c>
    ad34:	314dc83a 	sub	r6,r6,r5
    ad38:	10c4b03a 	or	r2,r2,r3
    ad3c:	1806d07a 	srli	r3,r3,1
    ad40:	280ad07a 	srli	r5,r5,1
    ad44:	183ffa1e 	bne	r3,zero,ad30 <__divsi3+0x40>
    ad48:	38000126 	beq	r7,zero,ad50 <__divsi3+0x60>
    ad4c:	0085c83a 	sub	r2,zero,r2
    ad50:	f800283a 	ret
    ad54:	014bc83a 	sub	r5,zero,r5
    ad58:	39c0005c 	xori	r7,r7,1
    ad5c:	003fe706 	br	acfc <__divsi3+0xc>
    ad60:	0109c83a 	sub	r4,zero,r4
    ad64:	01c00044 	movi	r7,1
    ad68:	003fe306 	br	acf8 <__divsi3+0x8>
    ad6c:	00c00044 	movi	r3,1
    ad70:	003fee06 	br	ad2c <__divsi3+0x3c>

0000ad74 <__modsi3>:
    ad74:	20001716 	blt	r4,zero,add4 <__modsi3+0x60>
    ad78:	000f883a 	mov	r7,zero
    ad7c:	2005883a 	mov	r2,r4
    ad80:	28001216 	blt	r5,zero,adcc <__modsi3+0x58>
    ad84:	2900162e 	bgeu	r5,r4,ade0 <__modsi3+0x6c>
    ad88:	01800804 	movi	r6,32
    ad8c:	00c00044 	movi	r3,1
    ad90:	00000106 	br	ad98 <__modsi3+0x24>
    ad94:	30000a26 	beq	r6,zero,adc0 <__modsi3+0x4c>
    ad98:	294b883a 	add	r5,r5,r5
    ad9c:	31bfffc4 	addi	r6,r6,-1
    ada0:	18c7883a 	add	r3,r3,r3
    ada4:	293ffb36 	bltu	r5,r4,ad94 <__modsi3+0x20>
    ada8:	18000526 	beq	r3,zero,adc0 <__modsi3+0x4c>
    adac:	1806d07a 	srli	r3,r3,1
    adb0:	11400136 	bltu	r2,r5,adb8 <__modsi3+0x44>
    adb4:	1145c83a 	sub	r2,r2,r5
    adb8:	280ad07a 	srli	r5,r5,1
    adbc:	183ffb1e 	bne	r3,zero,adac <__modsi3+0x38>
    adc0:	38000126 	beq	r7,zero,adc8 <__modsi3+0x54>
    adc4:	0085c83a 	sub	r2,zero,r2
    adc8:	f800283a 	ret
    adcc:	014bc83a 	sub	r5,zero,r5
    add0:	003fec06 	br	ad84 <__modsi3+0x10>
    add4:	0109c83a 	sub	r4,zero,r4
    add8:	01c00044 	movi	r7,1
    addc:	003fe706 	br	ad7c <__modsi3+0x8>
    ade0:	00c00044 	movi	r3,1
    ade4:	003ff106 	br	adac <__modsi3+0x38>

0000ade8 <__udivsi3>:
    ade8:	200d883a 	mov	r6,r4
    adec:	2900152e 	bgeu	r5,r4,ae44 <__udivsi3+0x5c>
    adf0:	28001416 	blt	r5,zero,ae44 <__udivsi3+0x5c>
    adf4:	00800804 	movi	r2,32
    adf8:	00c00044 	movi	r3,1
    adfc:	00000206 	br	ae08 <__udivsi3+0x20>
    ae00:	10000e26 	beq	r2,zero,ae3c <__udivsi3+0x54>
    ae04:	28000516 	blt	r5,zero,ae1c <__udivsi3+0x34>
    ae08:	294b883a 	add	r5,r5,r5
    ae0c:	10bfffc4 	addi	r2,r2,-1
    ae10:	18c7883a 	add	r3,r3,r3
    ae14:	293ffa36 	bltu	r5,r4,ae00 <__udivsi3+0x18>
    ae18:	18000826 	beq	r3,zero,ae3c <__udivsi3+0x54>
    ae1c:	0005883a 	mov	r2,zero
    ae20:	31400236 	bltu	r6,r5,ae2c <__udivsi3+0x44>
    ae24:	314dc83a 	sub	r6,r6,r5
    ae28:	10c4b03a 	or	r2,r2,r3
    ae2c:	1806d07a 	srli	r3,r3,1
    ae30:	280ad07a 	srli	r5,r5,1
    ae34:	183ffa1e 	bne	r3,zero,ae20 <__udivsi3+0x38>
    ae38:	f800283a 	ret
    ae3c:	0005883a 	mov	r2,zero
    ae40:	f800283a 	ret
    ae44:	00c00044 	movi	r3,1
    ae48:	003ff406 	br	ae1c <__udivsi3+0x34>

0000ae4c <__umodsi3>:
    ae4c:	2005883a 	mov	r2,r4
    ae50:	2900122e 	bgeu	r5,r4,ae9c <__umodsi3+0x50>
    ae54:	28001116 	blt	r5,zero,ae9c <__umodsi3+0x50>
    ae58:	01800804 	movi	r6,32
    ae5c:	00c00044 	movi	r3,1
    ae60:	00000206 	br	ae6c <__umodsi3+0x20>
    ae64:	30000c26 	beq	r6,zero,ae98 <__umodsi3+0x4c>
    ae68:	28000516 	blt	r5,zero,ae80 <__umodsi3+0x34>
    ae6c:	294b883a 	add	r5,r5,r5
    ae70:	31bfffc4 	addi	r6,r6,-1
    ae74:	18c7883a 	add	r3,r3,r3
    ae78:	293ffa36 	bltu	r5,r4,ae64 <__umodsi3+0x18>
    ae7c:	18000626 	beq	r3,zero,ae98 <__umodsi3+0x4c>
    ae80:	1806d07a 	srli	r3,r3,1
    ae84:	11400136 	bltu	r2,r5,ae8c <__umodsi3+0x40>
    ae88:	1145c83a 	sub	r2,r2,r5
    ae8c:	280ad07a 	srli	r5,r5,1
    ae90:	183ffb1e 	bne	r3,zero,ae80 <__umodsi3+0x34>
    ae94:	f800283a 	ret
    ae98:	f800283a 	ret
    ae9c:	00c00044 	movi	r3,1
    aea0:	003ff706 	br	ae80 <__umodsi3+0x34>

0000aea4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aea4:	defffe04 	addi	sp,sp,-8
    aea8:	dfc00115 	stw	ra,4(sp)
    aeac:	df000015 	stw	fp,0(sp)
    aeb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    aeb4:	d0a00917 	ldw	r2,-32732(gp)
    aeb8:	10000326 	beq	r2,zero,aec8 <alt_get_errno+0x24>
    aebc:	d0a00917 	ldw	r2,-32732(gp)
    aec0:	103ee83a 	callr	r2
    aec4:	00000106 	br	aecc <alt_get_errno+0x28>
    aec8:	d0a29904 	addi	r2,gp,-30108
}
    aecc:	e037883a 	mov	sp,fp
    aed0:	dfc00117 	ldw	ra,4(sp)
    aed4:	df000017 	ldw	fp,0(sp)
    aed8:	dec00204 	addi	sp,sp,8
    aedc:	f800283a 	ret

0000aee0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    aee0:	defffb04 	addi	sp,sp,-20
    aee4:	dfc00415 	stw	ra,16(sp)
    aee8:	df000315 	stw	fp,12(sp)
    aeec:	df000304 	addi	fp,sp,12
    aef0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    aef4:	e0bfff17 	ldw	r2,-4(fp)
    aef8:	10000616 	blt	r2,zero,af14 <close+0x34>
    aefc:	e0bfff17 	ldw	r2,-4(fp)
    af00:	10c00324 	muli	r3,r2,12
    af04:	00800074 	movhi	r2,1
    af08:	10b44904 	addi	r2,r2,-11996
    af0c:	1885883a 	add	r2,r3,r2
    af10:	00000106 	br	af18 <close+0x38>
    af14:	0005883a 	mov	r2,zero
    af18:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    af1c:	e0bffd17 	ldw	r2,-12(fp)
    af20:	10001926 	beq	r2,zero,af88 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    af24:	e0bffd17 	ldw	r2,-12(fp)
    af28:	10800017 	ldw	r2,0(r2)
    af2c:	10800417 	ldw	r2,16(r2)
    af30:	10000626 	beq	r2,zero,af4c <close+0x6c>
    af34:	e0bffd17 	ldw	r2,-12(fp)
    af38:	10800017 	ldw	r2,0(r2)
    af3c:	10800417 	ldw	r2,16(r2)
    af40:	e13ffd17 	ldw	r4,-12(fp)
    af44:	103ee83a 	callr	r2
    af48:	00000106 	br	af50 <close+0x70>
    af4c:	0005883a 	mov	r2,zero
    af50:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    af54:	e13fff17 	ldw	r4,-4(fp)
    af58:	000b5a00 	call	b5a0 <alt_release_fd>
    if (rval < 0)
    af5c:	e0bffe17 	ldw	r2,-8(fp)
    af60:	1000070e 	bge	r2,zero,af80 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    af64:	000aea40 	call	aea4 <alt_get_errno>
    af68:	1007883a 	mov	r3,r2
    af6c:	e0bffe17 	ldw	r2,-8(fp)
    af70:	0085c83a 	sub	r2,zero,r2
    af74:	18800015 	stw	r2,0(r3)
      return -1;
    af78:	00bfffc4 	movi	r2,-1
    af7c:	00000706 	br	af9c <close+0xbc>
    }
    return 0;
    af80:	0005883a 	mov	r2,zero
    af84:	00000506 	br	af9c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    af88:	000aea40 	call	aea4 <alt_get_errno>
    af8c:	1007883a 	mov	r3,r2
    af90:	00801444 	movi	r2,81
    af94:	18800015 	stw	r2,0(r3)
    return -1;
    af98:	00bfffc4 	movi	r2,-1
  }
}
    af9c:	e037883a 	mov	sp,fp
    afa0:	dfc00117 	ldw	ra,4(sp)
    afa4:	df000017 	ldw	fp,0(sp)
    afa8:	dec00204 	addi	sp,sp,8
    afac:	f800283a 	ret

0000afb0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    afb0:	defffc04 	addi	sp,sp,-16
    afb4:	df000315 	stw	fp,12(sp)
    afb8:	df000304 	addi	fp,sp,12
    afbc:	e13ffd15 	stw	r4,-12(fp)
    afc0:	e17ffe15 	stw	r5,-8(fp)
    afc4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    afc8:	e0bfff17 	ldw	r2,-4(fp)
}
    afcc:	e037883a 	mov	sp,fp
    afd0:	df000017 	ldw	fp,0(sp)
    afd4:	dec00104 	addi	sp,sp,4
    afd8:	f800283a 	ret

0000afdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    afdc:	defffe04 	addi	sp,sp,-8
    afe0:	dfc00115 	stw	ra,4(sp)
    afe4:	df000015 	stw	fp,0(sp)
    afe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    afec:	d0a00917 	ldw	r2,-32732(gp)
    aff0:	10000326 	beq	r2,zero,b000 <alt_get_errno+0x24>
    aff4:	d0a00917 	ldw	r2,-32732(gp)
    aff8:	103ee83a 	callr	r2
    affc:	00000106 	br	b004 <alt_get_errno+0x28>
    b000:	d0a29904 	addi	r2,gp,-30108
}
    b004:	e037883a 	mov	sp,fp
    b008:	dfc00117 	ldw	ra,4(sp)
    b00c:	df000017 	ldw	fp,0(sp)
    b010:	dec00204 	addi	sp,sp,8
    b014:	f800283a 	ret

0000b018 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b018:	defffb04 	addi	sp,sp,-20
    b01c:	dfc00415 	stw	ra,16(sp)
    b020:	df000315 	stw	fp,12(sp)
    b024:	df000304 	addi	fp,sp,12
    b028:	e13ffe15 	stw	r4,-8(fp)
    b02c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b030:	e0bffe17 	ldw	r2,-8(fp)
    b034:	10000616 	blt	r2,zero,b050 <fstat+0x38>
    b038:	e0bffe17 	ldw	r2,-8(fp)
    b03c:	10c00324 	muli	r3,r2,12
    b040:	00800074 	movhi	r2,1
    b044:	10b44904 	addi	r2,r2,-11996
    b048:	1885883a 	add	r2,r3,r2
    b04c:	00000106 	br	b054 <fstat+0x3c>
    b050:	0005883a 	mov	r2,zero
    b054:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    b058:	e0bffd17 	ldw	r2,-12(fp)
    b05c:	10001026 	beq	r2,zero,b0a0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b060:	e0bffd17 	ldw	r2,-12(fp)
    b064:	10800017 	ldw	r2,0(r2)
    b068:	10800817 	ldw	r2,32(r2)
    b06c:	10000726 	beq	r2,zero,b08c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    b070:	e0bffd17 	ldw	r2,-12(fp)
    b074:	10800017 	ldw	r2,0(r2)
    b078:	10800817 	ldw	r2,32(r2)
    b07c:	e17fff17 	ldw	r5,-4(fp)
    b080:	e13ffd17 	ldw	r4,-12(fp)
    b084:	103ee83a 	callr	r2
    b088:	00000a06 	br	b0b4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b08c:	e0bfff17 	ldw	r2,-4(fp)
    b090:	00c80004 	movi	r3,8192
    b094:	10c00115 	stw	r3,4(r2)
      return 0;
    b098:	0005883a 	mov	r2,zero
    b09c:	00000506 	br	b0b4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b0a0:	000afdc0 	call	afdc <alt_get_errno>
    b0a4:	1007883a 	mov	r3,r2
    b0a8:	00801444 	movi	r2,81
    b0ac:	18800015 	stw	r2,0(r3)
    return -1;
    b0b0:	00bfffc4 	movi	r2,-1
  }
}
    b0b4:	e037883a 	mov	sp,fp
    b0b8:	dfc00117 	ldw	ra,4(sp)
    b0bc:	df000017 	ldw	fp,0(sp)
    b0c0:	dec00204 	addi	sp,sp,8
    b0c4:	f800283a 	ret

0000b0c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b0c8:	defffe04 	addi	sp,sp,-8
    b0cc:	dfc00115 	stw	ra,4(sp)
    b0d0:	df000015 	stw	fp,0(sp)
    b0d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b0d8:	d0a00917 	ldw	r2,-32732(gp)
    b0dc:	10000326 	beq	r2,zero,b0ec <alt_get_errno+0x24>
    b0e0:	d0a00917 	ldw	r2,-32732(gp)
    b0e4:	103ee83a 	callr	r2
    b0e8:	00000106 	br	b0f0 <alt_get_errno+0x28>
    b0ec:	d0a29904 	addi	r2,gp,-30108
}
    b0f0:	e037883a 	mov	sp,fp
    b0f4:	dfc00117 	ldw	ra,4(sp)
    b0f8:	df000017 	ldw	fp,0(sp)
    b0fc:	dec00204 	addi	sp,sp,8
    b100:	f800283a 	ret

0000b104 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b104:	deffed04 	addi	sp,sp,-76
    b108:	dfc01215 	stw	ra,72(sp)
    b10c:	df001115 	stw	fp,68(sp)
    b110:	df001104 	addi	fp,sp,68
    b114:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b118:	e0bfff17 	ldw	r2,-4(fp)
    b11c:	10000616 	blt	r2,zero,b138 <isatty+0x34>
    b120:	e0bfff17 	ldw	r2,-4(fp)
    b124:	10c00324 	muli	r3,r2,12
    b128:	00800074 	movhi	r2,1
    b12c:	10b44904 	addi	r2,r2,-11996
    b130:	1885883a 	add	r2,r3,r2
    b134:	00000106 	br	b13c <isatty+0x38>
    b138:	0005883a 	mov	r2,zero
    b13c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    b140:	e0bfef17 	ldw	r2,-68(fp)
    b144:	10000e26 	beq	r2,zero,b180 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b148:	e0bfef17 	ldw	r2,-68(fp)
    b14c:	10800017 	ldw	r2,0(r2)
    b150:	10800817 	ldw	r2,32(r2)
    b154:	1000021e 	bne	r2,zero,b160 <isatty+0x5c>
    {
      return 1;
    b158:	00800044 	movi	r2,1
    b15c:	00000d06 	br	b194 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b160:	e0bff004 	addi	r2,fp,-64
    b164:	100b883a 	mov	r5,r2
    b168:	e13fff17 	ldw	r4,-4(fp)
    b16c:	000b0180 	call	b018 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b170:	e0bff117 	ldw	r2,-60(fp)
    b174:	10880020 	cmpeqi	r2,r2,8192
    b178:	10803fcc 	andi	r2,r2,255
    b17c:	00000506 	br	b194 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b180:	000b0c80 	call	b0c8 <alt_get_errno>
    b184:	1007883a 	mov	r3,r2
    b188:	00801444 	movi	r2,81
    b18c:	18800015 	stw	r2,0(r3)
    return 0;
    b190:	0005883a 	mov	r2,zero
  }
}
    b194:	e037883a 	mov	sp,fp
    b198:	dfc00117 	ldw	ra,4(sp)
    b19c:	df000017 	ldw	fp,0(sp)
    b1a0:	dec00204 	addi	sp,sp,8
    b1a4:	f800283a 	ret

0000b1a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b1a8:	defffc04 	addi	sp,sp,-16
    b1ac:	df000315 	stw	fp,12(sp)
    b1b0:	df000304 	addi	fp,sp,12
    b1b4:	e13ffd15 	stw	r4,-12(fp)
    b1b8:	e17ffe15 	stw	r5,-8(fp)
    b1bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b1c0:	e0fffe17 	ldw	r3,-8(fp)
    b1c4:	e0bffd17 	ldw	r2,-12(fp)
    b1c8:	18800c26 	beq	r3,r2,b1fc <alt_load_section+0x54>
  {
    while( to != end )
    b1cc:	00000806 	br	b1f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    b1d0:	e0bffe17 	ldw	r2,-8(fp)
    b1d4:	10c00104 	addi	r3,r2,4
    b1d8:	e0fffe15 	stw	r3,-8(fp)
    b1dc:	e0fffd17 	ldw	r3,-12(fp)
    b1e0:	19000104 	addi	r4,r3,4
    b1e4:	e13ffd15 	stw	r4,-12(fp)
    b1e8:	18c00017 	ldw	r3,0(r3)
    b1ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b1f0:	e0fffe17 	ldw	r3,-8(fp)
    b1f4:	e0bfff17 	ldw	r2,-4(fp)
    b1f8:	18bff51e 	bne	r3,r2,b1d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b1fc:	0001883a 	nop
    b200:	e037883a 	mov	sp,fp
    b204:	df000017 	ldw	fp,0(sp)
    b208:	dec00104 	addi	sp,sp,4
    b20c:	f800283a 	ret

0000b210 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b210:	defffe04 	addi	sp,sp,-8
    b214:	dfc00115 	stw	ra,4(sp)
    b218:	df000015 	stw	fp,0(sp)
    b21c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b220:	01800074 	movhi	r6,1
    b224:	31b4bf04 	addi	r6,r6,-11524
    b228:	01400074 	movhi	r5,1
    b22c:	29723404 	addi	r5,r5,-14128
    b230:	01000074 	movhi	r4,1
    b234:	2134bf04 	addi	r4,r4,-11524
    b238:	000b1a80 	call	b1a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b23c:	01800074 	movhi	r6,1
    b240:	31a00804 	addi	r6,r6,-32736
    b244:	01400074 	movhi	r5,1
    b248:	29600804 	addi	r5,r5,-32736
    b24c:	01000074 	movhi	r4,1
    b250:	21200804 	addi	r4,r4,-32736
    b254:	000b1a80 	call	b1a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b258:	01800074 	movhi	r6,1
    b25c:	31b23404 	addi	r6,r6,-14128
    b260:	01400074 	movhi	r5,1
    b264:	29722104 	addi	r5,r5,-14204
    b268:	01000074 	movhi	r4,1
    b26c:	21322104 	addi	r4,r4,-14204
    b270:	000b1a80 	call	b1a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b274:	000bc500 	call	bc50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b278:	000be380 	call	be38 <alt_icache_flush_all>
}
    b27c:	0001883a 	nop
    b280:	e037883a 	mov	sp,fp
    b284:	dfc00117 	ldw	ra,4(sp)
    b288:	df000017 	ldw	fp,0(sp)
    b28c:	dec00204 	addi	sp,sp,8
    b290:	f800283a 	ret

0000b294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b294:	defffe04 	addi	sp,sp,-8
    b298:	dfc00115 	stw	ra,4(sp)
    b29c:	df000015 	stw	fp,0(sp)
    b2a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b2a4:	d0a00917 	ldw	r2,-32732(gp)
    b2a8:	10000326 	beq	r2,zero,b2b8 <alt_get_errno+0x24>
    b2ac:	d0a00917 	ldw	r2,-32732(gp)
    b2b0:	103ee83a 	callr	r2
    b2b4:	00000106 	br	b2bc <alt_get_errno+0x28>
    b2b8:	d0a29904 	addi	r2,gp,-30108
}
    b2bc:	e037883a 	mov	sp,fp
    b2c0:	dfc00117 	ldw	ra,4(sp)
    b2c4:	df000017 	ldw	fp,0(sp)
    b2c8:	dec00204 	addi	sp,sp,8
    b2cc:	f800283a 	ret

0000b2d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b2d0:	defff904 	addi	sp,sp,-28
    b2d4:	dfc00615 	stw	ra,24(sp)
    b2d8:	df000515 	stw	fp,20(sp)
    b2dc:	df000504 	addi	fp,sp,20
    b2e0:	e13ffd15 	stw	r4,-12(fp)
    b2e4:	e17ffe15 	stw	r5,-8(fp)
    b2e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b2ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b2f0:	e0bffd17 	ldw	r2,-12(fp)
    b2f4:	10000616 	blt	r2,zero,b310 <lseek+0x40>
    b2f8:	e0bffd17 	ldw	r2,-12(fp)
    b2fc:	10c00324 	muli	r3,r2,12
    b300:	00800074 	movhi	r2,1
    b304:	10b44904 	addi	r2,r2,-11996
    b308:	1885883a 	add	r2,r3,r2
    b30c:	00000106 	br	b314 <lseek+0x44>
    b310:	0005883a 	mov	r2,zero
    b314:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    b318:	e0bffc17 	ldw	r2,-16(fp)
    b31c:	10001026 	beq	r2,zero,b360 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b320:	e0bffc17 	ldw	r2,-16(fp)
    b324:	10800017 	ldw	r2,0(r2)
    b328:	10800717 	ldw	r2,28(r2)
    b32c:	10000926 	beq	r2,zero,b354 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b330:	e0bffc17 	ldw	r2,-16(fp)
    b334:	10800017 	ldw	r2,0(r2)
    b338:	10800717 	ldw	r2,28(r2)
    b33c:	e1bfff17 	ldw	r6,-4(fp)
    b340:	e17ffe17 	ldw	r5,-8(fp)
    b344:	e13ffc17 	ldw	r4,-16(fp)
    b348:	103ee83a 	callr	r2
    b34c:	e0bffb15 	stw	r2,-20(fp)
    b350:	00000506 	br	b368 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b354:	00bfde84 	movi	r2,-134
    b358:	e0bffb15 	stw	r2,-20(fp)
    b35c:	00000206 	br	b368 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    b360:	00bfebc4 	movi	r2,-81
    b364:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    b368:	e0bffb17 	ldw	r2,-20(fp)
    b36c:	1000070e 	bge	r2,zero,b38c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    b370:	000b2940 	call	b294 <alt_get_errno>
    b374:	1007883a 	mov	r3,r2
    b378:	e0bffb17 	ldw	r2,-20(fp)
    b37c:	0085c83a 	sub	r2,zero,r2
    b380:	18800015 	stw	r2,0(r3)
    rc = -1;
    b384:	00bfffc4 	movi	r2,-1
    b388:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    b38c:	e0bffb17 	ldw	r2,-20(fp)
}
    b390:	e037883a 	mov	sp,fp
    b394:	dfc00117 	ldw	ra,4(sp)
    b398:	df000017 	ldw	fp,0(sp)
    b39c:	dec00204 	addi	sp,sp,8
    b3a0:	f800283a 	ret

0000b3a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b3a4:	defffd04 	addi	sp,sp,-12
    b3a8:	dfc00215 	stw	ra,8(sp)
    b3ac:	df000115 	stw	fp,4(sp)
    b3b0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b3b4:	0009883a 	mov	r4,zero
    b3b8:	000b84c0 	call	b84c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b3bc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b3c0:	000b8840 	call	b884 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b3c4:	01800074 	movhi	r6,1
    b3c8:	31b22a04 	addi	r6,r6,-14168
    b3cc:	01400074 	movhi	r5,1
    b3d0:	29722a04 	addi	r5,r5,-14168
    b3d4:	01000074 	movhi	r4,1
    b3d8:	21322a04 	addi	r4,r4,-14168
    b3dc:	000bf300 	call	bf30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b3e0:	000bd780 	call	bd78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b3e4:	01000074 	movhi	r4,1
    b3e8:	212f7604 	addi	r4,r4,-16936
    b3ec:	000c4f00 	call	c4f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b3f0:	d0a29a17 	ldw	r2,-30104(gp)
    b3f4:	d0e29b17 	ldw	r3,-30100(gp)
    b3f8:	d1229c17 	ldw	r4,-30096(gp)
    b3fc:	200d883a 	mov	r6,r4
    b400:	180b883a 	mov	r5,r3
    b404:	1009883a 	mov	r4,r2
    b408:	000806c0 	call	806c <main>
    b40c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b410:	01000044 	movi	r4,1
    b414:	000aee00 	call	aee0 <close>
  exit (result);
    b418:	e13fff17 	ldw	r4,-4(fp)
    b41c:	000c5040 	call	c504 <exit>

0000b420 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b420:	defffe04 	addi	sp,sp,-8
    b424:	df000115 	stw	fp,4(sp)
    b428:	df000104 	addi	fp,sp,4
    b42c:	e13fff15 	stw	r4,-4(fp)
}
    b430:	0001883a 	nop
    b434:	e037883a 	mov	sp,fp
    b438:	df000017 	ldw	fp,0(sp)
    b43c:	dec00104 	addi	sp,sp,4
    b440:	f800283a 	ret

0000b444 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b444:	defffe04 	addi	sp,sp,-8
    b448:	df000115 	stw	fp,4(sp)
    b44c:	df000104 	addi	fp,sp,4
    b450:	e13fff15 	stw	r4,-4(fp)
}
    b454:	0001883a 	nop
    b458:	e037883a 	mov	sp,fp
    b45c:	df000017 	ldw	fp,0(sp)
    b460:	dec00104 	addi	sp,sp,4
    b464:	f800283a 	ret

0000b468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b468:	defffe04 	addi	sp,sp,-8
    b46c:	dfc00115 	stw	ra,4(sp)
    b470:	df000015 	stw	fp,0(sp)
    b474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b478:	d0a00917 	ldw	r2,-32732(gp)
    b47c:	10000326 	beq	r2,zero,b48c <alt_get_errno+0x24>
    b480:	d0a00917 	ldw	r2,-32732(gp)
    b484:	103ee83a 	callr	r2
    b488:	00000106 	br	b490 <alt_get_errno+0x28>
    b48c:	d0a29904 	addi	r2,gp,-30108
}
    b490:	e037883a 	mov	sp,fp
    b494:	dfc00117 	ldw	ra,4(sp)
    b498:	df000017 	ldw	fp,0(sp)
    b49c:	dec00204 	addi	sp,sp,8
    b4a0:	f800283a 	ret

0000b4a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b4a4:	defff904 	addi	sp,sp,-28
    b4a8:	dfc00615 	stw	ra,24(sp)
    b4ac:	df000515 	stw	fp,20(sp)
    b4b0:	df000504 	addi	fp,sp,20
    b4b4:	e13ffd15 	stw	r4,-12(fp)
    b4b8:	e17ffe15 	stw	r5,-8(fp)
    b4bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b4c0:	e0bffd17 	ldw	r2,-12(fp)
    b4c4:	10000616 	blt	r2,zero,b4e0 <read+0x3c>
    b4c8:	e0bffd17 	ldw	r2,-12(fp)
    b4cc:	10c00324 	muli	r3,r2,12
    b4d0:	00800074 	movhi	r2,1
    b4d4:	10b44904 	addi	r2,r2,-11996
    b4d8:	1885883a 	add	r2,r3,r2
    b4dc:	00000106 	br	b4e4 <read+0x40>
    b4e0:	0005883a 	mov	r2,zero
    b4e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b4e8:	e0bffb17 	ldw	r2,-20(fp)
    b4ec:	10002226 	beq	r2,zero,b578 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b4f0:	e0bffb17 	ldw	r2,-20(fp)
    b4f4:	10800217 	ldw	r2,8(r2)
    b4f8:	108000cc 	andi	r2,r2,3
    b4fc:	10800060 	cmpeqi	r2,r2,1
    b500:	1000181e 	bne	r2,zero,b564 <read+0xc0>
        (fd->dev->read))
    b504:	e0bffb17 	ldw	r2,-20(fp)
    b508:	10800017 	ldw	r2,0(r2)
    b50c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b510:	10001426 	beq	r2,zero,b564 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b514:	e0bffb17 	ldw	r2,-20(fp)
    b518:	10800017 	ldw	r2,0(r2)
    b51c:	10800517 	ldw	r2,20(r2)
    b520:	e0ffff17 	ldw	r3,-4(fp)
    b524:	180d883a 	mov	r6,r3
    b528:	e17ffe17 	ldw	r5,-8(fp)
    b52c:	e13ffb17 	ldw	r4,-20(fp)
    b530:	103ee83a 	callr	r2
    b534:	e0bffc15 	stw	r2,-16(fp)
    b538:	e0bffc17 	ldw	r2,-16(fp)
    b53c:	1000070e 	bge	r2,zero,b55c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    b540:	000b4680 	call	b468 <alt_get_errno>
    b544:	1007883a 	mov	r3,r2
    b548:	e0bffc17 	ldw	r2,-16(fp)
    b54c:	0085c83a 	sub	r2,zero,r2
    b550:	18800015 	stw	r2,0(r3)
          return -1;
    b554:	00bfffc4 	movi	r2,-1
    b558:	00000c06 	br	b58c <read+0xe8>
        }
        return rval;
    b55c:	e0bffc17 	ldw	r2,-16(fp)
    b560:	00000a06 	br	b58c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b564:	000b4680 	call	b468 <alt_get_errno>
    b568:	1007883a 	mov	r3,r2
    b56c:	00800344 	movi	r2,13
    b570:	18800015 	stw	r2,0(r3)
    b574:	00000406 	br	b588 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b578:	000b4680 	call	b468 <alt_get_errno>
    b57c:	1007883a 	mov	r3,r2
    b580:	00801444 	movi	r2,81
    b584:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b588:	00bfffc4 	movi	r2,-1
}
    b58c:	e037883a 	mov	sp,fp
    b590:	dfc00117 	ldw	ra,4(sp)
    b594:	df000017 	ldw	fp,0(sp)
    b598:	dec00204 	addi	sp,sp,8
    b59c:	f800283a 	ret

0000b5a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b5a0:	defffe04 	addi	sp,sp,-8
    b5a4:	df000115 	stw	fp,4(sp)
    b5a8:	df000104 	addi	fp,sp,4
    b5ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b5b0:	e0bfff17 	ldw	r2,-4(fp)
    b5b4:	108000d0 	cmplti	r2,r2,3
    b5b8:	10000d1e 	bne	r2,zero,b5f0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b5bc:	00800074 	movhi	r2,1
    b5c0:	10b44904 	addi	r2,r2,-11996
    b5c4:	e0ffff17 	ldw	r3,-4(fp)
    b5c8:	18c00324 	muli	r3,r3,12
    b5cc:	10c5883a 	add	r2,r2,r3
    b5d0:	10800204 	addi	r2,r2,8
    b5d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b5d8:	00800074 	movhi	r2,1
    b5dc:	10b44904 	addi	r2,r2,-11996
    b5e0:	e0ffff17 	ldw	r3,-4(fp)
    b5e4:	18c00324 	muli	r3,r3,12
    b5e8:	10c5883a 	add	r2,r2,r3
    b5ec:	10000015 	stw	zero,0(r2)
  }
}
    b5f0:	0001883a 	nop
    b5f4:	e037883a 	mov	sp,fp
    b5f8:	df000017 	ldw	fp,0(sp)
    b5fc:	dec00104 	addi	sp,sp,4
    b600:	f800283a 	ret

0000b604 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b604:	defff904 	addi	sp,sp,-28
    b608:	df000615 	stw	fp,24(sp)
    b60c:	df000604 	addi	fp,sp,24
    b610:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b614:	0005303a 	rdctl	r2,status
    b618:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b61c:	e0fffe17 	ldw	r3,-8(fp)
    b620:	00bfff84 	movi	r2,-2
    b624:	1884703a 	and	r2,r3,r2
    b628:	1001703a 	wrctl	status,r2
  
  return context;
    b62c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b630:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b634:	d0a00a17 	ldw	r2,-32728(gp)
    b638:	10c000c4 	addi	r3,r2,3
    b63c:	00bfff04 	movi	r2,-4
    b640:	1884703a 	and	r2,r3,r2
    b644:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b648:	d0e00a17 	ldw	r3,-32728(gp)
    b64c:	e0bfff17 	ldw	r2,-4(fp)
    b650:	1887883a 	add	r3,r3,r2
    b654:	00800074 	movhi	r2,1
    b658:	10bf4004 	addi	r2,r2,-768
    b65c:	10c0062e 	bgeu	r2,r3,b678 <sbrk+0x74>
    b660:	e0bffb17 	ldw	r2,-20(fp)
    b664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b668:	e0bffa17 	ldw	r2,-24(fp)
    b66c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b670:	00bfffc4 	movi	r2,-1
    b674:	00000b06 	br	b6a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    b678:	d0a00a17 	ldw	r2,-32728(gp)
    b67c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    b680:	d0e00a17 	ldw	r3,-32728(gp)
    b684:	e0bfff17 	ldw	r2,-4(fp)
    b688:	1885883a 	add	r2,r3,r2
    b68c:	d0a00a15 	stw	r2,-32728(gp)
    b690:	e0bffb17 	ldw	r2,-20(fp)
    b694:	e0bffc15 	stw	r2,-16(fp)
    b698:	e0bffc17 	ldw	r2,-16(fp)
    b69c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b6a0:	e0bffd17 	ldw	r2,-12(fp)
} 
    b6a4:	e037883a 	mov	sp,fp
    b6a8:	df000017 	ldw	fp,0(sp)
    b6ac:	dec00104 	addi	sp,sp,4
    b6b0:	f800283a 	ret

0000b6b4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    b6b4:	defffd04 	addi	sp,sp,-12
    b6b8:	dfc00215 	stw	ra,8(sp)
    b6bc:	df000115 	stw	fp,4(sp)
    b6c0:	df000104 	addi	fp,sp,4
    b6c4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    b6c8:	e13fff17 	ldw	r4,-4(fp)
    b6cc:	000baf80 	call	baf8 <alt_busy_sleep>
}
    b6d0:	e037883a 	mov	sp,fp
    b6d4:	dfc00117 	ldw	ra,4(sp)
    b6d8:	df000017 	ldw	fp,0(sp)
    b6dc:	dec00204 	addi	sp,sp,8
    b6e0:	f800283a 	ret

0000b6e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6e4:	defffe04 	addi	sp,sp,-8
    b6e8:	dfc00115 	stw	ra,4(sp)
    b6ec:	df000015 	stw	fp,0(sp)
    b6f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b6f4:	d0a00917 	ldw	r2,-32732(gp)
    b6f8:	10000326 	beq	r2,zero,b708 <alt_get_errno+0x24>
    b6fc:	d0a00917 	ldw	r2,-32732(gp)
    b700:	103ee83a 	callr	r2
    b704:	00000106 	br	b70c <alt_get_errno+0x28>
    b708:	d0a29904 	addi	r2,gp,-30108
}
    b70c:	e037883a 	mov	sp,fp
    b710:	dfc00117 	ldw	ra,4(sp)
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00204 	addi	sp,sp,8
    b71c:	f800283a 	ret

0000b720 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b720:	defff904 	addi	sp,sp,-28
    b724:	dfc00615 	stw	ra,24(sp)
    b728:	df000515 	stw	fp,20(sp)
    b72c:	df000504 	addi	fp,sp,20
    b730:	e13ffd15 	stw	r4,-12(fp)
    b734:	e17ffe15 	stw	r5,-8(fp)
    b738:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b73c:	e0bffd17 	ldw	r2,-12(fp)
    b740:	10000616 	blt	r2,zero,b75c <write+0x3c>
    b744:	e0bffd17 	ldw	r2,-12(fp)
    b748:	10c00324 	muli	r3,r2,12
    b74c:	00800074 	movhi	r2,1
    b750:	10b44904 	addi	r2,r2,-11996
    b754:	1885883a 	add	r2,r3,r2
    b758:	00000106 	br	b760 <write+0x40>
    b75c:	0005883a 	mov	r2,zero
    b760:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b764:	e0bffb17 	ldw	r2,-20(fp)
    b768:	10002126 	beq	r2,zero,b7f0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b76c:	e0bffb17 	ldw	r2,-20(fp)
    b770:	10800217 	ldw	r2,8(r2)
    b774:	108000cc 	andi	r2,r2,3
    b778:	10001826 	beq	r2,zero,b7dc <write+0xbc>
    b77c:	e0bffb17 	ldw	r2,-20(fp)
    b780:	10800017 	ldw	r2,0(r2)
    b784:	10800617 	ldw	r2,24(r2)
    b788:	10001426 	beq	r2,zero,b7dc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b78c:	e0bffb17 	ldw	r2,-20(fp)
    b790:	10800017 	ldw	r2,0(r2)
    b794:	10800617 	ldw	r2,24(r2)
    b798:	e0ffff17 	ldw	r3,-4(fp)
    b79c:	180d883a 	mov	r6,r3
    b7a0:	e17ffe17 	ldw	r5,-8(fp)
    b7a4:	e13ffb17 	ldw	r4,-20(fp)
    b7a8:	103ee83a 	callr	r2
    b7ac:	e0bffc15 	stw	r2,-16(fp)
    b7b0:	e0bffc17 	ldw	r2,-16(fp)
    b7b4:	1000070e 	bge	r2,zero,b7d4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    b7b8:	000b6e40 	call	b6e4 <alt_get_errno>
    b7bc:	1007883a 	mov	r3,r2
    b7c0:	e0bffc17 	ldw	r2,-16(fp)
    b7c4:	0085c83a 	sub	r2,zero,r2
    b7c8:	18800015 	stw	r2,0(r3)
        return -1;
    b7cc:	00bfffc4 	movi	r2,-1
    b7d0:	00000c06 	br	b804 <write+0xe4>
      }
      return rval;
    b7d4:	e0bffc17 	ldw	r2,-16(fp)
    b7d8:	00000a06 	br	b804 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b7dc:	000b6e40 	call	b6e4 <alt_get_errno>
    b7e0:	1007883a 	mov	r3,r2
    b7e4:	00800344 	movi	r2,13
    b7e8:	18800015 	stw	r2,0(r3)
    b7ec:	00000406 	br	b800 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b7f0:	000b6e40 	call	b6e4 <alt_get_errno>
    b7f4:	1007883a 	mov	r3,r2
    b7f8:	00801444 	movi	r2,81
    b7fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b800:	00bfffc4 	movi	r2,-1
}
    b804:	e037883a 	mov	sp,fp
    b808:	dfc00117 	ldw	ra,4(sp)
    b80c:	df000017 	ldw	fp,0(sp)
    b810:	dec00204 	addi	sp,sp,8
    b814:	f800283a 	ret

0000b818 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b818:	defffd04 	addi	sp,sp,-12
    b81c:	dfc00215 	stw	ra,8(sp)
    b820:	df000115 	stw	fp,4(sp)
    b824:	df000104 	addi	fp,sp,4
    b828:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b82c:	d1600604 	addi	r5,gp,-32744
    b830:	e13fff17 	ldw	r4,-4(fp)
    b834:	000bcd40 	call	bcd4 <alt_dev_llist_insert>
}
    b838:	e037883a 	mov	sp,fp
    b83c:	dfc00117 	ldw	ra,4(sp)
    b840:	df000017 	ldw	fp,0(sp)
    b844:	dec00204 	addi	sp,sp,8
    b848:	f800283a 	ret

0000b84c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b84c:	defffd04 	addi	sp,sp,-12
    b850:	dfc00215 	stw	ra,8(sp)
    b854:	df000115 	stw	fp,4(sp)
    b858:	df000104 	addi	fp,sp,4
    b85c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b860:	000c2000 	call	c200 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b864:	00800044 	movi	r2,1
    b868:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b86c:	0001883a 	nop
    b870:	e037883a 	mov	sp,fp
    b874:	dfc00117 	ldw	ra,4(sp)
    b878:	df000017 	ldw	fp,0(sp)
    b87c:	dec00204 	addi	sp,sp,8
    b880:	f800283a 	ret

0000b884 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b884:	defffe04 	addi	sp,sp,-8
    b888:	dfc00115 	stw	ra,4(sp)
    b88c:	df000015 	stw	fp,0(sp)
    b890:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    b894:	01000074 	movhi	r4,1
    b898:	2134a904 	addi	r4,r4,-11612
    b89c:	000b8180 	call	b818 <alt_dev_reg>
}
    b8a0:	0001883a 	nop
    b8a4:	e037883a 	mov	sp,fp
    b8a8:	dfc00117 	ldw	ra,4(sp)
    b8ac:	df000017 	ldw	fp,0(sp)
    b8b0:	dec00204 	addi	sp,sp,8
    b8b4:	f800283a 	ret

0000b8b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b8b8:	defffa04 	addi	sp,sp,-24
    b8bc:	dfc00515 	stw	ra,20(sp)
    b8c0:	df000415 	stw	fp,16(sp)
    b8c4:	df000404 	addi	fp,sp,16
    b8c8:	e13ffd15 	stw	r4,-12(fp)
    b8cc:	e17ffe15 	stw	r5,-8(fp)
    b8d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b8d4:	e0bffd17 	ldw	r2,-12(fp)
    b8d8:	10800017 	ldw	r2,0(r2)
    b8dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b8e0:	e0bffc17 	ldw	r2,-16(fp)
    b8e4:	10c00a04 	addi	r3,r2,40
    b8e8:	e0bffd17 	ldw	r2,-12(fp)
    b8ec:	10800217 	ldw	r2,8(r2)
    b8f0:	100f883a 	mov	r7,r2
    b8f4:	e1bfff17 	ldw	r6,-4(fp)
    b8f8:	e17ffe17 	ldw	r5,-8(fp)
    b8fc:	1809883a 	mov	r4,r3
    b900:	000b9780 	call	b978 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b904:	e037883a 	mov	sp,fp
    b908:	dfc00117 	ldw	ra,4(sp)
    b90c:	df000017 	ldw	fp,0(sp)
    b910:	dec00204 	addi	sp,sp,8
    b914:	f800283a 	ret

0000b918 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b918:	defffa04 	addi	sp,sp,-24
    b91c:	dfc00515 	stw	ra,20(sp)
    b920:	df000415 	stw	fp,16(sp)
    b924:	df000404 	addi	fp,sp,16
    b928:	e13ffd15 	stw	r4,-12(fp)
    b92c:	e17ffe15 	stw	r5,-8(fp)
    b930:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b934:	e0bffd17 	ldw	r2,-12(fp)
    b938:	10800017 	ldw	r2,0(r2)
    b93c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b940:	e0bffc17 	ldw	r2,-16(fp)
    b944:	10c00a04 	addi	r3,r2,40
    b948:	e0bffd17 	ldw	r2,-12(fp)
    b94c:	10800217 	ldw	r2,8(r2)
    b950:	100f883a 	mov	r7,r2
    b954:	e1bfff17 	ldw	r6,-4(fp)
    b958:	e17ffe17 	ldw	r5,-8(fp)
    b95c:	1809883a 	mov	r4,r3
    b960:	000ba640 	call	ba64 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b964:	e037883a 	mov	sp,fp
    b968:	dfc00117 	ldw	ra,4(sp)
    b96c:	df000017 	ldw	fp,0(sp)
    b970:	dec00204 	addi	sp,sp,8
    b974:	f800283a 	ret

0000b978 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    b978:	defff704 	addi	sp,sp,-36
    b97c:	df000815 	stw	fp,32(sp)
    b980:	df000804 	addi	fp,sp,32
    b984:	e13ffc15 	stw	r4,-16(fp)
    b988:	e17ffd15 	stw	r5,-12(fp)
    b98c:	e1bffe15 	stw	r6,-8(fp)
    b990:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    b994:	e0bffc17 	ldw	r2,-16(fp)
    b998:	10800017 	ldw	r2,0(r2)
    b99c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    b9a0:	e0bffd17 	ldw	r2,-12(fp)
    b9a4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    b9a8:	e0bffe17 	ldw	r2,-8(fp)
    b9ac:	e0fffd17 	ldw	r3,-12(fp)
    b9b0:	1885883a 	add	r2,r3,r2
    b9b4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    b9b8:	00001206 	br	ba04 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b9bc:	e0bff917 	ldw	r2,-28(fp)
    b9c0:	10800037 	ldwio	r2,0(r2)
    b9c4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    b9c8:	e0bffb17 	ldw	r2,-20(fp)
    b9cc:	10a0000c 	andi	r2,r2,32768
    b9d0:	10000626 	beq	r2,zero,b9ec <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b9d4:	e0bff817 	ldw	r2,-32(fp)
    b9d8:	10c00044 	addi	r3,r2,1
    b9dc:	e0fff815 	stw	r3,-32(fp)
    b9e0:	e0fffb17 	ldw	r3,-20(fp)
    b9e4:	10c00005 	stb	r3,0(r2)
    b9e8:	00000606 	br	ba04 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    b9ec:	e0fff817 	ldw	r3,-32(fp)
    b9f0:	e0bffd17 	ldw	r2,-12(fp)
    b9f4:	1880071e 	bne	r3,r2,ba14 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    b9f8:	e0bfff17 	ldw	r2,-4(fp)
    b9fc:	1090000c 	andi	r2,r2,16384
    ba00:	1000061e 	bne	r2,zero,ba1c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    ba04:	e0fff817 	ldw	r3,-32(fp)
    ba08:	e0bffa17 	ldw	r2,-24(fp)
    ba0c:	18bfeb36 	bltu	r3,r2,b9bc <altera_avalon_jtag_uart_read+0x44>
    ba10:	00000306 	br	ba20 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    ba14:	0001883a 	nop
    ba18:	00000106 	br	ba20 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    ba1c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    ba20:	e0fff817 	ldw	r3,-32(fp)
    ba24:	e0bffd17 	ldw	r2,-12(fp)
    ba28:	18800426 	beq	r3,r2,ba3c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    ba2c:	e0fff817 	ldw	r3,-32(fp)
    ba30:	e0bffd17 	ldw	r2,-12(fp)
    ba34:	1885c83a 	sub	r2,r3,r2
    ba38:	00000606 	br	ba54 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    ba3c:	e0bfff17 	ldw	r2,-4(fp)
    ba40:	1090000c 	andi	r2,r2,16384
    ba44:	10000226 	beq	r2,zero,ba50 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    ba48:	00bffd44 	movi	r2,-11
    ba4c:	00000106 	br	ba54 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    ba50:	00bffec4 	movi	r2,-5
}
    ba54:	e037883a 	mov	sp,fp
    ba58:	df000017 	ldw	fp,0(sp)
    ba5c:	dec00104 	addi	sp,sp,4
    ba60:	f800283a 	ret

0000ba64 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ba64:	defff904 	addi	sp,sp,-28
    ba68:	df000615 	stw	fp,24(sp)
    ba6c:	df000604 	addi	fp,sp,24
    ba70:	e13ffc15 	stw	r4,-16(fp)
    ba74:	e17ffd15 	stw	r5,-12(fp)
    ba78:	e1bffe15 	stw	r6,-8(fp)
    ba7c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    ba80:	e0bffc17 	ldw	r2,-16(fp)
    ba84:	10800017 	ldw	r2,0(r2)
    ba88:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    ba8c:	e0bffe17 	ldw	r2,-8(fp)
    ba90:	e0fffd17 	ldw	r3,-12(fp)
    ba94:	1885883a 	add	r2,r3,r2
    ba98:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    ba9c:	00000e06 	br	bad8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    baa0:	e0bffa17 	ldw	r2,-24(fp)
    baa4:	10800104 	addi	r2,r2,4
    baa8:	10800037 	ldwio	r2,0(r2)
    baac:	10bfffec 	andhi	r2,r2,65535
    bab0:	10000926 	beq	r2,zero,bad8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    bab4:	e0fffa17 	ldw	r3,-24(fp)
    bab8:	e0bffd17 	ldw	r2,-12(fp)
    babc:	11000044 	addi	r4,r2,1
    bac0:	e13ffd15 	stw	r4,-12(fp)
    bac4:	10800003 	ldbu	r2,0(r2)
    bac8:	10803fcc 	andi	r2,r2,255
    bacc:	1080201c 	xori	r2,r2,128
    bad0:	10bfe004 	addi	r2,r2,-128
    bad4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    bad8:	e0fffd17 	ldw	r3,-12(fp)
    badc:	e0bffb17 	ldw	r2,-20(fp)
    bae0:	18bfef36 	bltu	r3,r2,baa0 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    bae4:	e0bffe17 	ldw	r2,-8(fp)
}
    bae8:	e037883a 	mov	sp,fp
    baec:	df000017 	ldw	fp,0(sp)
    baf0:	dec00104 	addi	sp,sp,4
    baf4:	f800283a 	ret

0000baf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    baf8:	defffa04 	addi	sp,sp,-24
    bafc:	dfc00515 	stw	ra,20(sp)
    bb00:	df000415 	stw	fp,16(sp)
    bb04:	df000404 	addi	fp,sp,16
    bb08:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    bb0c:	008000c4 	movi	r2,3
    bb10:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    bb14:	e0fffd17 	ldw	r3,-12(fp)
    bb18:	008003f4 	movhi	r2,15
    bb1c:	10909004 	addi	r2,r2,16960
    bb20:	1885383a 	mul	r2,r3,r2
    bb24:	100b883a 	mov	r5,r2
    bb28:	0100bef4 	movhi	r4,763
    bb2c:	213c2004 	addi	r4,r4,-3968
    bb30:	000ade80 	call	ade8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    bb34:	100b883a 	mov	r5,r2
    bb38:	01200034 	movhi	r4,32768
    bb3c:	213fffc4 	addi	r4,r4,-1
    bb40:	000ade80 	call	ade8 <__udivsi3>
    bb44:	100b883a 	mov	r5,r2
    bb48:	e13fff17 	ldw	r4,-4(fp)
    bb4c:	000ade80 	call	ade8 <__udivsi3>
    bb50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    bb54:	e0bffe17 	ldw	r2,-8(fp)
    bb58:	10002a26 	beq	r2,zero,bc04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    bb5c:	e03ffc15 	stw	zero,-16(fp)
    bb60:	00001706 	br	bbc0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    bb64:	00a00034 	movhi	r2,32768
    bb68:	10bfffc4 	addi	r2,r2,-1
    bb6c:	10bfffc4 	addi	r2,r2,-1
    bb70:	103ffe1e 	bne	r2,zero,bb6c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    bb74:	e0fffd17 	ldw	r3,-12(fp)
    bb78:	008003f4 	movhi	r2,15
    bb7c:	10909004 	addi	r2,r2,16960
    bb80:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    bb84:	100b883a 	mov	r5,r2
    bb88:	0100bef4 	movhi	r4,763
    bb8c:	213c2004 	addi	r4,r4,-3968
    bb90:	000ade80 	call	ade8 <__udivsi3>
    bb94:	100b883a 	mov	r5,r2
    bb98:	01200034 	movhi	r4,32768
    bb9c:	213fffc4 	addi	r4,r4,-1
    bba0:	000ade80 	call	ade8 <__udivsi3>
    bba4:	1007883a 	mov	r3,r2
    bba8:	e0bfff17 	ldw	r2,-4(fp)
    bbac:	10c5c83a 	sub	r2,r2,r3
    bbb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    bbb4:	e0bffc17 	ldw	r2,-16(fp)
    bbb8:	10800044 	addi	r2,r2,1
    bbbc:	e0bffc15 	stw	r2,-16(fp)
    bbc0:	e0fffc17 	ldw	r3,-16(fp)
    bbc4:	e0bffe17 	ldw	r2,-8(fp)
    bbc8:	18bfe616 	blt	r3,r2,bb64 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bbcc:	e0fffd17 	ldw	r3,-12(fp)
    bbd0:	008003f4 	movhi	r2,15
    bbd4:	10909004 	addi	r2,r2,16960
    bbd8:	1885383a 	mul	r2,r3,r2
    bbdc:	100b883a 	mov	r5,r2
    bbe0:	0100bef4 	movhi	r4,763
    bbe4:	213c2004 	addi	r4,r4,-3968
    bbe8:	000ade80 	call	ade8 <__udivsi3>
    bbec:	1007883a 	mov	r3,r2
    bbf0:	e0bfff17 	ldw	r2,-4(fp)
    bbf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    bbf8:	10bfffc4 	addi	r2,r2,-1
    bbfc:	103ffe1e 	bne	r2,zero,bbf8 <alt_busy_sleep+0x100>
    bc00:	00000d06 	br	bc38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bc04:	e0fffd17 	ldw	r3,-12(fp)
    bc08:	008003f4 	movhi	r2,15
    bc0c:	10909004 	addi	r2,r2,16960
    bc10:	1885383a 	mul	r2,r3,r2
    bc14:	100b883a 	mov	r5,r2
    bc18:	0100bef4 	movhi	r4,763
    bc1c:	213c2004 	addi	r4,r4,-3968
    bc20:	000ade80 	call	ade8 <__udivsi3>
    bc24:	1007883a 	mov	r3,r2
    bc28:	e0bfff17 	ldw	r2,-4(fp)
    bc2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    bc30:	10bfffc4 	addi	r2,r2,-1
    bc34:	00bffe16 	blt	zero,r2,bc30 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    bc38:	0005883a 	mov	r2,zero
}
    bc3c:	e037883a 	mov	sp,fp
    bc40:	dfc00117 	ldw	ra,4(sp)
    bc44:	df000017 	ldw	fp,0(sp)
    bc48:	dec00204 	addi	sp,sp,8
    bc4c:	f800283a 	ret

0000bc50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bc50:	defffe04 	addi	sp,sp,-8
    bc54:	df000115 	stw	fp,4(sp)
    bc58:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    bc5c:	e03fff15 	stw	zero,-4(fp)
    bc60:	00000506 	br	bc78 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    bc64:	e0bfff17 	ldw	r2,-4(fp)
    bc68:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    bc6c:	e0bfff17 	ldw	r2,-4(fp)
    bc70:	10800804 	addi	r2,r2,32
    bc74:	e0bfff15 	stw	r2,-4(fp)
    bc78:	e0bfff17 	ldw	r2,-4(fp)
    bc7c:	10820030 	cmpltui	r2,r2,2048
    bc80:	103ff81e 	bne	r2,zero,bc64 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bc84:	0001883a 	nop
    bc88:	e037883a 	mov	sp,fp
    bc8c:	df000017 	ldw	fp,0(sp)
    bc90:	dec00104 	addi	sp,sp,4
    bc94:	f800283a 	ret

0000bc98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bc98:	defffe04 	addi	sp,sp,-8
    bc9c:	dfc00115 	stw	ra,4(sp)
    bca0:	df000015 	stw	fp,0(sp)
    bca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bca8:	d0a00917 	ldw	r2,-32732(gp)
    bcac:	10000326 	beq	r2,zero,bcbc <alt_get_errno+0x24>
    bcb0:	d0a00917 	ldw	r2,-32732(gp)
    bcb4:	103ee83a 	callr	r2
    bcb8:	00000106 	br	bcc0 <alt_get_errno+0x28>
    bcbc:	d0a29904 	addi	r2,gp,-30108
}
    bcc0:	e037883a 	mov	sp,fp
    bcc4:	dfc00117 	ldw	ra,4(sp)
    bcc8:	df000017 	ldw	fp,0(sp)
    bccc:	dec00204 	addi	sp,sp,8
    bcd0:	f800283a 	ret

0000bcd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bcd4:	defffa04 	addi	sp,sp,-24
    bcd8:	dfc00515 	stw	ra,20(sp)
    bcdc:	df000415 	stw	fp,16(sp)
    bce0:	df000404 	addi	fp,sp,16
    bce4:	e13ffe15 	stw	r4,-8(fp)
    bce8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bcec:	e0bffe17 	ldw	r2,-8(fp)
    bcf0:	10000326 	beq	r2,zero,bd00 <alt_dev_llist_insert+0x2c>
    bcf4:	e0bffe17 	ldw	r2,-8(fp)
    bcf8:	10800217 	ldw	r2,8(r2)
    bcfc:	1000061e 	bne	r2,zero,bd18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    bd00:	000bc980 	call	bc98 <alt_get_errno>
    bd04:	1007883a 	mov	r3,r2
    bd08:	00800584 	movi	r2,22
    bd0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bd10:	00bffa84 	movi	r2,-22
    bd14:	00001306 	br	bd64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bd18:	e0bffe17 	ldw	r2,-8(fp)
    bd1c:	e0ffff17 	ldw	r3,-4(fp)
    bd20:	e0fffc15 	stw	r3,-16(fp)
    bd24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bd28:	e0bffd17 	ldw	r2,-12(fp)
    bd2c:	e0fffc17 	ldw	r3,-16(fp)
    bd30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bd34:	e0bffc17 	ldw	r2,-16(fp)
    bd38:	10c00017 	ldw	r3,0(r2)
    bd3c:	e0bffd17 	ldw	r2,-12(fp)
    bd40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bd44:	e0bffc17 	ldw	r2,-16(fp)
    bd48:	10800017 	ldw	r2,0(r2)
    bd4c:	e0fffd17 	ldw	r3,-12(fp)
    bd50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bd54:	e0bffc17 	ldw	r2,-16(fp)
    bd58:	e0fffd17 	ldw	r3,-12(fp)
    bd5c:	10c00015 	stw	r3,0(r2)

  return 0;  
    bd60:	0005883a 	mov	r2,zero
}
    bd64:	e037883a 	mov	sp,fp
    bd68:	dfc00117 	ldw	ra,4(sp)
    bd6c:	df000017 	ldw	fp,0(sp)
    bd70:	dec00204 	addi	sp,sp,8
    bd74:	f800283a 	ret

0000bd78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bd78:	defffd04 	addi	sp,sp,-12
    bd7c:	dfc00215 	stw	ra,8(sp)
    bd80:	df000115 	stw	fp,4(sp)
    bd84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bd88:	00800074 	movhi	r2,1
    bd8c:	10b22004 	addi	r2,r2,-14208
    bd90:	e0bfff15 	stw	r2,-4(fp)
    bd94:	00000606 	br	bdb0 <_do_ctors+0x38>
        (*ctor) (); 
    bd98:	e0bfff17 	ldw	r2,-4(fp)
    bd9c:	10800017 	ldw	r2,0(r2)
    bda0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bda4:	e0bfff17 	ldw	r2,-4(fp)
    bda8:	10bfff04 	addi	r2,r2,-4
    bdac:	e0bfff15 	stw	r2,-4(fp)
    bdb0:	e0ffff17 	ldw	r3,-4(fp)
    bdb4:	00800074 	movhi	r2,1
    bdb8:	10b22104 	addi	r2,r2,-14204
    bdbc:	18bff62e 	bgeu	r3,r2,bd98 <_do_ctors+0x20>
        (*ctor) (); 
}
    bdc0:	0001883a 	nop
    bdc4:	e037883a 	mov	sp,fp
    bdc8:	dfc00117 	ldw	ra,4(sp)
    bdcc:	df000017 	ldw	fp,0(sp)
    bdd0:	dec00204 	addi	sp,sp,8
    bdd4:	f800283a 	ret

0000bdd8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bdd8:	defffd04 	addi	sp,sp,-12
    bddc:	dfc00215 	stw	ra,8(sp)
    bde0:	df000115 	stw	fp,4(sp)
    bde4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bde8:	00800074 	movhi	r2,1
    bdec:	10b22004 	addi	r2,r2,-14208
    bdf0:	e0bfff15 	stw	r2,-4(fp)
    bdf4:	00000606 	br	be10 <_do_dtors+0x38>
        (*dtor) (); 
    bdf8:	e0bfff17 	ldw	r2,-4(fp)
    bdfc:	10800017 	ldw	r2,0(r2)
    be00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    be04:	e0bfff17 	ldw	r2,-4(fp)
    be08:	10bfff04 	addi	r2,r2,-4
    be0c:	e0bfff15 	stw	r2,-4(fp)
    be10:	e0ffff17 	ldw	r3,-4(fp)
    be14:	00800074 	movhi	r2,1
    be18:	10b22104 	addi	r2,r2,-14204
    be1c:	18bff62e 	bgeu	r3,r2,bdf8 <_do_dtors+0x20>
        (*dtor) (); 
}
    be20:	0001883a 	nop
    be24:	e037883a 	mov	sp,fp
    be28:	dfc00117 	ldw	ra,4(sp)
    be2c:	df000017 	ldw	fp,0(sp)
    be30:	dec00204 	addi	sp,sp,8
    be34:	f800283a 	ret

0000be38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    be38:	defffe04 	addi	sp,sp,-8
    be3c:	dfc00115 	stw	ra,4(sp)
    be40:	df000015 	stw	fp,0(sp)
    be44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    be48:	01440004 	movi	r5,4096
    be4c:	0009883a 	mov	r4,zero
    be50:	000c4600 	call	c460 <alt_icache_flush>
#endif
}
    be54:	0001883a 	nop
    be58:	e037883a 	mov	sp,fp
    be5c:	dfc00117 	ldw	ra,4(sp)
    be60:	df000017 	ldw	fp,0(sp)
    be64:	dec00204 	addi	sp,sp,8
    be68:	f800283a 	ret

0000be6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    be6c:	defff904 	addi	sp,sp,-28
    be70:	dfc00615 	stw	ra,24(sp)
    be74:	df000515 	stw	fp,20(sp)
    be78:	df000504 	addi	fp,sp,20
    be7c:	e13ffc15 	stw	r4,-16(fp)
    be80:	e17ffd15 	stw	r5,-12(fp)
    be84:	e1bffe15 	stw	r6,-8(fp)
    be88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    be8c:	e1bfff17 	ldw	r6,-4(fp)
    be90:	e17ffe17 	ldw	r5,-8(fp)
    be94:	e13ffd17 	ldw	r4,-12(fp)
    be98:	000c0ac0 	call	c0ac <open>
    be9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    bea0:	e0bffb17 	ldw	r2,-20(fp)
    bea4:	10001c16 	blt	r2,zero,bf18 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    bea8:	00800074 	movhi	r2,1
    beac:	10b44904 	addi	r2,r2,-11996
    beb0:	e0fffb17 	ldw	r3,-20(fp)
    beb4:	18c00324 	muli	r3,r3,12
    beb8:	10c5883a 	add	r2,r2,r3
    bebc:	10c00017 	ldw	r3,0(r2)
    bec0:	e0bffc17 	ldw	r2,-16(fp)
    bec4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bec8:	00800074 	movhi	r2,1
    becc:	10b44904 	addi	r2,r2,-11996
    bed0:	e0fffb17 	ldw	r3,-20(fp)
    bed4:	18c00324 	muli	r3,r3,12
    bed8:	10c5883a 	add	r2,r2,r3
    bedc:	10800104 	addi	r2,r2,4
    bee0:	10c00017 	ldw	r3,0(r2)
    bee4:	e0bffc17 	ldw	r2,-16(fp)
    bee8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    beec:	00800074 	movhi	r2,1
    bef0:	10b44904 	addi	r2,r2,-11996
    bef4:	e0fffb17 	ldw	r3,-20(fp)
    bef8:	18c00324 	muli	r3,r3,12
    befc:	10c5883a 	add	r2,r2,r3
    bf00:	10800204 	addi	r2,r2,8
    bf04:	10c00017 	ldw	r3,0(r2)
    bf08:	e0bffc17 	ldw	r2,-16(fp)
    bf0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bf10:	e13ffb17 	ldw	r4,-20(fp)
    bf14:	000b5a00 	call	b5a0 <alt_release_fd>
  }
} 
    bf18:	0001883a 	nop
    bf1c:	e037883a 	mov	sp,fp
    bf20:	dfc00117 	ldw	ra,4(sp)
    bf24:	df000017 	ldw	fp,0(sp)
    bf28:	dec00204 	addi	sp,sp,8
    bf2c:	f800283a 	ret

0000bf30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bf30:	defffb04 	addi	sp,sp,-20
    bf34:	dfc00415 	stw	ra,16(sp)
    bf38:	df000315 	stw	fp,12(sp)
    bf3c:	df000304 	addi	fp,sp,12
    bf40:	e13ffd15 	stw	r4,-12(fp)
    bf44:	e17ffe15 	stw	r5,-8(fp)
    bf48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bf4c:	01c07fc4 	movi	r7,511
    bf50:	01800044 	movi	r6,1
    bf54:	e17ffd17 	ldw	r5,-12(fp)
    bf58:	01000074 	movhi	r4,1
    bf5c:	21344c04 	addi	r4,r4,-11984
    bf60:	000be6c0 	call	be6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bf64:	01c07fc4 	movi	r7,511
    bf68:	000d883a 	mov	r6,zero
    bf6c:	e17ffe17 	ldw	r5,-8(fp)
    bf70:	01000074 	movhi	r4,1
    bf74:	21344904 	addi	r4,r4,-11996
    bf78:	000be6c0 	call	be6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bf7c:	01c07fc4 	movi	r7,511
    bf80:	01800044 	movi	r6,1
    bf84:	e17fff17 	ldw	r5,-4(fp)
    bf88:	01000074 	movhi	r4,1
    bf8c:	21344f04 	addi	r4,r4,-11972
    bf90:	000be6c0 	call	be6c <alt_open_fd>
}  
    bf94:	0001883a 	nop
    bf98:	e037883a 	mov	sp,fp
    bf9c:	dfc00117 	ldw	ra,4(sp)
    bfa0:	df000017 	ldw	fp,0(sp)
    bfa4:	dec00204 	addi	sp,sp,8
    bfa8:	f800283a 	ret

0000bfac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bfac:	defffe04 	addi	sp,sp,-8
    bfb0:	dfc00115 	stw	ra,4(sp)
    bfb4:	df000015 	stw	fp,0(sp)
    bfb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bfbc:	d0a00917 	ldw	r2,-32732(gp)
    bfc0:	10000326 	beq	r2,zero,bfd0 <alt_get_errno+0x24>
    bfc4:	d0a00917 	ldw	r2,-32732(gp)
    bfc8:	103ee83a 	callr	r2
    bfcc:	00000106 	br	bfd4 <alt_get_errno+0x28>
    bfd0:	d0a29904 	addi	r2,gp,-30108
}
    bfd4:	e037883a 	mov	sp,fp
    bfd8:	dfc00117 	ldw	ra,4(sp)
    bfdc:	df000017 	ldw	fp,0(sp)
    bfe0:	dec00204 	addi	sp,sp,8
    bfe4:	f800283a 	ret

0000bfe8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bfe8:	defffd04 	addi	sp,sp,-12
    bfec:	df000215 	stw	fp,8(sp)
    bff0:	df000204 	addi	fp,sp,8
    bff4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bff8:	e0bfff17 	ldw	r2,-4(fp)
    bffc:	10800217 	ldw	r2,8(r2)
    c000:	10d00034 	orhi	r3,r2,16384
    c004:	e0bfff17 	ldw	r2,-4(fp)
    c008:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c00c:	e03ffe15 	stw	zero,-8(fp)
    c010:	00001d06 	br	c088 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c014:	00800074 	movhi	r2,1
    c018:	10b44904 	addi	r2,r2,-11996
    c01c:	e0fffe17 	ldw	r3,-8(fp)
    c020:	18c00324 	muli	r3,r3,12
    c024:	10c5883a 	add	r2,r2,r3
    c028:	10c00017 	ldw	r3,0(r2)
    c02c:	e0bfff17 	ldw	r2,-4(fp)
    c030:	10800017 	ldw	r2,0(r2)
    c034:	1880111e 	bne	r3,r2,c07c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c038:	00800074 	movhi	r2,1
    c03c:	10b44904 	addi	r2,r2,-11996
    c040:	e0fffe17 	ldw	r3,-8(fp)
    c044:	18c00324 	muli	r3,r3,12
    c048:	10c5883a 	add	r2,r2,r3
    c04c:	10800204 	addi	r2,r2,8
    c050:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c054:	1000090e 	bge	r2,zero,c07c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c058:	e0bffe17 	ldw	r2,-8(fp)
    c05c:	10c00324 	muli	r3,r2,12
    c060:	00800074 	movhi	r2,1
    c064:	10b44904 	addi	r2,r2,-11996
    c068:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c06c:	e0bfff17 	ldw	r2,-4(fp)
    c070:	18800226 	beq	r3,r2,c07c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c074:	00bffcc4 	movi	r2,-13
    c078:	00000806 	br	c09c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c07c:	e0bffe17 	ldw	r2,-8(fp)
    c080:	10800044 	addi	r2,r2,1
    c084:	e0bffe15 	stw	r2,-8(fp)
    c088:	d0a00817 	ldw	r2,-32736(gp)
    c08c:	1007883a 	mov	r3,r2
    c090:	e0bffe17 	ldw	r2,-8(fp)
    c094:	18bfdf2e 	bgeu	r3,r2,c014 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c098:	0005883a 	mov	r2,zero
}
    c09c:	e037883a 	mov	sp,fp
    c0a0:	df000017 	ldw	fp,0(sp)
    c0a4:	dec00104 	addi	sp,sp,4
    c0a8:	f800283a 	ret

0000c0ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c0ac:	defff604 	addi	sp,sp,-40
    c0b0:	dfc00915 	stw	ra,36(sp)
    c0b4:	df000815 	stw	fp,32(sp)
    c0b8:	df000804 	addi	fp,sp,32
    c0bc:	e13ffd15 	stw	r4,-12(fp)
    c0c0:	e17ffe15 	stw	r5,-8(fp)
    c0c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c0c8:	00bfffc4 	movi	r2,-1
    c0cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c0d0:	00bffb44 	movi	r2,-19
    c0d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c0d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c0dc:	d1600604 	addi	r5,gp,-32744
    c0e0:	e13ffd17 	ldw	r4,-12(fp)
    c0e4:	000c2240 	call	c224 <alt_find_dev>
    c0e8:	e0bff815 	stw	r2,-32(fp)
    c0ec:	e0bff817 	ldw	r2,-32(fp)
    c0f0:	1000051e 	bne	r2,zero,c108 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c0f4:	e13ffd17 	ldw	r4,-12(fp)
    c0f8:	000c2b40 	call	c2b4 <alt_find_file>
    c0fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c100:	00800044 	movi	r2,1
    c104:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c108:	e0bff817 	ldw	r2,-32(fp)
    c10c:	10002926 	beq	r2,zero,c1b4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c110:	e13ff817 	ldw	r4,-32(fp)
    c114:	000c3bc0 	call	c3bc <alt_get_fd>
    c118:	e0bff915 	stw	r2,-28(fp)
    c11c:	e0bff917 	ldw	r2,-28(fp)
    c120:	1000030e 	bge	r2,zero,c130 <open+0x84>
    {
      status = index;
    c124:	e0bff917 	ldw	r2,-28(fp)
    c128:	e0bffa15 	stw	r2,-24(fp)
    c12c:	00002306 	br	c1bc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    c130:	e0bff917 	ldw	r2,-28(fp)
    c134:	10c00324 	muli	r3,r2,12
    c138:	00800074 	movhi	r2,1
    c13c:	10b44904 	addi	r2,r2,-11996
    c140:	1885883a 	add	r2,r3,r2
    c144:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c148:	e0fffe17 	ldw	r3,-8(fp)
    c14c:	00900034 	movhi	r2,16384
    c150:	10bfffc4 	addi	r2,r2,-1
    c154:	1886703a 	and	r3,r3,r2
    c158:	e0bffc17 	ldw	r2,-16(fp)
    c15c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c160:	e0bffb17 	ldw	r2,-20(fp)
    c164:	1000051e 	bne	r2,zero,c17c <open+0xd0>
    c168:	e13ffc17 	ldw	r4,-16(fp)
    c16c:	000bfe80 	call	bfe8 <alt_file_locked>
    c170:	e0bffa15 	stw	r2,-24(fp)
    c174:	e0bffa17 	ldw	r2,-24(fp)
    c178:	10001016 	blt	r2,zero,c1bc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c17c:	e0bff817 	ldw	r2,-32(fp)
    c180:	10800317 	ldw	r2,12(r2)
    c184:	10000826 	beq	r2,zero,c1a8 <open+0xfc>
    c188:	e0bff817 	ldw	r2,-32(fp)
    c18c:	10800317 	ldw	r2,12(r2)
    c190:	e1ffff17 	ldw	r7,-4(fp)
    c194:	e1bffe17 	ldw	r6,-8(fp)
    c198:	e17ffd17 	ldw	r5,-12(fp)
    c19c:	e13ffc17 	ldw	r4,-16(fp)
    c1a0:	103ee83a 	callr	r2
    c1a4:	00000106 	br	c1ac <open+0x100>
    c1a8:	0005883a 	mov	r2,zero
    c1ac:	e0bffa15 	stw	r2,-24(fp)
    c1b0:	00000206 	br	c1bc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c1b4:	00bffb44 	movi	r2,-19
    c1b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c1bc:	e0bffa17 	ldw	r2,-24(fp)
    c1c0:	1000090e 	bge	r2,zero,c1e8 <open+0x13c>
  {
    alt_release_fd (index);  
    c1c4:	e13ff917 	ldw	r4,-28(fp)
    c1c8:	000b5a00 	call	b5a0 <alt_release_fd>
    ALT_ERRNO = -status;
    c1cc:	000bfac0 	call	bfac <alt_get_errno>
    c1d0:	1007883a 	mov	r3,r2
    c1d4:	e0bffa17 	ldw	r2,-24(fp)
    c1d8:	0085c83a 	sub	r2,zero,r2
    c1dc:	18800015 	stw	r2,0(r3)
    return -1;
    c1e0:	00bfffc4 	movi	r2,-1
    c1e4:	00000106 	br	c1ec <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    c1e8:	e0bff917 	ldw	r2,-28(fp)
}
    c1ec:	e037883a 	mov	sp,fp
    c1f0:	dfc00117 	ldw	ra,4(sp)
    c1f4:	df000017 	ldw	fp,0(sp)
    c1f8:	dec00204 	addi	sp,sp,8
    c1fc:	f800283a 	ret

0000c200 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c200:	deffff04 	addi	sp,sp,-4
    c204:	df000015 	stw	fp,0(sp)
    c208:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c20c:	000170fa 	wrctl	ienable,zero
}
    c210:	0001883a 	nop
    c214:	e037883a 	mov	sp,fp
    c218:	df000017 	ldw	fp,0(sp)
    c21c:	dec00104 	addi	sp,sp,4
    c220:	f800283a 	ret

0000c224 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c224:	defffa04 	addi	sp,sp,-24
    c228:	dfc00515 	stw	ra,20(sp)
    c22c:	df000415 	stw	fp,16(sp)
    c230:	df000404 	addi	fp,sp,16
    c234:	e13ffe15 	stw	r4,-8(fp)
    c238:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c23c:	e0bfff17 	ldw	r2,-4(fp)
    c240:	10800017 	ldw	r2,0(r2)
    c244:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c248:	e13ffe17 	ldw	r4,-8(fp)
    c24c:	00081b00 	call	81b0 <strlen>
    c250:	10800044 	addi	r2,r2,1
    c254:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c258:	00000d06 	br	c290 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c25c:	e0bffc17 	ldw	r2,-16(fp)
    c260:	10800217 	ldw	r2,8(r2)
    c264:	e0fffd17 	ldw	r3,-12(fp)
    c268:	180d883a 	mov	r6,r3
    c26c:	e17ffe17 	ldw	r5,-8(fp)
    c270:	1009883a 	mov	r4,r2
    c274:	000c53c0 	call	c53c <memcmp>
    c278:	1000021e 	bne	r2,zero,c284 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c27c:	e0bffc17 	ldw	r2,-16(fp)
    c280:	00000706 	br	c2a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c284:	e0bffc17 	ldw	r2,-16(fp)
    c288:	10800017 	ldw	r2,0(r2)
    c28c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c290:	e0fffc17 	ldw	r3,-16(fp)
    c294:	e0bfff17 	ldw	r2,-4(fp)
    c298:	18bff01e 	bne	r3,r2,c25c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c29c:	0005883a 	mov	r2,zero
}
    c2a0:	e037883a 	mov	sp,fp
    c2a4:	dfc00117 	ldw	ra,4(sp)
    c2a8:	df000017 	ldw	fp,0(sp)
    c2ac:	dec00204 	addi	sp,sp,8
    c2b0:	f800283a 	ret

0000c2b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c2b4:	defffb04 	addi	sp,sp,-20
    c2b8:	dfc00415 	stw	ra,16(sp)
    c2bc:	df000315 	stw	fp,12(sp)
    c2c0:	df000304 	addi	fp,sp,12
    c2c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c2c8:	d0a00417 	ldw	r2,-32752(gp)
    c2cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c2d0:	00003106 	br	c398 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c2d4:	e0bffd17 	ldw	r2,-12(fp)
    c2d8:	10800217 	ldw	r2,8(r2)
    c2dc:	1009883a 	mov	r4,r2
    c2e0:	00081b00 	call	81b0 <strlen>
    c2e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c2e8:	e0bffd17 	ldw	r2,-12(fp)
    c2ec:	10c00217 	ldw	r3,8(r2)
    c2f0:	e0bffe17 	ldw	r2,-8(fp)
    c2f4:	10bfffc4 	addi	r2,r2,-1
    c2f8:	1885883a 	add	r2,r3,r2
    c2fc:	10800003 	ldbu	r2,0(r2)
    c300:	10803fcc 	andi	r2,r2,255
    c304:	1080201c 	xori	r2,r2,128
    c308:	10bfe004 	addi	r2,r2,-128
    c30c:	10800bd8 	cmpnei	r2,r2,47
    c310:	1000031e 	bne	r2,zero,c320 <alt_find_file+0x6c>
    {
      len -= 1;
    c314:	e0bffe17 	ldw	r2,-8(fp)
    c318:	10bfffc4 	addi	r2,r2,-1
    c31c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c320:	e0bffe17 	ldw	r2,-8(fp)
    c324:	e0ffff17 	ldw	r3,-4(fp)
    c328:	1885883a 	add	r2,r3,r2
    c32c:	10800003 	ldbu	r2,0(r2)
    c330:	10803fcc 	andi	r2,r2,255
    c334:	1080201c 	xori	r2,r2,128
    c338:	10bfe004 	addi	r2,r2,-128
    c33c:	10800be0 	cmpeqi	r2,r2,47
    c340:	1000081e 	bne	r2,zero,c364 <alt_find_file+0xb0>
    c344:	e0bffe17 	ldw	r2,-8(fp)
    c348:	e0ffff17 	ldw	r3,-4(fp)
    c34c:	1885883a 	add	r2,r3,r2
    c350:	10800003 	ldbu	r2,0(r2)
    c354:	10803fcc 	andi	r2,r2,255
    c358:	1080201c 	xori	r2,r2,128
    c35c:	10bfe004 	addi	r2,r2,-128
    c360:	10000a1e 	bne	r2,zero,c38c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c364:	e0bffd17 	ldw	r2,-12(fp)
    c368:	10800217 	ldw	r2,8(r2)
    c36c:	e0fffe17 	ldw	r3,-8(fp)
    c370:	180d883a 	mov	r6,r3
    c374:	e17fff17 	ldw	r5,-4(fp)
    c378:	1009883a 	mov	r4,r2
    c37c:	000c53c0 	call	c53c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c380:	1000021e 	bne	r2,zero,c38c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c384:	e0bffd17 	ldw	r2,-12(fp)
    c388:	00000706 	br	c3a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c38c:	e0bffd17 	ldw	r2,-12(fp)
    c390:	10800017 	ldw	r2,0(r2)
    c394:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c398:	e0fffd17 	ldw	r3,-12(fp)
    c39c:	d0a00404 	addi	r2,gp,-32752
    c3a0:	18bfcc1e 	bne	r3,r2,c2d4 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c3a4:	0005883a 	mov	r2,zero
}
    c3a8:	e037883a 	mov	sp,fp
    c3ac:	dfc00117 	ldw	ra,4(sp)
    c3b0:	df000017 	ldw	fp,0(sp)
    c3b4:	dec00204 	addi	sp,sp,8
    c3b8:	f800283a 	ret

0000c3bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c3bc:	defffc04 	addi	sp,sp,-16
    c3c0:	df000315 	stw	fp,12(sp)
    c3c4:	df000304 	addi	fp,sp,12
    c3c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c3cc:	00bffa04 	movi	r2,-24
    c3d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c3d4:	e03ffd15 	stw	zero,-12(fp)
    c3d8:	00001906 	br	c440 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    c3dc:	00800074 	movhi	r2,1
    c3e0:	10b44904 	addi	r2,r2,-11996
    c3e4:	e0fffd17 	ldw	r3,-12(fp)
    c3e8:	18c00324 	muli	r3,r3,12
    c3ec:	10c5883a 	add	r2,r2,r3
    c3f0:	10800017 	ldw	r2,0(r2)
    c3f4:	10000f1e 	bne	r2,zero,c434 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    c3f8:	00800074 	movhi	r2,1
    c3fc:	10b44904 	addi	r2,r2,-11996
    c400:	e0fffd17 	ldw	r3,-12(fp)
    c404:	18c00324 	muli	r3,r3,12
    c408:	10c5883a 	add	r2,r2,r3
    c40c:	e0ffff17 	ldw	r3,-4(fp)
    c410:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c414:	d0e00817 	ldw	r3,-32736(gp)
    c418:	e0bffd17 	ldw	r2,-12(fp)
    c41c:	1880020e 	bge	r3,r2,c428 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    c420:	e0bffd17 	ldw	r2,-12(fp)
    c424:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    c428:	e0bffd17 	ldw	r2,-12(fp)
    c42c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    c430:	00000606 	br	c44c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c434:	e0bffd17 	ldw	r2,-12(fp)
    c438:	10800044 	addi	r2,r2,1
    c43c:	e0bffd15 	stw	r2,-12(fp)
    c440:	e0bffd17 	ldw	r2,-12(fp)
    c444:	10800810 	cmplti	r2,r2,32
    c448:	103fe41e 	bne	r2,zero,c3dc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c44c:	e0bffe17 	ldw	r2,-8(fp)
}
    c450:	e037883a 	mov	sp,fp
    c454:	df000017 	ldw	fp,0(sp)
    c458:	dec00104 	addi	sp,sp,4
    c45c:	f800283a 	ret

0000c460 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c460:	defffb04 	addi	sp,sp,-20
    c464:	df000415 	stw	fp,16(sp)
    c468:	df000404 	addi	fp,sp,16
    c46c:	e13ffe15 	stw	r4,-8(fp)
    c470:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c474:	e0bfff17 	ldw	r2,-4(fp)
    c478:	10840070 	cmpltui	r2,r2,4097
    c47c:	1000021e 	bne	r2,zero,c488 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c480:	00840004 	movi	r2,4096
    c484:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c488:	e0fffe17 	ldw	r3,-8(fp)
    c48c:	e0bfff17 	ldw	r2,-4(fp)
    c490:	1885883a 	add	r2,r3,r2
    c494:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c498:	e0bffe17 	ldw	r2,-8(fp)
    c49c:	e0bffc15 	stw	r2,-16(fp)
    c4a0:	00000506 	br	c4b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c4a4:	e0bffc17 	ldw	r2,-16(fp)
    c4a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c4ac:	e0bffc17 	ldw	r2,-16(fp)
    c4b0:	10800804 	addi	r2,r2,32
    c4b4:	e0bffc15 	stw	r2,-16(fp)
    c4b8:	e0fffc17 	ldw	r3,-16(fp)
    c4bc:	e0bffd17 	ldw	r2,-12(fp)
    c4c0:	18bff836 	bltu	r3,r2,c4a4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    c4c4:	e0bffe17 	ldw	r2,-8(fp)
    c4c8:	108007cc 	andi	r2,r2,31
    c4cc:	10000226 	beq	r2,zero,c4d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    c4d0:	e0bffc17 	ldw	r2,-16(fp)
    c4d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    c4d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    c4dc:	0001883a 	nop
    c4e0:	e037883a 	mov	sp,fp
    c4e4:	df000017 	ldw	fp,0(sp)
    c4e8:	dec00104 	addi	sp,sp,4
    c4ec:	f800283a 	ret

0000c4f0 <atexit>:
    c4f0:	200b883a 	mov	r5,r4
    c4f4:	000f883a 	mov	r7,zero
    c4f8:	000d883a 	mov	r6,zero
    c4fc:	0009883a 	mov	r4,zero
    c500:	000c5b81 	jmpi	c5b8 <__register_exitproc>

0000c504 <exit>:
    c504:	defffe04 	addi	sp,sp,-8
    c508:	000b883a 	mov	r5,zero
    c50c:	dc000015 	stw	r16,0(sp)
    c510:	dfc00115 	stw	ra,4(sp)
    c514:	2021883a 	mov	r16,r4
    c518:	000c6d00 	call	c6d0 <__call_exitprocs>
    c51c:	00800074 	movhi	r2,1
    c520:	10b4b404 	addi	r2,r2,-11568
    c524:	11000017 	ldw	r4,0(r2)
    c528:	20800f17 	ldw	r2,60(r4)
    c52c:	10000126 	beq	r2,zero,c534 <exit+0x30>
    c530:	103ee83a 	callr	r2
    c534:	8009883a 	mov	r4,r16
    c538:	000c8500 	call	c850 <_exit>

0000c53c <memcmp>:
    c53c:	01c000c4 	movi	r7,3
    c540:	3980192e 	bgeu	r7,r6,c5a8 <memcmp+0x6c>
    c544:	2144b03a 	or	r2,r4,r5
    c548:	11c4703a 	and	r2,r2,r7
    c54c:	10000f26 	beq	r2,zero,c58c <memcmp+0x50>
    c550:	20800003 	ldbu	r2,0(r4)
    c554:	28c00003 	ldbu	r3,0(r5)
    c558:	10c0151e 	bne	r2,r3,c5b0 <memcmp+0x74>
    c55c:	31bfff84 	addi	r6,r6,-2
    c560:	01ffffc4 	movi	r7,-1
    c564:	00000406 	br	c578 <memcmp+0x3c>
    c568:	20800003 	ldbu	r2,0(r4)
    c56c:	28c00003 	ldbu	r3,0(r5)
    c570:	31bfffc4 	addi	r6,r6,-1
    c574:	10c00e1e 	bne	r2,r3,c5b0 <memcmp+0x74>
    c578:	21000044 	addi	r4,r4,1
    c57c:	29400044 	addi	r5,r5,1
    c580:	31fff91e 	bne	r6,r7,c568 <memcmp+0x2c>
    c584:	0005883a 	mov	r2,zero
    c588:	f800283a 	ret
    c58c:	20c00017 	ldw	r3,0(r4)
    c590:	28800017 	ldw	r2,0(r5)
    c594:	18bfee1e 	bne	r3,r2,c550 <memcmp+0x14>
    c598:	31bfff04 	addi	r6,r6,-4
    c59c:	21000104 	addi	r4,r4,4
    c5a0:	29400104 	addi	r5,r5,4
    c5a4:	39bff936 	bltu	r7,r6,c58c <memcmp+0x50>
    c5a8:	303fe91e 	bne	r6,zero,c550 <memcmp+0x14>
    c5ac:	003ff506 	br	c584 <memcmp+0x48>
    c5b0:	10c5c83a 	sub	r2,r2,r3
    c5b4:	f800283a 	ret

0000c5b8 <__register_exitproc>:
    c5b8:	defffa04 	addi	sp,sp,-24
    c5bc:	dc000315 	stw	r16,12(sp)
    c5c0:	04000074 	movhi	r16,1
    c5c4:	8434b404 	addi	r16,r16,-11568
    c5c8:	80c00017 	ldw	r3,0(r16)
    c5cc:	dc400415 	stw	r17,16(sp)
    c5d0:	dfc00515 	stw	ra,20(sp)
    c5d4:	18805217 	ldw	r2,328(r3)
    c5d8:	2023883a 	mov	r17,r4
    c5dc:	10003726 	beq	r2,zero,c6bc <__register_exitproc+0x104>
    c5e0:	10c00117 	ldw	r3,4(r2)
    c5e4:	010007c4 	movi	r4,31
    c5e8:	20c00e16 	blt	r4,r3,c624 <__register_exitproc+0x6c>
    c5ec:	1a000044 	addi	r8,r3,1
    c5f0:	8800221e 	bne	r17,zero,c67c <__register_exitproc+0xc4>
    c5f4:	18c00084 	addi	r3,r3,2
    c5f8:	18c7883a 	add	r3,r3,r3
    c5fc:	18c7883a 	add	r3,r3,r3
    c600:	12000115 	stw	r8,4(r2)
    c604:	10c7883a 	add	r3,r2,r3
    c608:	19400015 	stw	r5,0(r3)
    c60c:	0005883a 	mov	r2,zero
    c610:	dfc00517 	ldw	ra,20(sp)
    c614:	dc400417 	ldw	r17,16(sp)
    c618:	dc000317 	ldw	r16,12(sp)
    c61c:	dec00604 	addi	sp,sp,24
    c620:	f800283a 	ret
    c624:	00800034 	movhi	r2,0
    c628:	10800004 	addi	r2,r2,0
    c62c:	10002626 	beq	r2,zero,c6c8 <__register_exitproc+0x110>
    c630:	01006404 	movi	r4,400
    c634:	d9400015 	stw	r5,0(sp)
    c638:	d9800115 	stw	r6,4(sp)
    c63c:	d9c00215 	stw	r7,8(sp)
    c640:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c644:	d9400017 	ldw	r5,0(sp)
    c648:	d9800117 	ldw	r6,4(sp)
    c64c:	d9c00217 	ldw	r7,8(sp)
    c650:	10001d26 	beq	r2,zero,c6c8 <__register_exitproc+0x110>
    c654:	81000017 	ldw	r4,0(r16)
    c658:	10000115 	stw	zero,4(r2)
    c65c:	02000044 	movi	r8,1
    c660:	22405217 	ldw	r9,328(r4)
    c664:	0007883a 	mov	r3,zero
    c668:	12400015 	stw	r9,0(r2)
    c66c:	20805215 	stw	r2,328(r4)
    c670:	10006215 	stw	zero,392(r2)
    c674:	10006315 	stw	zero,396(r2)
    c678:	883fde26 	beq	r17,zero,c5f4 <__register_exitproc+0x3c>
    c67c:	18c9883a 	add	r4,r3,r3
    c680:	2109883a 	add	r4,r4,r4
    c684:	1109883a 	add	r4,r2,r4
    c688:	21802215 	stw	r6,136(r4)
    c68c:	01800044 	movi	r6,1
    c690:	12406217 	ldw	r9,392(r2)
    c694:	30cc983a 	sll	r6,r6,r3
    c698:	4992b03a 	or	r9,r9,r6
    c69c:	12406215 	stw	r9,392(r2)
    c6a0:	21c04215 	stw	r7,264(r4)
    c6a4:	01000084 	movi	r4,2
    c6a8:	893fd21e 	bne	r17,r4,c5f4 <__register_exitproc+0x3c>
    c6ac:	11006317 	ldw	r4,396(r2)
    c6b0:	218cb03a 	or	r6,r4,r6
    c6b4:	11806315 	stw	r6,396(r2)
    c6b8:	003fce06 	br	c5f4 <__register_exitproc+0x3c>
    c6bc:	18805304 	addi	r2,r3,332
    c6c0:	18805215 	stw	r2,328(r3)
    c6c4:	003fc606 	br	c5e0 <__register_exitproc+0x28>
    c6c8:	00bfffc4 	movi	r2,-1
    c6cc:	003fd006 	br	c610 <__register_exitproc+0x58>

0000c6d0 <__call_exitprocs>:
    c6d0:	defff504 	addi	sp,sp,-44
    c6d4:	df000915 	stw	fp,36(sp)
    c6d8:	dd400615 	stw	r21,24(sp)
    c6dc:	dc800315 	stw	r18,12(sp)
    c6e0:	dfc00a15 	stw	ra,40(sp)
    c6e4:	ddc00815 	stw	r23,32(sp)
    c6e8:	dd800715 	stw	r22,28(sp)
    c6ec:	dd000515 	stw	r20,20(sp)
    c6f0:	dcc00415 	stw	r19,16(sp)
    c6f4:	dc400215 	stw	r17,8(sp)
    c6f8:	dc000115 	stw	r16,4(sp)
    c6fc:	d9000015 	stw	r4,0(sp)
    c700:	2839883a 	mov	fp,r5
    c704:	04800044 	movi	r18,1
    c708:	057fffc4 	movi	r21,-1
    c70c:	00800074 	movhi	r2,1
    c710:	10b4b404 	addi	r2,r2,-11568
    c714:	12000017 	ldw	r8,0(r2)
    c718:	45005217 	ldw	r20,328(r8)
    c71c:	44c05204 	addi	r19,r8,328
    c720:	a0001c26 	beq	r20,zero,c794 <__call_exitprocs+0xc4>
    c724:	a0800117 	ldw	r2,4(r20)
    c728:	15ffffc4 	addi	r23,r2,-1
    c72c:	b8000d16 	blt	r23,zero,c764 <__call_exitprocs+0x94>
    c730:	14000044 	addi	r16,r2,1
    c734:	8421883a 	add	r16,r16,r16
    c738:	8421883a 	add	r16,r16,r16
    c73c:	84402004 	addi	r17,r16,128
    c740:	a463883a 	add	r17,r20,r17
    c744:	a421883a 	add	r16,r20,r16
    c748:	e0001e26 	beq	fp,zero,c7c4 <__call_exitprocs+0xf4>
    c74c:	80804017 	ldw	r2,256(r16)
    c750:	e0801c26 	beq	fp,r2,c7c4 <__call_exitprocs+0xf4>
    c754:	bdffffc4 	addi	r23,r23,-1
    c758:	843fff04 	addi	r16,r16,-4
    c75c:	8c7fff04 	addi	r17,r17,-4
    c760:	bd7ff91e 	bne	r23,r21,c748 <__call_exitprocs+0x78>
    c764:	00800034 	movhi	r2,0
    c768:	10800004 	addi	r2,r2,0
    c76c:	10000926 	beq	r2,zero,c794 <__call_exitprocs+0xc4>
    c770:	a0800117 	ldw	r2,4(r20)
    c774:	1000301e 	bne	r2,zero,c838 <__call_exitprocs+0x168>
    c778:	a0800017 	ldw	r2,0(r20)
    c77c:	10003226 	beq	r2,zero,c848 <__call_exitprocs+0x178>
    c780:	a009883a 	mov	r4,r20
    c784:	98800015 	stw	r2,0(r19)
    c788:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c78c:	9d000017 	ldw	r20,0(r19)
    c790:	a03fe41e 	bne	r20,zero,c724 <__call_exitprocs+0x54>
    c794:	dfc00a17 	ldw	ra,40(sp)
    c798:	df000917 	ldw	fp,36(sp)
    c79c:	ddc00817 	ldw	r23,32(sp)
    c7a0:	dd800717 	ldw	r22,28(sp)
    c7a4:	dd400617 	ldw	r21,24(sp)
    c7a8:	dd000517 	ldw	r20,20(sp)
    c7ac:	dcc00417 	ldw	r19,16(sp)
    c7b0:	dc800317 	ldw	r18,12(sp)
    c7b4:	dc400217 	ldw	r17,8(sp)
    c7b8:	dc000117 	ldw	r16,4(sp)
    c7bc:	dec00b04 	addi	sp,sp,44
    c7c0:	f800283a 	ret
    c7c4:	a0800117 	ldw	r2,4(r20)
    c7c8:	80c00017 	ldw	r3,0(r16)
    c7cc:	10bfffc4 	addi	r2,r2,-1
    c7d0:	15c01426 	beq	r2,r23,c824 <__call_exitprocs+0x154>
    c7d4:	80000015 	stw	zero,0(r16)
    c7d8:	183fde26 	beq	r3,zero,c754 <__call_exitprocs+0x84>
    c7dc:	95c8983a 	sll	r4,r18,r23
    c7e0:	a0806217 	ldw	r2,392(r20)
    c7e4:	a5800117 	ldw	r22,4(r20)
    c7e8:	2084703a 	and	r2,r4,r2
    c7ec:	10000b26 	beq	r2,zero,c81c <__call_exitprocs+0x14c>
    c7f0:	a0806317 	ldw	r2,396(r20)
    c7f4:	2088703a 	and	r4,r4,r2
    c7f8:	20000c1e 	bne	r4,zero,c82c <__call_exitprocs+0x15c>
    c7fc:	89400017 	ldw	r5,0(r17)
    c800:	d9000017 	ldw	r4,0(sp)
    c804:	183ee83a 	callr	r3
    c808:	a0800117 	ldw	r2,4(r20)
    c80c:	15bfbf1e 	bne	r2,r22,c70c <__call_exitprocs+0x3c>
    c810:	98800017 	ldw	r2,0(r19)
    c814:	153fcf26 	beq	r2,r20,c754 <__call_exitprocs+0x84>
    c818:	003fbc06 	br	c70c <__call_exitprocs+0x3c>
    c81c:	183ee83a 	callr	r3
    c820:	003ff906 	br	c808 <__call_exitprocs+0x138>
    c824:	a5c00115 	stw	r23,4(r20)
    c828:	003feb06 	br	c7d8 <__call_exitprocs+0x108>
    c82c:	89000017 	ldw	r4,0(r17)
    c830:	183ee83a 	callr	r3
    c834:	003ff406 	br	c808 <__call_exitprocs+0x138>
    c838:	a0800017 	ldw	r2,0(r20)
    c83c:	a027883a 	mov	r19,r20
    c840:	1029883a 	mov	r20,r2
    c844:	003fb606 	br	c720 <__call_exitprocs+0x50>
    c848:	0005883a 	mov	r2,zero
    c84c:	003ffb06 	br	c83c <__call_exitprocs+0x16c>

0000c850 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c850:	defffd04 	addi	sp,sp,-12
    c854:	df000215 	stw	fp,8(sp)
    c858:	df000204 	addi	fp,sp,8
    c85c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c860:	0001883a 	nop
    c864:	e0bfff17 	ldw	r2,-4(fp)
    c868:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c86c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c870:	10000226 	beq	r2,zero,c87c <_exit+0x2c>
    ALT_SIM_FAIL();
    c874:	002af070 	cmpltui	zero,zero,43969
    c878:	00000106 	br	c880 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c87c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c880:	003fff06 	br	c880 <_exit+0x30>
